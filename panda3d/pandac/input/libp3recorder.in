1430661628
2 3
13 libp3recorder 4 ayCl 12 panda3d.core 
34
33 13 ~RecorderBase 0 6 67 27 RecorderBase::~RecorderBase 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: RecorderBase::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual RecorderBase::~RecorderBase(void);

34 12 is_recording 0 4 67 26 RecorderBase::is_recording 0 1 1 446
////////////////////////////////////////////////////////////////////
//     Function: RecorderBase::is_recording
//       Access: Published
//  Description: Returns true if this recorder is presently recording
//               data for saving to a session file, false otherwise.
//               If this is true, record_data() will be called from
//               time to time.
////////////////////////////////////////////////////////////////////
51
inline bool RecorderBase::is_recording(void) const;

35 10 is_playing 0 4 67 24 RecorderBase::is_playing 0 1 2 418
////////////////////////////////////////////////////////////////////
//     Function: RecorderBase::is_playing
//       Access: Published
//  Description: Returns true if this recorder is presently playing back
//               data from session file, false otherwise.  If this is
//               true, play_data() will be called from time to time.
////////////////////////////////////////////////////////////////////
49
inline bool RecorderBase::is_playing(void) const;

36 14 get_class_type 0 4 67 28 RecorderBase::get_class_type 0 1 3 0
53
static TypeHandle RecorderBase::get_class_type(void);

37 18 upcast_to_DataNode 0 12 68 33 MouseRecorder::upcast_to_DataNode 0 1 6 37
upcast from MouseRecorder to DataNode
50
DataNode *MouseRecorder::upcast_to_DataNode(void);

38 25 downcast_to_MouseRecorder 0 12 69 35 DataNode::downcast_to_MouseRecorder 0 1 7 39
downcast from DataNode to MouseRecorder
57
MouseRecorder *DataNode::downcast_to_MouseRecorder(void);

39 22 upcast_to_RecorderBase 0 12 68 37 MouseRecorder::upcast_to_RecorderBase 0 1 8 41
upcast from MouseRecorder to RecorderBase
58
RecorderBase *MouseRecorder::upcast_to_RecorderBase(void);

40 25 downcast_to_MouseRecorder 0 12 67 39 RecorderBase::downcast_to_MouseRecorder 0 1 9 43
downcast from RecorderBase to MouseRecorder
61
MouseRecorder *RecorderBase::downcast_to_MouseRecorder(void);

41 13 MouseRecorder 0 4 68 28 MouseRecorder::MouseRecorder 0 1 4 225
////////////////////////////////////////////////////////////////////
//     Function: MouseRecorder::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
MouseRecorder::MouseRecorder(basic_string< char > const &name);

42 14 ~MouseRecorder 0 6 68 29 MouseRecorder::~MouseRecorder 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: MouseRecorder::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual MouseRecorder::~MouseRecorder(void);

43 14 get_class_type 0 4 68 29 MouseRecorder::get_class_type 0 1 5 0
54
static TypeHandle MouseRecorder::get_class_type(void);

44 18 RecorderController 0 4 70 38 RecorderController::RecorderController 0 1 10 230
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
RecorderController::RecorderController(void);

45 12 begin_record 0 4 70 32 RecorderController::begin_record 0 1 11 375
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::begin_record
//       Access: Published
//  Description: Begins recording data to the indicated filename.  All
//               of the recorders in use should already have been
//               added.
////////////////////////////////////////////////////////////////////
64
bool RecorderController::begin_record(Filename const &filename);

46 14 begin_playback 0 4 70 34 RecorderController::begin_playback 0 1 12 661
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::begin_playback
//       Access: Published
//  Description: Begins playing back data from the indicated filename.
//               All of the recorders in use should already have been
//               added, although this may define additional recorders
//               if they are present in the file (these new recorders
//               will not be used).  This may also undefine recorders
//               that were previously added but are not present in the
//               file.
////////////////////////////////////////////////////////////////////
66
bool RecorderController::begin_playback(Filename const &filename);

47 5 close 0 4 70 25 RecorderController::close 0 1 13 275
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::close
//       Access: Published
//  Description: Finishes recording data to the indicated filename.
////////////////////////////////////////////////////////////////////
37
void RecorderController::close(void);

48 14 get_start_time 0 4 70 34 RecorderController::get_start_time 0 1 14 418
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_start_time
//       Access: Published
//  Description: Returns the time (and date) at which the current
//               session was originally recorded (or, in recording
//               mode, the time at which the current session began).
////////////////////////////////////////////////////////////////////
67
inline unsigned int RecorderController::get_start_time(void) const;

49 15 set_random_seed 0 4 70 35 RecorderController::set_random_seed 0 1 15 472
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::set_random_seed
//       Access: Published
//  Description: Indicates an arbitrary number to be recorded in the
//               session file as a random seed, should the application
//               wish to take advantage of it.  This must be set
//               before begin_record() is called.
////////////////////////////////////////////////////////////////////
65
inline void RecorderController::set_random_seed(int random_seed);

50 15 get_random_seed 0 4 70 35 RecorderController::get_random_seed 0 1 16 444
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_random_seed
//       Access: Published
//  Description: Returns the random seed that was set by a previous
//               call to set_random_seed(), or the number read from
//               the session file after begin_playback() has been
//               called.
////////////////////////////////////////////////////////////////////
59
inline int RecorderController::get_random_seed(void) const;

51 12 is_recording 0 4 70 32 RecorderController::is_recording 0 1 17 324
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_recording
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               output, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool RecorderController::is_recording(void) const;

52 10 is_playing 0 4 70 30 RecorderController::is_playing 0 1 18 321
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_playing
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               input, false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool RecorderController::is_playing(void) const;

53 7 is_open 0 4 70 27 RecorderController::is_open 0 1 19 335
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_open
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               either input or output, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool RecorderController::is_open(void) const;

54 12 get_filename 0 4 70 32 RecorderController::get_filename 0 1 20 348
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_filename
//       Access: Published
//  Description: Returns the filename that was passed to the most
//               recent call to begin_record() or begin_playback().
////////////////////////////////////////////////////////////////////
68
inline Filename const &RecorderController::get_filename(void) const;

55 8 is_error 0 4 70 28 RecorderController::is_error 0 1 21 453
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_error
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               input or output output and there is an error on the
//               stream, or false if the controller is closed or if
//               there is no problem.
////////////////////////////////////////////////////////////////////
47
inline bool RecorderController::is_error(void);

56 16 get_clock_offset 0 4 70 36 RecorderController::get_clock_offset 0 1 22 456
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_clock_offset
//       Access: Published
//  Description: Returns the delta offset between the actual frame
//               time and the frame time written to the log.  This is
//               essentially the time at which the recording (or
//               playback) started.
////////////////////////////////////////////////////////////////////
63
inline double RecorderController::get_clock_offset(void) const;

57 16 get_frame_offset 0 4 70 36 RecorderController::get_frame_offset 0 1 23 466
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_frame_offset
//       Access: Published
//  Description: Returns the delta offset between the actual frame
//               count and the frame count written to the log.  This is
//               essentially the frame number at which the recording
//               (or playback) started.
////////////////////////////////////////////////////////////////////
60
inline int RecorderController::get_frame_offset(void) const;

58 12 add_recorder 0 4 70 32 RecorderController::add_recorder 0 1 24 654
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::add_recorder
//       Access: Published
//  Description: Adds the named recorder to the set of recorders that
//               are in use.
//
//               If the controller is in recording mode, the named
//               recorder will begin recording its status to the
//               session file.  If the controller is in playback mode
//               and the name and type matches a recorder in the
//               session file, the recorder will begin receiving data.
////////////////////////////////////////////////////////////////////
103
inline void RecorderController::add_recorder(basic_string< char > const &name, RecorderBase *recorder);

59 12 has_recorder 0 4 70 32 RecorderController::has_recorder 0 1 25 643
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::has_recorder
//       Access: Published
//  Description: Returns true if the named recorder has been added to
//               the table by a previous call to add_recorder(), false
//               otherwise. 
//
//               If the controller is in playback mode, this will also
//               return false for a recorder that was found in the
//               session file but was never explicitly added via
//               add_recorder(); see get_recorder().
////////////////////////////////////////////////////////////////////
85
inline bool RecorderController::has_recorder(basic_string< char > const &name) const;

60 12 get_recorder 0 4 70 32 RecorderController::get_recorder 0 1 26 714
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_recorder
//       Access: Published
//  Description: Returns the recorder with the indicated name, or NULL
//               if there is no such recorder.
//
//               If the controller is in playback mode, this may
//               return the recorder matching the indicated name as
//               read from the session file, even if it was never
//               added to the table by the user.  In this case,
//               has_recorder() may return false, but get_recorder()
//               will return a non-NULL value.
////////////////////////////////////////////////////////////////////
94
inline RecorderBase *RecorderController::get_recorder(basic_string< char > const &name) const;

61 15 remove_recorder 0 4 70 35 RecorderController::remove_recorder 0 1 27 822
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::remove_recorder
//       Access: Published
//  Description: Removes the named recorder from the table.  Returns
//               true if successful, false if there was no such
//               recorder.
//
//               If the controller is in recording mode, the named
//               recorder will stop recording.  If the controller is
//               in playback mode, the named recorder will
//               disassociate itself from the session file (but if the
//               session file still has data for this name, a default
//               recorder will take its place to decode the data from
//               the session file).
////////////////////////////////////////////////////////////////////
82
inline bool RecorderController::remove_recorder(basic_string< char > const &name);

62 13 set_frame_tie 0 4 70 33 RecorderController::set_frame_tie 0 1 28 895
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::set_frame_tie
//       Access: Published
//  Description: Sets the frame_tie flag.
//
//               When this is true, sessions are played back
//               frame-for-frame, based on the frame count of the
//               recorded session.  This gives the most accurate
//               playback, but the playback rate will vary according
//               to the frame rate of the playback machine.
//
//               When this is false, sessions are played back at real
//               time, based on the clock of the recorded session.
//               This may introduce playback discrepencies if the
//               frames do not fall at exactly the same times as they
//               did in the original.
////////////////////////////////////////////////////////////////////
62
inline void RecorderController::set_frame_tie(bool frame_tie);

63 13 get_frame_tie 0 4 70 33 RecorderController::get_frame_tie 0 1 29 253
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_frame_tie
//       Access: Published
//  Description: See set_frame_tie().
////////////////////////////////////////////////////////////////////
58
inline bool RecorderController::get_frame_tie(void) const;

64 12 record_frame 0 4 70 32 RecorderController::record_frame 0 1 30 341
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::record_frame
//       Access: Published
//  Description: Gets the next frame of data from all of the active
//               recorders and adds it to the output file.
////////////////////////////////////////////////////////////////////
44
void RecorderController::record_frame(void);

65 10 play_frame 0 4 70 30 RecorderController::play_frame 0 1 31 339
////////////////////////////////////////////////////////////////////
//     Function: RecorderController::play_frame
//       Access: Published
//  Description: Gets the next frame of data from all of the active
//               recorders and adds it to the output file.
////////////////////////////////////////////////////////////////////
42
void RecorderController::play_frame(void);

66 14 get_class_type 0 4 70 34 RecorderController::get_class_type 0 1 32 0
59
static TypeHandle RecorderController::get_class_type(void);

32
1 14 Dtool_ayClK8hL 0 6 3 74 0 14 Dtool_ayClK8hL 446 ////////////////////////////////////////////////////////////////////
//     Function: RecorderBase::is_recording
//       Access: Published
//  Description: Returns true if this recorder is presently recording
//               data for saving to a session file, false otherwise.
//               If this is true, record_data() will be called from
//               time to time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 72  
2 14 Dtool_ayClYULh 0 6 4 74 0 14 Dtool_ayClYULh 418 ////////////////////////////////////////////////////////////////////
//     Function: RecorderBase::is_playing
//       Access: Published
//  Description: Returns true if this recorder is presently playing back
//               data from session file, false otherwise.  If this is
//               true, play_data() will be called from time to time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 72  
3 14 Dtool_ayClFTOU 0 7 5 76 0 14 Dtool_ayClFTOU 0 0 
4 14 Dtool_ayClqf6S 0 7 12 78 42 14 Dtool_ayClqf6S 225 ////////////////////////////////////////////////////////////////////
//     Function: MouseRecorder::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 77  
5 14 Dtool_ayClHvdt 0 7 14 76 0 14 Dtool_ayClHvdt 0 0 
6 14 Dtool_ayClCU8Q 0 7 8 79 0 14 Dtool_ayClCU8Q 0 1 4 this 3 78  
7 14 Dtool_ayClujBb 0 7 9 78 42 14 Dtool_ayClujBb 0 1 4 this 3 79  
8 14 Dtool_ayClKZwc 0 6 10 80 0 14 Dtool_ayClKZwc 0 1 4 this 3 78  
9 14 Dtool_ayClAqBt 0 7 11 78 42 14 Dtool_ayClAqBt 0 1 4 this 3 80  
10 14 Dtool_ayClgOQz 0 7 17 81 0 14 Dtool_ayClgOQz 230 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_ayClEoI_ 0 6 18 74 0 14 Dtool_ayClEoI_ 375 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::begin_record
//       Access: Published
//  Description: Begins recording data to the indicated filename.  All
//               of the recorders in use should already have been
//               added.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  8 filename 1 82  
12 14 Dtool_ayClD04q 0 6 19 74 0 14 Dtool_ayClD04q 661 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::begin_playback
//       Access: Published
//  Description: Begins playing back data from the indicated filename.
//               All of the recorders in use should already have been
//               added, although this may define additional recorders
//               if they are present in the file (these new recorders
//               will not be used).  This may also undefine recorders
//               that were previously added but are not present in the
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  8 filename 1 82  
13 14 Dtool_ayCl3TyG 0 4 20 85 0 14 Dtool_ayCl3TyG 275 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::close
//       Access: Published
//  Description: Finishes recording data to the indicated filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 81  
14 14 Dtool_ayCl7lBc 0 6 21 88 0 14 Dtool_ayCl7lBc 418 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_start_time
//       Access: Published
//  Description: Returns the time (and date) at which the current
//               session was originally recorded (or, in recording
//               mode, the time at which the current session began).
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
15 14 Dtool_ayClEIcS 0 4 22 85 0 14 Dtool_ayClEIcS 472 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::set_random_seed
//       Access: Published
//  Description: Indicates an arbitrary number to be recorded in the
//               session file as a random seed, should the application
//               wish to take advantage of it.  This must be set
//               before begin_record() is called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  11 random_seed 1 89  
16 14 Dtool_ayClzhjD 0 6 23 89 0 14 Dtool_ayClzhjD 444 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_random_seed
//       Access: Published
//  Description: Returns the random seed that was set by a previous
//               call to set_random_seed(), or the number read from
//               the session file after begin_playback() has been
//               called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
17 14 Dtool_ayCl3xMb 0 6 24 74 0 14 Dtool_ayCl3xMb 324 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_recording
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               output, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
18 14 Dtool_ayClBF0E 0 6 25 74 0 14 Dtool_ayClBF0E 321 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_playing
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               input, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
19 14 Dtool_ayCl7Ejw 0 6 26 74 0 14 Dtool_ayCl7Ejw 335 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_open
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               either input or output, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
20 14 Dtool_ayClE6J_ 0 6 27 82 0 14 Dtool_ayClE6J_ 348 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_filename
//       Access: Published
//  Description: Returns the filename that was passed to the most
//               recent call to begin_record() or begin_playback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
21 14 Dtool_ayClm_or 0 6 28 74 0 14 Dtool_ayClm_or 453 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::is_error
//       Access: Published
//  Description: Returns true if the controller has been opened for
//               input or output output and there is an error on the
//               stream, or false if the controller is closed or if
//               there is no problem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 81  
22 14 Dtool_ayClN6bw 0 6 29 90 0 14 Dtool_ayClN6bw 456 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_clock_offset
//       Access: Published
//  Description: Returns the delta offset between the actual frame
//               time and the frame time written to the log.  This is
//               essentially the time at which the recording (or
//               playback) started.
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
23 14 Dtool_ayClyEgj 0 6 30 89 0 14 Dtool_ayClyEgj 466 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_frame_offset
//       Access: Published
//  Description: Returns the delta offset between the actual frame
//               count and the frame count written to the log.  This is
//               essentially the frame number at which the recording
//               (or playback) started.
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
24 14 Dtool_ayClAnOD 0 4 31 85 0 14 Dtool_ayClAnOD 654 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::add_recorder
//       Access: Published
//  Description: Adds the named recorder to the set of recorders that
//               are in use.
//
//               If the controller is in recording mode, the named
//               recorder will begin recording its status to the
//               session file.  If the controller is in playback mode
//               and the name and type matches a recorder in the
//               session file, the recorder will begin receiving data.
//////////////////////////////////////////////////////////////////// 3 4 this 3 81  4 name 1 77  8 recorder 1 80  
25 14 Dtool_ayClSl_W 0 6 32 74 0 14 Dtool_ayClSl_W 643 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::has_recorder
//       Access: Published
//  Description: Returns true if the named recorder has been added to
//               the table by a previous call to add_recorder(), false
//               otherwise. 
//
//               If the controller is in playback mode, this will also
//               return false for a recorder that was found in the
//               session file but was never explicitly added via
//               add_recorder(); see get_recorder().
//////////////////////////////////////////////////////////////////// 2 4 this 3 86  4 name 1 77  
26 14 Dtool_ayClNjK2 0 6 33 80 0 14 Dtool_ayClNjK2 714 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_recorder
//       Access: Published
//  Description: Returns the recorder with the indicated name, or NULL
//               if there is no such recorder.
//
//               If the controller is in playback mode, this may
//               return the recorder matching the indicated name as
//               read from the session file, even if it was never
//               added to the table by the user.  In this case,
//               has_recorder() may return false, but get_recorder()
//               will return a non-NULL value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 86  4 name 1 77  
27 14 Dtool_ayClcpvX 0 6 34 74 0 14 Dtool_ayClcpvX 822 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::remove_recorder
//       Access: Published
//  Description: Removes the named recorder from the table.  Returns
//               true if successful, false if there was no such
//               recorder.
//
//               If the controller is in recording mode, the named
//               recorder will stop recording.  If the controller is
//               in playback mode, the named recorder will
//               disassociate itself from the session file (but if the
//               session file still has data for this name, a default
//               recorder will take its place to decode the data from
//               the session file).
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  4 name 1 77  
28 14 Dtool_ayClsgOd 0 4 35 85 0 14 Dtool_ayClsgOd 895 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::set_frame_tie
//       Access: Published
//  Description: Sets the frame_tie flag.
//
//               When this is true, sessions are played back
//               frame-for-frame, based on the frame count of the
//               recorded session.  This gives the most accurate
//               playback, but the playback rate will vary according
//               to the frame rate of the playback machine.
//
//               When this is false, sessions are played back at real
//               time, based on the clock of the recorded session.
//               This may introduce playback discrepencies if the
//               frames do not fall at exactly the same times as they
//               did in the original.
//////////////////////////////////////////////////////////////////// 2 4 this 3 81  9 frame_tie 1 74  
29 14 Dtool_ayClzYut 0 6 36 74 0 14 Dtool_ayClzYut 253 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::get_frame_tie
//       Access: Published
//  Description: See set_frame_tie().
//////////////////////////////////////////////////////////////////// 1 4 this 3 86  
30 14 Dtool_ayClDD1N 0 4 37 85 0 14 Dtool_ayClDD1N 341 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::record_frame
//       Access: Published
//  Description: Gets the next frame of data from all of the active
//               recorders and adds it to the output file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 81  
31 14 Dtool_ayClcjvm 0 4 38 85 0 14 Dtool_ayClcjvm 339 ////////////////////////////////////////////////////////////////////
//     Function: RecorderController::play_frame
//       Access: Published
//  Description: Gets the next frame of data from all of the active
//               recorders and adds it to the output file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 81  
32 14 Dtool_ayClnwuH 0 7 39 76 0 14 Dtool_ayClnwuH 0 0 
24
67 12 RecorderBase 0 26625 12 RecorderBase 12 RecorderBase 0 0 0 0 33 0 3 34 35 36 0 0 0 0 0 1517
////////////////////////////////////////////////////////////////////
//       Class : RecorderBase
// Description : This is the base class to a number of objects that
//               record particular kinds of user input (like a
//               MouseRecorder) to use in conjunction with a
//               RecorderController to record the user's inputs
//               for a session.
//
//               Note that RecorderBase does not actually inherit from
//               TypedObject, even though it defines get_type().  The
//               assumption is that the classes that derive from
//               RecorderBase might also inherit independently from
//               TypedObject.
//
//               It also does not inherit from TypedWritable, but it
//               defines a method called write_recorder() which is
//               very similar to a TypedWritable's write_datagram().
//               Classes that derive from RecorderBase and also
//               inherit from TypedWritable may choose to remap
//               write_recorder() to do exactly the same thing as
//               write_datagram(), or they may choose to write
//               something slightly different.
//
//               Most types of recorders should derive from Recorder,
//               as it derives from ReferenceCount, except for
//               MouseRecorder, which would otherwise doubly inherit
//               from ReferenceCount.
////////////////////////////////////////////////////////////////////

68 13 MouseRecorder 0 26625 13 MouseRecorder 13 MouseRecorder 0 0 0 1 41 42 0 1 43 0 0 2 3 69 37 38 3 67 39 40 0 0 626
////////////////////////////////////////////////////////////////////
//       Class : MouseRecorder
// Description : This object records any data generated by a
//               particular MouseAndKeyboard node on the datagraph for
//               a session for eventual playback via a
//               DataGraphPlayback (and a PlaybackController).  To use
//               it, make it a child of the node you wish to record.
//               It also serves as a pass-through, so that additional
//               child nodes may be parented directly to it.
////////////////////////////////////////////////////////////////////

69 8 DataNode 0 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

70 18 RecorderController 0 75777 18 RecorderController 18 RecorderController 0 0 0 1 44 0 0 22 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 0 0 1 0 71 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : RecorderController
// Description : This object manages the process of recording the
//               user's runtime inputs to a bam file so that the
//               session can be recreated later.
////////////////////////////////////////////////////////////////////

71 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

72 20 RecorderBase const * 0 8576 20 RecorderBase const * 20 RecorderBase const * 0 0 73 0 0 0 0 0 0 0 0 0 0

73 18 RecorderBase const 0 8832 18 RecorderBase const 18 RecorderBase const 0 0 67 0 0 0 0 0 0 0 0 0 0

74 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

75 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

76 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 75 0 0 0 0 0 0 0 0 0 0

77 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

78 15 MouseRecorder * 0 8576 15 MouseRecorder * 15 MouseRecorder * 0 0 68 0 0 0 0 0 0 0 0 0 0

79 10 DataNode * 0 8576 10 DataNode * 10 DataNode * 0 0 69 0 0 0 0 0 0 0 0 0 0

80 14 RecorderBase * 0 8576 14 RecorderBase * 14 RecorderBase * 0 0 67 0 0 0 0 0 0 0 0 0 0

81 20 RecorderController * 0 8576 20 RecorderController * 20 RecorderController * 0 0 70 0 0 0 0 0 0 0 0 0 0

82 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 83 0 0 0 0 0 0 0 0 0 0

83 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 84 0 0 0 0 0 0 0 0 0 0

84 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

85 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

86 26 RecorderController const * 0 8576 26 RecorderController const * 26 RecorderController const * 0 0 87 0 0 0 0 0 0 0 0 0 0

87 24 RecorderController const 0 8832 24 RecorderController const 24 RecorderController const 0 0 70 0 0 0 0 0 0 0 0 0 0

88 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

89 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

90 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

0
0
0
