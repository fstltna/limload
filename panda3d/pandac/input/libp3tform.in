1430661190
2 3
10 libp3tform 4 v_mB 12 panda3d.core 
251
264 13 ButtonThrower 0 4 515 28 ButtonThrower::ButtonThrower 0 1 1 222
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
ButtonThrower::ButtonThrower(basic_string< char > const &name);

265 21 set_button_down_event 0 4 515 36 ButtonThrower::set_button_down_event 0 1 2 867
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
96
inline void ButtonThrower::set_button_down_event(basic_string< char > const &button_down_event);

266 21 get_button_down_event 0 4 515 36 ButtonThrower::get_button_down_event 0 1 3 353
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
////////////////////////////////////////////////////////////////////
84
inline basic_string< char > const &ButtonThrower::get_button_down_event(void) const;

267 19 set_button_up_event 0 4 515 34 ButtonThrower::set_button_up_event 0 1 4 391
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_button_up_event(basic_string< char > const &button_up_event);

268 19 get_button_up_event 0 4 515 34 ButtonThrower::get_button_up_event 0 1 5 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_button_up_event(void) const;

269 23 set_button_repeat_event 0 4 515 38 ButtonThrower::set_button_repeat_event 0 1 6 875
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
////////////////////////////////////////////////////////////////////
100
inline void ButtonThrower::set_button_repeat_event(basic_string< char > const &button_repeat_event);

270 23 get_button_repeat_event 0 4 515 38 ButtonThrower::get_button_repeat_event 0 1 7 359
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > const &ButtonThrower::get_button_repeat_event(void) const;

271 19 set_keystroke_event 0 4 515 34 ButtonThrower::set_keystroke_event 0 1 8 1304
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_keystroke_event(basic_string< char > const &keystroke_event);

272 19 get_keystroke_event 0 4 515 34 ButtonThrower::get_keystroke_event 0 1 9 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_keystroke_event(void) const;

273 19 set_candidate_event 0 4 515 34 ButtonThrower::set_candidate_event 0 1 10 1252
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
////////////////////////////////////////////////////////////////////
92
inline void ButtonThrower::set_candidate_event(basic_string< char > const &candidate_event);

274 19 get_candidate_event 0 4 515 34 ButtonThrower::get_candidate_event 0 1 11 347
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
////////////////////////////////////////////////////////////////////
82
inline basic_string< char > const &ButtonThrower::get_candidate_event(void) const;

275 14 set_move_event 0 4 515 29 ButtonThrower::set_move_event 0 1 12 340
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
////////////////////////////////////////////////////////////////////
82
inline void ButtonThrower::set_move_event(basic_string< char > const &move_event);

276 14 get_move_event 0 4 515 29 ButtonThrower::get_move_event 0 1 13 332
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
////////////////////////////////////////////////////////////////////
77
inline basic_string< char > const &ButtonThrower::get_move_event(void) const;

277 25 set_raw_button_down_event 0 4 515 40 ButtonThrower::set_raw_button_down_event 0 1 14 465
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_down_event
//       Access: Published
//  Description: Like set_button_down_event, but uses the raw,
//               untransformed scan key from the operating system.
//               This uses buttons that are independent of the
//               user's selected keyboard layout.
////////////////////////////////////////////////////////////////////
104
inline void ButtonThrower::set_raw_button_down_event(basic_string< char > const &raw_button_down_event);

278 25 get_raw_button_down_event 0 4 515 40 ButtonThrower::get_raw_button_down_event 0 1 15 365
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_down_event
//       Access: Published
//  Description: Returns the raw_button_down_event that has been set on
//               this ButtonThrower.  See set_raw_button_down_event().
////////////////////////////////////////////////////////////////////
88
inline basic_string< char > const &ButtonThrower::get_raw_button_down_event(void) const;

279 23 set_raw_button_up_event 0 4 515 38 ButtonThrower::set_raw_button_up_event 0 1 16 399
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_raw_button_down_event().
////////////////////////////////////////////////////////////////////
100
inline void ButtonThrower::set_raw_button_up_event(basic_string< char > const &raw_button_up_event);

280 23 get_raw_button_up_event 0 4 515 38 ButtonThrower::get_raw_button_up_event 0 1 17 359
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_up_event
//       Access: Published
//  Description: Returns the raw_button_up_event that has been set on
//               this ButtonThrower.  See set_raw_button_up_event().
////////////////////////////////////////////////////////////////////
86
inline basic_string< char > const &ButtonThrower::get_raw_button_up_event(void) const;

281 10 set_prefix 0 4 515 25 ButtonThrower::set_prefix 0 1 18 505
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
////////////////////////////////////////////////////////////////////
74
inline void ButtonThrower::set_prefix(basic_string< char > const &prefix);

282 10 get_prefix 0 4 515 25 ButtonThrower::get_prefix 0 1 19 320
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
////////////////////////////////////////////////////////////////////
73
inline basic_string< char > const &ButtonThrower::get_prefix(void) const;

283 17 set_specific_flag 0 4 515 32 ButtonThrower::set_specific_flag 0 1 20 604
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
////////////////////////////////////////////////////////////////////
65
inline void ButtonThrower::set_specific_flag(bool specific_flag);

284 17 get_specific_flag 0 4 515 32 ButtonThrower::get_specific_flag 0 1 21 351
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
////////////////////////////////////////////////////////////////////
57
inline bool ButtonThrower::get_specific_flag(void) const;

285 13 set_time_flag 0 4 515 28 ButtonThrower::set_time_flag 0 1 22 720
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
////////////////////////////////////////////////////////////////////
57
inline void ButtonThrower::set_time_flag(bool time_flag);

286 13 get_time_flag 0 4 515 28 ButtonThrower::get_time_flag 0 1 23 346
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
////////////////////////////////////////////////////////////////////
53
inline bool ButtonThrower::get_time_flag(void) const;

287 13 add_parameter 0 4 515 28 ButtonThrower::add_parameter 0 1 24 382
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
61
void ButtonThrower::add_parameter(EventParameter const &obj);

288 18 get_num_parameters 0 4 515 33 ButtonThrower::get_num_parameters 0 1 25 405
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
////////////////////////////////////////////////////////////////////
50
int ButtonThrower::get_num_parameters(void) const;

289 13 get_parameter 0 4 515 28 ButtonThrower::get_parameter 0 1 26 386
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
////////////////////////////////////////////////////////////////////
57
EventParameter ButtonThrower::get_parameter(int n) const;

290 20 get_modifier_buttons 0 4 515 35 ButtonThrower::get_modifier_buttons 0 1 27 808
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
////////////////////////////////////////////////////////////////////
78
inline ModifierButtons const &ButtonThrower::get_modifier_buttons(void) const;

291 20 set_modifier_buttons 0 4 515 35 ButtonThrower::set_modifier_buttons 0 1 28 1054
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
////////////////////////////////////////////////////////////////////
77
inline void ButtonThrower::set_modifier_buttons(ModifierButtons const &mods);

292 24 set_throw_buttons_active 0 4 515 39 ButtonThrower::set_throw_buttons_active 0 1 29 597
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
////////////////////////////////////////////////////////////////////
63
inline void ButtonThrower::set_throw_buttons_active(bool flag);

293 24 get_throw_buttons_active 0 4 515 39 ButtonThrower::get_throw_buttons_active 0 1 30 446
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
////////////////////////////////////////////////////////////////////
64
inline bool ButtonThrower::get_throw_buttons_active(void) const;

294 16 add_throw_button 0 4 515 31 ButtonThrower::add_throw_button 0 1 31 1056
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
////////////////////////////////////////////////////////////////////
94
bool ButtonThrower::add_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

295 19 remove_throw_button 0 4 515 34 ButtonThrower::remove_throw_button 0 1 32 513
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
////////////////////////////////////////////////////////////////////
97
bool ButtonThrower::remove_throw_button(ModifierButtons const &mods, ButtonHandle const &button);

296 16 has_throw_button 0 4 515 31 ButtonThrower::has_throw_button 0 2 33 34 1059
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
////////////////////////////////////////////////////////////////////
172
bool ButtonThrower::has_throw_button(ModifierButtons const &mods, ButtonHandle const &button) const;
bool ButtonThrower::has_throw_button(ButtonHandle const &button) const;

297 19 clear_throw_buttons 0 4 515 34 ButtonThrower::clear_throw_buttons 0 1 35 342
////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
////////////////////////////////////////////////////////////////////
46
void ButtonThrower::clear_throw_buttons(void);

298 14 get_class_type 0 4 515 29 ButtonThrower::get_class_type 0 1 36 0
54
static TypeHandle ButtonThrower::get_class_type(void);

299 14 require_button 0 4 517 34 MouseInterfaceNode::require_button 0 1 37 589
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
////////////////////////////////////////////////////////////////////
82
void MouseInterfaceNode::require_button(ButtonHandle const &button, bool is_down);

300 12 clear_button 0 4 517 32 MouseInterfaceNode::clear_button 0 1 38 340
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
////////////////////////////////////////////////////////////////////
66
void MouseInterfaceNode::clear_button(ButtonHandle const &button);

301 17 clear_all_buttons 0 4 517 37 MouseInterfaceNode::clear_all_buttons 0 1 39 332
////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
////////////////////////////////////////////////////////////////////
49
void MouseInterfaceNode::clear_all_buttons(void);

302 14 get_class_type 0 4 517 34 MouseInterfaceNode::get_class_type 0 1 40 0
59
static TypeHandle MouseInterfaceNode::get_class_type(void);

303 14 DriveInterface 0 4 518 30 DriveInterface::DriveInterface 0 2 41 42 226
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
72
DriveInterface::DriveInterface(basic_string< char > const &name = (""));

304 17 set_forward_speed 0 4 518 33 DriveInterface::set_forward_speed 0 1 43 396
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_forward_speed(float speed);

305 17 get_forward_speed 0 4 518 33 DriveInterface::get_forward_speed 0 1 44 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_forward_speed(void) const;

306 17 set_reverse_speed 0 4 518 33 DriveInterface::set_reverse_speed 0 1 45 399
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline void DriveInterface::set_reverse_speed(float speed);

307 17 get_reverse_speed 0 4 518 33 DriveInterface::get_reverse_speed 0 1 46 402
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
////////////////////////////////////////////////////////////////////
59
inline float DriveInterface::get_reverse_speed(void) const;

308 16 set_rotate_speed 0 4 518 32 DriveInterface::set_rotate_speed 0 1 47 413
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline void DriveInterface::set_rotate_speed(float speed);

309 16 get_rotate_speed 0 4 518 32 DriveInterface::get_rotate_speed 0 1 48 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
////////////////////////////////////////////////////////////////////
58
inline float DriveInterface::get_rotate_speed(void) const;

310 22 set_vertical_dead_zone 0 4 518 38 DriveInterface::set_vertical_dead_zone 0 1 49 603
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
63
inline void DriveInterface::set_vertical_dead_zone(float zone);

311 22 get_vertical_dead_zone 0 4 518 38 DriveInterface::get_vertical_dead_zone 0 1 50 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
64
inline float DriveInterface::get_vertical_dead_zone(void) const;

312 24 set_horizontal_dead_zone 0 4 518 40 DriveInterface::set_horizontal_dead_zone 0 1 51 606
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
65
inline void DriveInterface::set_horizontal_dead_zone(float zone);

313 24 get_horizontal_dead_zone 0 4 518 40 DriveInterface::get_horizontal_dead_zone 0 1 52 609
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
////////////////////////////////////////////////////////////////////
66
inline float DriveInterface::get_horizontal_dead_zone(void) const;

314 25 set_vertical_ramp_up_time 0 4 518 41 DriveInterface::set_vertical_ramp_up_time 0 1 53 431
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
////////////////////////////////////////////////////////////////////
74
inline void DriveInterface::set_vertical_ramp_up_time(float ramp_up_time);

315 25 get_vertical_ramp_up_time 0 4 518 41 DriveInterface::get_vertical_ramp_up_time 0 1 54 451
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
////////////////////////////////////////////////////////////////////
67
inline float DriveInterface::get_vertical_ramp_up_time(void) const;

316 27 set_vertical_ramp_down_time 0 4 518 43 DriveInterface::set_vertical_ramp_down_time 0 1 55 412
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
78
inline void DriveInterface::set_vertical_ramp_down_time(float ramp_down_time);

317 27 get_vertical_ramp_down_time 0 4 518 43 DriveInterface::get_vertical_ramp_down_time 0 1 56 415
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_vertical_ramp_down_time(void) const;

318 27 set_horizontal_ramp_up_time 0 4 518 43 DriveInterface::set_horizontal_ramp_up_time 0 1 57 417
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
////////////////////////////////////////////////////////////////////
76
inline void DriveInterface::set_horizontal_ramp_up_time(float ramp_up_time);

319 27 get_horizontal_ramp_up_time 0 4 518 43 DriveInterface::get_horizontal_ramp_up_time 0 1 58 420
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
////////////////////////////////////////////////////////////////////
69
inline float DriveInterface::get_horizontal_ramp_up_time(void) const;

320 29 set_horizontal_ramp_down_time 0 4 518 45 DriveInterface::set_horizontal_ramp_down_time 0 1 59 416
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
////////////////////////////////////////////////////////////////////
80
inline void DriveInterface::set_horizontal_ramp_down_time(float ramp_down_time);

321 29 get_horizontal_ramp_down_time 0 4 518 45 DriveInterface::get_horizontal_ramp_down_time 0 1 60 419
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
////////////////////////////////////////////////////////////////////
71
inline float DriveInterface::get_horizontal_ramp_down_time(void) const;

322 9 get_speed 0 4 518 25 DriveInterface::get_speed 0 1 61 278
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
51
inline float DriveInterface::get_speed(void) const;

323 13 get_rot_speed 0 4 518 29 DriveInterface::get_rot_speed 0 1 62 286
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
////////////////////////////////////////////////////////////////////
55
inline float DriveInterface::get_rot_speed(void) const;

324 5 reset 0 4 518 21 DriveInterface::reset 0 1 63 332
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
////////////////////////////////////////////////////////////////////
33
void DriveInterface::reset(void);

325 7 get_pos 0 4 518 23 DriveInterface::get_pos 0 1 64 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
////////////////////////////////////////////////////////////////////
59
inline LPoint3f const &DriveInterface::get_pos(void) const;

326 5 get_x 0 4 518 21 DriveInterface::get_x 0 1 65 0
47
inline float DriveInterface::get_x(void) const;

327 5 get_y 0 4 518 21 DriveInterface::get_y 0 1 66 0
47
inline float DriveInterface::get_y(void) const;

328 5 get_z 0 4 518 21 DriveInterface::get_z 0 1 67 0
47
inline float DriveInterface::get_z(void) const;

329 7 set_pos 0 4 518 23 DriveInterface::set_pos 0 2 68 69 259
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
////////////////////////////////////////////////////////////////////
123
inline void DriveInterface::set_pos(LVecBase3f const &vec);
inline void DriveInterface::set_pos(float x, float y, float z);

330 5 set_x 0 4 518 21 DriveInterface::set_x 0 1 70 0
43
inline void DriveInterface::set_x(float x);

331 5 set_y 0 4 518 21 DriveInterface::set_y 0 1 71 0
43
inline void DriveInterface::set_y(float y);

332 5 set_z 0 4 518 21 DriveInterface::set_z 0 1 72 0
43
inline void DriveInterface::set_z(float z);

333 7 get_hpr 0 4 518 23 DriveInterface::get_hpr 0 1 73 256
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
////////////////////////////////////////////////////////////////////
61
inline LVecBase3f const &DriveInterface::get_hpr(void) const;

334 5 get_h 0 4 518 21 DriveInterface::get_h 0 1 74 0
47
inline float DriveInterface::get_h(void) const;

335 5 get_p 0 4 518 21 DriveInterface::get_p 0 1 75 0
47
inline float DriveInterface::get_p(void) const;

336 5 get_r 0 4 518 21 DriveInterface::get_r 0 1 76 0
47
inline float DriveInterface::get_r(void) const;

337 7 set_hpr 0 4 518 23 DriveInterface::set_hpr 0 2 77 78 262
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
////////////////////////////////////////////////////////////////////
123
inline void DriveInterface::set_hpr(LVecBase3f const &hpr);
inline void DriveInterface::set_hpr(float h, float p, float r);

338 5 set_h 0 4 518 21 DriveInterface::set_h 0 1 79 0
43
inline void DriveInterface::set_h(float h);

339 5 set_p 0 4 518 21 DriveInterface::set_p 0 1 80 0
43
inline void DriveInterface::set_p(float p);

340 5 set_r 0 4 518 21 DriveInterface::set_r 0 1 81 0
43
inline void DriveInterface::set_r(float r);

341 14 set_force_roll 0 4 518 30 DriveInterface::set_force_roll 0 1 82 322
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
////////////////////////////////////////////////////////////////////
54
void DriveInterface::set_force_roll(float force_roll);

342 16 set_ignore_mouse 0 4 518 32 DriveInterface::set_ignore_mouse 0 1 83 736
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
////////////////////////////////////////////////////////////////////
64
inline void DriveInterface::set_ignore_mouse(bool ignore_mouse);

343 16 get_ignore_mouse 0 4 518 32 DriveInterface::get_ignore_mouse 0 1 84 326
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
////////////////////////////////////////////////////////////////////
57
inline bool DriveInterface::get_ignore_mouse(void) const;

344 15 set_force_mouse 0 4 518 31 DriveInterface::set_force_mouse 0 1 85 406
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
////////////////////////////////////////////////////////////////////
62
inline void DriveInterface::set_force_mouse(bool force_mouse);

345 15 get_force_mouse 0 4 518 31 DriveInterface::get_force_mouse 0 1 86 323
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
////////////////////////////////////////////////////////////////////
56
inline bool DriveInterface::get_force_mouse(void) const;

346 19 set_stop_this_frame 0 4 518 35 DriveInterface::set_stop_this_frame 0 1 87 649
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
////////////////////////////////////////////////////////////////////
70
inline void DriveInterface::set_stop_this_frame(bool stop_this_frame);

347 19 get_stop_this_frame 0 4 518 35 DriveInterface::get_stop_this_frame 0 1 88 336
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
////////////////////////////////////////////////////////////////////
60
inline bool DriveInterface::get_stop_this_frame(void) const;

348 7 set_mat 0 4 518 23 DriveInterface::set_mat 0 1 89 276
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
////////////////////////////////////////////////////////////////////
51
void DriveInterface::set_mat(LMatrix4f const &mat);

349 7 get_mat 0 4 518 23 DriveInterface::get_mat 0 1 90 253
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
////////////////////////////////////////////////////////////////////
47
LMatrix4f const &DriveInterface::get_mat(void);

350 12 force_dgraph 0 4 518 28 DriveInterface::force_dgraph 0 1 91 558
////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
////////////////////////////////////////////////////////////////////
40
void DriveInterface::force_dgraph(void);

351 14 get_class_type 0 4 518 30 DriveInterface::get_class_type 0 1 92 0
55
static TypeHandle DriveInterface::get_class_type(void);

352 14 MouseSubregion 0 4 519 30 MouseSubregion::MouseSubregion 0 1 93 223
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
65
MouseSubregion::MouseSubregion(basic_string< char > const &name);

353 8 get_left 0 4 519 24 MouseSubregion::get_left 0 1 94 379
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
50
inline float MouseSubregion::get_left(void) const;

354 9 get_right 0 4 519 25 MouseSubregion::get_right 0 1 95 381
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
51
inline float MouseSubregion::get_right(void) const;

355 10 get_bottom 0 4 519 26 MouseSubregion::get_bottom 0 1 96 384
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
////////////////////////////////////////////////////////////////////
52
inline float MouseSubregion::get_bottom(void) const;

356 7 get_top 0 4 519 23 MouseSubregion::get_top 0 1 97 377
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
////////////////////////////////////////////////////////////////////
49
inline float MouseSubregion::get_top(void) const;

357 14 set_dimensions 0 4 519 30 MouseSubregion::set_dimensions 0 1 98 583
////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
////////////////////////////////////////////////////////////////////
79
inline void MouseSubregion::set_dimensions(float l, float r, float b, float t);

358 14 get_class_type 0 4 519 30 MouseSubregion::get_class_type 0 1 99 0
55
static TypeHandle MouseSubregion::get_class_type(void);

359 37 upcast_to_TypedWritableReferenceCount 0 12 520 57 MouseWatcherRegion::upcast_to_TypedWritableReferenceCount 0 1 118 61
upcast from MouseWatcherRegion to TypedWritableReferenceCount
93
TypedWritableReferenceCount *MouseWatcherRegion::upcast_to_TypedWritableReferenceCount(void);

360 30 downcast_to_MouseWatcherRegion 0 12 521 59 TypedWritableReferenceCount::downcast_to_MouseWatcherRegion 0 1 119 63
downcast from TypedWritableReferenceCount to MouseWatcherRegion
86
MouseWatcherRegion *TypedWritableReferenceCount::downcast_to_MouseWatcherRegion(void);

361 17 upcast_to_Namable 0 12 520 37 MouseWatcherRegion::upcast_to_Namable 0 1 120 41
upcast from MouseWatcherRegion to Namable
53
Namable *MouseWatcherRegion::upcast_to_Namable(void);

362 30 downcast_to_MouseWatcherRegion 0 12 522 39 Namable::downcast_to_MouseWatcherRegion 0 1 121 43
downcast from Namable to MouseWatcherRegion
66
MouseWatcherRegion *Namable::downcast_to_MouseWatcherRegion(void);

363 18 MouseWatcherRegion 0 4 520 38 MouseWatcherRegion::MouseWatcherRegion 0 2 100 101 462
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
236
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, float left, float right, float bottom, float top);
inline MouseWatcherRegion::MouseWatcherRegion(basic_string< char > const &name, LVecBase4f const &frame);

364 9 set_frame 0 4 520 29 MouseWatcherRegion::set_frame 0 2 102 103 458
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
160
inline void MouseWatcherRegion::set_frame(float left, float right, float bottom, float top);
inline void MouseWatcherRegion::set_frame(LVecBase4f const &frame);

365 9 get_frame 0 4 520 29 MouseWatcherRegion::get_frame 0 1 104 228
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase4f const &MouseWatcherRegion::get_frame(void) const;

366 8 get_area 0 4 520 28 MouseWatcherRegion::get_area 0 1 105 271
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
////////////////////////////////////////////////////////////////////
54
inline float MouseWatcherRegion::get_area(void) const;

367 8 set_sort 0 4 520 28 MouseWatcherRegion::set_sort 0 1 106 672
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
////////////////////////////////////////////////////////////////////
51
inline void MouseWatcherRegion::set_sort(int sort);

368 8 get_sort 0 4 520 28 MouseWatcherRegion::get_sort 0 1 107 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
////////////////////////////////////////////////////////////////////
52
inline int MouseWatcherRegion::get_sort(void) const;

369 10 set_active 0 4 520 30 MouseWatcherRegion::set_active 0 1 108 515
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcherRegion::set_active(bool active);

370 10 get_active 0 4 520 30 MouseWatcherRegion::get_active 0 1 109 310
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
////////////////////////////////////////////////////////////////////
55
inline bool MouseWatcherRegion::get_active(void) const;

371 12 set_keyboard 0 4 520 32 MouseWatcherRegion::set_keyboard 0 1 110 598
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
////////////////////////////////////////////////////////////////////
60
inline void MouseWatcherRegion::set_keyboard(bool keyboard);

372 12 get_keyboard 0 4 520 32 MouseWatcherRegion::get_keyboard 0 1 111 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherRegion::get_keyboard(void) const;

373 18 set_suppress_flags 0 4 520 38 MouseWatcherRegion::set_suppress_flags 0 1 112 725
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
////////////////////////////////////////////////////////////////////
71
inline void MouseWatcherRegion::set_suppress_flags(int suppress_flags);

374 18 get_suppress_flags 0 4 520 38 MouseWatcherRegion::get_suppress_flags 0 1 113 317
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
////////////////////////////////////////////////////////////////////
62
inline int MouseWatcherRegion::get_suppress_flags(void) const;

375 6 output 0 4 520 26 MouseWatcherRegion::output 0 1 114 225
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
void MouseWatcherRegion::output(ostream &out) const;

376 5 write 0 4 520 25 MouseWatcherRegion::write 0 2 115 116 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
void MouseWatcherRegion::write(ostream &out, int indent_level = (0)) const;

377 14 get_class_type 0 4 520 34 MouseWatcherRegion::get_class_type 0 1 117 0
59
static TypeHandle MouseWatcherRegion::get_class_type(void);

378 19 ~MouseWatcherRegion 0 4 520 39 MouseWatcherRegion::~MouseWatcherRegion 0 0 0
46
MouseWatcherRegion::~MouseWatcherRegion(void);

379 17 ~MouseWatcherBase 0 6 524 35 MouseWatcherBase::~MouseWatcherBase 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
50
virtual MouseWatcherBase::~MouseWatcherBase(void);

380 10 add_region 0 4 524 28 MouseWatcherBase::add_region 0 1 122 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
////////////////////////////////////////////////////////////////////
62
void MouseWatcherBase::add_region(MouseWatcherRegion *region);

381 10 has_region 0 4 524 28 MouseWatcherBase::has_region 0 1 123 346
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherBase, false otherwise.
////////////////////////////////////////////////////////////////////
68
bool MouseWatcherBase::has_region(MouseWatcherRegion *region) const;

382 13 remove_region 0 4 524 31 MouseWatcherBase::remove_region 0 1 124 402
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
65
bool MouseWatcherBase::remove_region(MouseWatcherRegion *region);

383 11 find_region 0 4 524 29 MouseWatcherBase::find_region 0 1 125 416
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
////////////////////////////////////////////////////////////////////
90
MouseWatcherRegion *MouseWatcherBase::find_region(basic_string< char > const &name) const;

384 13 clear_regions 0 4 524 31 MouseWatcherBase::clear_regions 0 1 126 270
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
////////////////////////////////////////////////////////////////////
43
void MouseWatcherBase::clear_regions(void);

385 12 sort_regions 0 4 524 30 MouseWatcherBase::sort_regions 0 1 127 302
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
////////////////////////////////////////////////////////////////////
42
void MouseWatcherBase::sort_regions(void);

386 9 is_sorted 0 4 524 27 MouseWatcherBase::is_sorted 0 1 128 311
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
////////////////////////////////////////////////////////////////////
45
bool MouseWatcherBase::is_sorted(void) const;

387 15 get_num_regions 0 4 524 33 MouseWatcherBase::get_num_regions 0 1 129 276
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
////////////////////////////////////////////////////////////////////
50
int MouseWatcherBase::get_num_regions(void) const;

388 10 get_region 0 4 524 28 MouseWatcherBase::get_region 0 1 130 471
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
////////////////////////////////////////////////////////////////////
62
MouseWatcherRegion *MouseWatcherBase::get_region(int n) const;

389 6 output 0 4 524 24 MouseWatcherBase::output 0 1 131 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
50
void MouseWatcherBase::output(ostream &out) const;

390 5 write 0 4 524 23 MouseWatcherBase::write 0 2 132 133 222
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
void MouseWatcherBase::write(ostream &out, int indent_level = (0)) const;

391 12 show_regions 0 4 524 30 MouseWatcherBase::show_regions 0 1 134 443
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherBase.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
////////////////////////////////////////////////////////////////////
116
void MouseWatcherBase::show_regions(NodePath const &render2d, basic_string< char > const &bin_name, int draw_order);

392 9 set_color 0 4 524 27 MouseWatcherBase::set_color 0 1 135 361
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
////////////////////////////////////////////////////////////////////
58
void MouseWatcherBase::set_color(LVecBase4f const &color);

393 12 hide_regions 0 4 524 30 MouseWatcherBase::hide_regions 0 1 136 316
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
////////////////////////////////////////////////////////////////////
42
void MouseWatcherBase::hide_regions(void);

394 14 update_regions 0 4 524 32 MouseWatcherBase::update_regions 0 1 137 303
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
////////////////////////////////////////////////////////////////////
44
void MouseWatcherBase::update_regions(void);

395 14 get_class_type 0 4 524 32 MouseWatcherBase::get_class_type 0 1 138 0
57
static TypeHandle MouseWatcherBase::get_class_type(void);

396 18 upcast_to_DataNode 0 12 525 32 MouseWatcher::upcast_to_DataNode 0 1 202 36
upcast from MouseWatcher to DataNode
49
DataNode *MouseWatcher::upcast_to_DataNode(void);

397 24 downcast_to_MouseWatcher 0 12 516 34 DataNode::downcast_to_MouseWatcher 0 1 203 38
downcast from DataNode to MouseWatcher
55
MouseWatcher *DataNode::downcast_to_MouseWatcher(void);

398 26 upcast_to_MouseWatcherBase 0 12 525 40 MouseWatcher::upcast_to_MouseWatcherBase 0 1 204 44
upcast from MouseWatcher to MouseWatcherBase
65
MouseWatcherBase *MouseWatcher::upcast_to_MouseWatcherBase(void);

399 24 downcast_to_MouseWatcher 0 12 524 42 MouseWatcherBase::downcast_to_MouseWatcher 0 1 205 46
downcast from MouseWatcherBase to MouseWatcher
63
MouseWatcher *MouseWatcherBase::downcast_to_MouseWatcher(void);

400 12 MouseWatcher 0 4 525 26 MouseWatcher::MouseWatcher 0 2 139 140 224
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
MouseWatcher::MouseWatcher(basic_string< char > const &name = (""));

401 13 ~MouseWatcher 0 6 525 27 MouseWatcher::~MouseWatcher 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
virtual MouseWatcher::~MouseWatcher(void);

402 13 remove_region 0 4 525 27 MouseWatcher::remove_region 0 1 141 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
////////////////////////////////////////////////////////////////////
61
bool MouseWatcher::remove_region(MouseWatcherRegion *region);

403 9 has_mouse 0 4 525 23 MouseWatcher::has_mouse 0 1 142 340
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
////////////////////////////////////////////////////////////////////
48
inline bool MouseWatcher::has_mouse(void) const;

404 13 is_mouse_open 0 4 525 27 MouseWatcher::is_mouse_open 0 1 143 473
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
////////////////////////////////////////////////////////////////////
52
inline bool MouseWatcher::is_mouse_open(void) const;

405 9 get_mouse 0 4 525 23 MouseWatcher::get_mouse 0 1 144 389
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
59
inline LPoint2f const &MouseWatcher::get_mouse(void) const;

406 11 get_mouse_x 0 4 525 25 MouseWatcher::get_mouse_x 0 1 145 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_x(void) const;

407 11 get_mouse_y 0 4 525 25 MouseWatcher::get_mouse_y 0 1 146 393
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
////////////////////////////////////////////////////////////////////
51
inline float MouseWatcher::get_mouse_y(void) const;

408 9 set_frame 0 4 525 23 MouseWatcher::set_frame 0 2 147 148 1273
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
////////////////////////////////////////////////////////////////////
148
inline void MouseWatcher::set_frame(float left, float right, float bottom, float top);
inline void MouseWatcher::set_frame(LVecBase4f const &frame);

409 9 get_frame 0 4 525 23 MouseWatcher::get_frame 0 1 149 296
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
////////////////////////////////////////////////////////////////////
61
inline LVecBase4f const &MouseWatcher::get_frame(void) const;

410 14 is_over_region 0 4 525 28 MouseWatcher::is_over_region 0 3 150 151 152 961
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
////////////////////////////////////////////////////////////////////
188
inline bool MouseWatcher::is_over_region(void) const;
inline bool MouseWatcher::is_over_region(float x, float y) const;
inline bool MouseWatcher::is_over_region(LPoint2f const &pos) const;

411 15 get_over_region 0 4 525 29 MouseWatcher::get_over_region 0 3 153 154 155 1187
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
////////////////////////////////////////////////////////////////////
229
inline MouseWatcherRegion *MouseWatcher::get_over_region(void) const;
inline MouseWatcherRegion *MouseWatcher::get_over_region(float x, float y) const;
MouseWatcherRegion *MouseWatcher::get_over_region(LPoint2f const &pos) const;

412 14 is_button_down 0 4 525 28 MouseWatcher::is_button_down 0 1 156 328
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
////////////////////////////////////////////////////////////////////
68
inline bool MouseWatcher::is_button_down(ButtonHandle button) const;

413 23 set_button_down_pattern 0 4 525 37 MouseWatcher::set_button_down_pattern 0 1 157 762
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
87
inline void MouseWatcher::set_button_down_pattern(basic_string< char > const &pattern);

414 23 get_button_down_pattern 0 4 525 37 MouseWatcher::get_button_down_pattern 0 1 158 394
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline basic_string< char > const &MouseWatcher::get_button_down_pattern(void) const;

415 21 set_button_up_pattern 0 4 525 35 MouseWatcher::set_button_up_pattern 0 1 159 400
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
85
inline void MouseWatcher::set_button_up_pattern(basic_string< char > const &pattern);

416 21 get_button_up_pattern 0 4 525 35 MouseWatcher::get_button_up_pattern 0 1 160 391
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
////////////////////////////////////////////////////////////////////
83
inline basic_string< char > const &MouseWatcher::get_button_up_pattern(void) const;

417 25 set_button_repeat_pattern 0 4 525 39 MouseWatcher::set_button_repeat_pattern 0 1 161 827
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
////////////////////////////////////////////////////////////////////
89
inline void MouseWatcher::set_button_repeat_pattern(basic_string< char > const &pattern);

418 25 get_button_repeat_pattern 0 4 525 39 MouseWatcher::get_button_repeat_pattern 0 1 162 471
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
////////////////////////////////////////////////////////////////////
87
inline basic_string< char > const &MouseWatcher::get_button_repeat_pattern(void) const;

419 17 set_enter_pattern 0 4 525 31 MouseWatcher::set_enter_pattern 0 1 163 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_enter_pattern(basic_string< char > const &pattern);

420 17 get_enter_pattern 0 4 525 31 MouseWatcher::get_enter_pattern 0 1 164 559
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_enter_pattern(void) const;

421 17 set_leave_pattern 0 4 525 31 MouseWatcher::set_leave_pattern 0 1 165 585
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
81
inline void MouseWatcher::set_leave_pattern(basic_string< char > const &pattern);

422 17 get_leave_pattern 0 4 525 31 MouseWatcher::get_leave_pattern 0 1 166 560
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
79
inline basic_string< char > const &MouseWatcher::get_leave_pattern(void) const;

423 18 set_within_pattern 0 4 525 32 MouseWatcher::set_within_pattern 0 1 167 591
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
82
inline void MouseWatcher::set_within_pattern(basic_string< char > const &pattern);

424 18 get_within_pattern 0 4 525 32 MouseWatcher::get_within_pattern 0 1 168 565
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
////////////////////////////////////////////////////////////////////
80
inline basic_string< char > const &MouseWatcher::get_within_pattern(void) const;

425 19 set_without_pattern 0 4 525 33 MouseWatcher::set_without_pattern 0 1 169 594
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
////////////////////////////////////////////////////////////////////
83
inline void MouseWatcher::set_without_pattern(basic_string< char > const &pattern);

426 19 get_without_pattern 0 4 525 33 MouseWatcher::get_without_pattern 0 1 170 584
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
////////////////////////////////////////////////////////////////////
81
inline basic_string< char > const &MouseWatcher::get_without_pattern(void) const;

427 12 set_geometry 0 4 525 26 MouseWatcher::set_geometry 0 1 171 553
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
////////////////////////////////////////////////////////////////////
56
inline void MouseWatcher::set_geometry(PandaNode *node);

428 12 has_geometry 0 4 525 26 MouseWatcher::has_geometry 0 1 172 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
////////////////////////////////////////////////////////////////////
51
inline bool MouseWatcher::has_geometry(void) const;

429 12 get_geometry 0 4 525 26 MouseWatcher::get_geometry 0 1 173 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
////////////////////////////////////////////////////////////////////
57
inline PandaNode *MouseWatcher::get_geometry(void) const;

430 14 clear_geometry 0 4 525 28 MouseWatcher::clear_geometry 0 1 174 308
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
////////////////////////////////////////////////////////////////////
47
inline void MouseWatcher::clear_geometry(void);

431 17 set_extra_handler 0 4 525 31 MouseWatcher::set_extra_handler 0 1 175 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
62
inline void MouseWatcher::set_extra_handler(EventHandler *eh);

432 17 get_extra_handler 0 4 525 31 MouseWatcher::get_extra_handler 0 1 176 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
////////////////////////////////////////////////////////////////////
65
inline EventHandler *MouseWatcher::get_extra_handler(void) const;

433 20 set_modifier_buttons 0 4 525 34 MouseWatcher::set_modifier_buttons 0 1 177 376
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
////////////////////////////////////////////////////////////////////
76
inline void MouseWatcher::set_modifier_buttons(ModifierButtons const &mods);

434 20 get_modifier_buttons 0 4 525 34 MouseWatcher::get_modifier_buttons 0 1 178 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
////////////////////////////////////////////////////////////////////
70
inline ModifierButtons MouseWatcher::get_modifier_buttons(void) const;

435 18 set_display_region 0 4 525 32 MouseWatcher::set_display_region 0 1 179 743
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
////////////////////////////////////////////////////////////////////
64
inline void MouseWatcher::set_display_region(DisplayRegion *dr);

436 20 clear_display_region 0 4 525 34 MouseWatcher::clear_display_region 0 1 180 398
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
////////////////////////////////////////////////////////////////////
53
inline void MouseWatcher::clear_display_region(void);

437 18 get_display_region 0 4 525 32 MouseWatcher::get_display_region 0 1 181 386
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
////////////////////////////////////////////////////////////////////
67
inline DisplayRegion *MouseWatcher::get_display_region(void) const;

438 18 has_display_region 0 4 525 32 MouseWatcher::has_display_region 0 1 182 525
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcher::has_display_region(void) const;

439 9 add_group 0 4 525 23 MouseWatcher::add_group 0 1 183 840
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherBase, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
////////////////////////////////////////////////////////////////////
55
bool MouseWatcher::add_group(MouseWatcherGroup *group);

440 12 remove_group 0 4 525 26 MouseWatcher::remove_group 0 1 184 474
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
////////////////////////////////////////////////////////////////////
58
bool MouseWatcher::remove_group(MouseWatcherGroup *group);

441 13 replace_group 0 4 525 27 MouseWatcher::replace_group 0 1 185 665
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
////////////////////////////////////////////////////////////////////
93
bool MouseWatcher::replace_group(MouseWatcherGroup *old_group, MouseWatcherGroup *new_group);

442 14 get_num_groups 0 4 525 28 MouseWatcher::get_num_groups 0 1 186 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
////////////////////////////////////////////////////////////////////
45
int MouseWatcher::get_num_groups(void) const;

443 9 get_group 0 4 525 23 MouseWatcher::get_group 0 1 187 304
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
////////////////////////////////////////////////////////////////////
56
MouseWatcherGroup *MouseWatcher::get_group(int n) const;

444 22 set_inactivity_timeout 0 4 525 36 MouseWatcher::set_inactivity_timeout 0 1 188 822
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
////////////////////////////////////////////////////////////////////
65
inline void MouseWatcher::set_inactivity_timeout(double timeout);

445 22 has_inactivity_timeout 0 4 525 36 MouseWatcher::has_inactivity_timeout 0 1 189 321
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcher::has_inactivity_timeout(void) const;

446 22 get_inactivity_timeout 0 4 525 36 MouseWatcher::get_inactivity_timeout 0 1 190 390
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
////////////////////////////////////////////////////////////////////
63
inline double MouseWatcher::get_inactivity_timeout(void) const;

447 24 clear_inactivity_timeout 0 4 525 38 MouseWatcher::clear_inactivity_timeout 0 1 191 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
////////////////////////////////////////////////////////////////////
57
inline void MouseWatcher::clear_inactivity_timeout(void);

448 28 set_inactivity_timeout_event 0 4 525 42 MouseWatcher::set_inactivity_timeout_event 0 1 192 401
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
90
inline void MouseWatcher::set_inactivity_timeout_event(basic_string< char > const &event);

449 28 get_inactivity_timeout_event 0 4 525 42 MouseWatcher::get_inactivity_timeout_event 0 1 193 399
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
////////////////////////////////////////////////////////////////////
90
inline basic_string< char > const &MouseWatcher::get_inactivity_timeout_event(void) const;

450 13 get_trail_log 0 4 525 27 MouseWatcher::get_trail_log 0 1 194 713
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////
82
inline ConstPointerTo< PointerEventList > MouseWatcher::get_trail_log(void) const;

451 16 num_trail_recent 0 4 525 30 MouseWatcher::num_trail_recent 0 1 195 440
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
////////////////////////////////////////////////////////////////////
54
inline int MouseWatcher::num_trail_recent(void) const;

452 22 set_trail_log_duration 0 4 525 36 MouseWatcher::set_trail_log_duration 0 1 196 468
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
////////////////////////////////////////////////////////////////////
59
void MouseWatcher::set_trail_log_duration(double duration);

453 14 get_trail_node 0 4 525 28 MouseWatcher::get_trail_node 0 1 197 999
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
////////////////////////////////////////////////////////////////////
57
PointerTo< GeomNode > MouseWatcher::get_trail_node(void);

454 16 clear_trail_node 0 4 525 30 MouseWatcher::clear_trail_node 0 1 198 533
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
////////////////////////////////////////////////////////////////////
42
void MouseWatcher::clear_trail_node(void);

455 15 clear_trail_log 0 4 525 29 MouseWatcher::clear_trail_log 0 1 199 349
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
////////////////////////////////////////////////////////////////////
48
inline void MouseWatcher::clear_trail_log(void);

456 13 note_activity 0 4 525 27 MouseWatcher::note_activity 0 1 200 951
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
////////////////////////////////////////////////////////////////////
39
void MouseWatcher::note_activity(void);

457 14 get_class_type 0 4 525 28 MouseWatcher::get_class_type 0 1 201 0
53
static TypeHandle MouseWatcher::get_class_type(void);

458 22 ~MouseWatcherParameter 0 4 526 45 MouseWatcherParameter::~MouseWatcherParameter 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::Destructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline MouseWatcherParameter::~MouseWatcherParameter(void);

459 10 has_button 0 4 526 33 MouseWatcherParameter::has_button 0 1 206 341
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::has_button(void) const;

460 10 get_button 0 4 526 33 MouseWatcherParameter::get_button 0 1 207 406
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
////////////////////////////////////////////////////////////////////
66
inline ButtonHandle MouseWatcherParameter::get_button(void) const;

461 12 is_keyrepeat 0 4 526 35 MouseWatcherParameter::is_keyrepeat 0 1 208 381
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
////////////////////////////////////////////////////////////////////
60
inline bool MouseWatcherParameter::is_keyrepeat(void) const;

462 11 has_keycode 0 4 526 34 MouseWatcherParameter::has_keycode 0 1 209 325
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool MouseWatcherParameter::has_keycode(void) const;

463 11 get_keycode 0 4 526 34 MouseWatcherParameter::get_keycode 0 1 210 355
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
////////////////////////////////////////////////////////////////////
58
inline int MouseWatcherParameter::get_keycode(void) const;

464 13 has_candidate 0 4 526 36 MouseWatcherParameter::has_candidate 0 1 211 336
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline bool MouseWatcherParameter::has_candidate(void) const;

465 28 get_candidate_string_encoded 0 4 526 51 MouseWatcherParameter::get_candidate_string_encoded 0 2 212 213 832
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
////////////////////////////////////////////////////////////////////
211
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(void) const;
inline basic_string< char > MouseWatcherParameter::get_candidate_string_encoded(TextEncoder::Encoding encoding) const;

466 19 get_highlight_start 0 4 526 42 MouseWatcherParameter::get_highlight_start 0 1 214 323
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
////////////////////////////////////////////////////////////////////
75
inline unsigned int MouseWatcherParameter::get_highlight_start(void) const;

467 17 get_highlight_end 0 4 526 40 MouseWatcherParameter::get_highlight_end 0 1 215 334
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
////////////////////////////////////////////////////////////////////
73
inline unsigned int MouseWatcherParameter::get_highlight_end(void) const;

468 14 get_cursor_pos 0 4 526 37 MouseWatcherParameter::get_cursor_pos 0 1 216 329
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
////////////////////////////////////////////////////////////////////
70
inline unsigned int MouseWatcherParameter::get_cursor_pos(void) const;

469 20 get_modifier_buttons 0 4 526 43 MouseWatcherParameter::get_modifier_buttons 0 1 217 352
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
////////////////////////////////////////////////////////////////////
86
inline ModifierButtons const &MouseWatcherParameter::get_modifier_buttons(void) const;

470 9 has_mouse 0 4 526 32 MouseWatcherParameter::has_mouse 0 1 218 330
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool MouseWatcherParameter::has_mouse(void) const;

471 9 get_mouse 0 4 526 32 MouseWatcherParameter::get_mouse 0 1 219 425
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
////////////////////////////////////////////////////////////////////
68
inline LPoint2f const &MouseWatcherParameter::get_mouse(void) const;

472 10 is_outside 0 4 526 33 MouseWatcherParameter::is_outside 0 1 220 415
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
////////////////////////////////////////////////////////////////////
58
inline bool MouseWatcherParameter::is_outside(void) const;

473 6 output 0 4 526 29 MouseWatcherParameter::output 0 1 221 229
////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
void MouseWatcherParameter::output(ostream &out) const;

474 9 Trackball 0 4 527 20 Trackball::Trackball 0 1 222 218
////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
Trackball::Trackball(basic_string< char > const &name);

475 5 reset 0 4 527 16 Trackball::reset 0 1 223 257
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
////////////////////////////////////////////////////////////////////
28
void Trackball::reset(void);

476 17 get_forward_scale 0 4 527 28 Trackball::get_forward_scale 0 1 224 335
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
////////////////////////////////////////////////////////////////////
47
float Trackball::get_forward_scale(void) const;

477 17 set_forward_scale 0 4 527 28 Trackball::set_forward_scale 0 1 225 435
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
////////////////////////////////////////////////////////////////////
50
void Trackball::set_forward_scale(float fwdscale);

478 7 get_pos 0 4 527 18 Trackball::get_pos 0 1 226 264
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
////////////////////////////////////////////////////////////////////
47
LPoint3f const &Trackball::get_pos(void) const;

479 5 get_x 0 4 527 16 Trackball::get_x 0 1 227 0
35
float Trackball::get_x(void) const;

480 5 get_y 0 4 527 16 Trackball::get_y 0 1 228 0
35
float Trackball::get_y(void) const;

481 5 get_z 0 4 527 16 Trackball::get_z 0 1 229 0
35
float Trackball::get_z(void) const;

482 7 set_pos 0 4 527 18 Trackball::set_pos 0 2 230 231 269
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
////////////////////////////////////////////////////////////////////
99
void Trackball::set_pos(LVecBase3f const &vec);
void Trackball::set_pos(float x, float y, float z);

483 5 set_x 0 4 527 16 Trackball::set_x 0 1 232 0
31
void Trackball::set_x(float x);

484 5 set_y 0 4 527 16 Trackball::set_y 0 1 233 0
31
void Trackball::set_y(float y);

485 5 set_z 0 4 527 16 Trackball::set_z 0 1 234 0
31
void Trackball::set_z(float z);

486 7 get_hpr 0 4 527 18 Trackball::get_hpr 0 1 235 253
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
////////////////////////////////////////////////////////////////////
42
LVecBase3f Trackball::get_hpr(void) const;

487 5 get_h 0 4 527 16 Trackball::get_h 0 1 236 0
35
float Trackball::get_h(void) const;

488 5 get_p 0 4 527 16 Trackball::get_p 0 1 237 0
35
float Trackball::get_p(void) const;

489 5 get_r 0 4 527 16 Trackball::get_r 0 1 238 0
35
float Trackball::get_r(void) const;

490 7 set_hpr 0 4 527 18 Trackball::set_hpr 0 2 239 240 255
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
////////////////////////////////////////////////////////////////////
99
void Trackball::set_hpr(LVecBase3f const &hpr);
void Trackball::set_hpr(float h, float p, float r);

491 5 set_h 0 4 527 16 Trackball::set_h 0 1 241 0
31
void Trackball::set_h(float h);

492 5 set_p 0 4 527 16 Trackball::set_p 0 1 242 0
31
void Trackball::set_p(float p);

493 5 set_r 0 4 527 16 Trackball::set_r 0 1 243 0
31
void Trackball::set_r(float r);

494 17 reset_origin_here 0 4 527 28 Trackball::reset_origin_here 0 1 244 396
////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
////////////////////////////////////////////////////////////////////
40
void Trackball::reset_origin_here(void);

495 11 move_origin 0 4 527 22 Trackball::move_origin 0 1 245 271
////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
////////////////////////////////////////////////////////////////////
55
void Trackball::move_origin(float x, float y, float z);

496 10 get_origin 0 4 527 21 Trackball::get_origin 0 1 246 260
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
////////////////////////////////////////////////////////////////////
43
LPoint3f Trackball::get_origin(void) const;

497 10 set_origin 0 4 527 21 Trackball::set_origin 0 1 247 258
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
////////////////////////////////////////////////////////////////////
53
void Trackball::set_origin(LVecBase3f const &origin);

498 16 set_control_mode 0 4 527 27 Trackball::set_control_mode 0 1 248 654
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_control_mode
//       Access: Published
//  Description: Sets the control mode.  Normally this is CM_default,
//               which means each mouse button serves its normal
//               function.  When it is CM_truck, CM_pan, CM_dolly, or
//               CM_roll, all of the mouse buttons serve the indicated
//               function instead of their normal function.  This can
//               be used in conjunction with some external way of
//               changing modes.
////////////////////////////////////////////////////////////////////
70
void Trackball::set_control_mode(Trackball::ControlMode control_mode);

499 16 get_control_mode 0 4 527 27 Trackball::get_control_mode 0 1 249 277
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_control_mode
//       Access: Published
//  Description: Returns the control mode.  See set_control_mode().
////////////////////////////////////////////////////////////////////
63
Trackball::ControlMode Trackball::get_control_mode(void) const;

500 10 set_invert 0 4 527 21 Trackball::set_invert 0 1 250 403
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
38
void Trackball::set_invert(bool flag);

501 10 get_invert 0 4 527 21 Trackball::get_invert 0 1 251 406
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
////////////////////////////////////////////////////////////////////
39
bool Trackball::get_invert(void) const;

502 10 set_rel_to 0 4 527 21 Trackball::set_rel_to 0 1 252 561
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
////////////////////////////////////////////////////////////////////
51
void Trackball::set_rel_to(NodePath const &rel_to);

503 10 get_rel_to 0 4 527 21 Trackball::get_rel_to 0 1 253 327
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
////////////////////////////////////////////////////////////////////
50
NodePath const &Trackball::get_rel_to(void) const;

504 21 set_coordinate_system 0 4 527 32 Trackball::set_coordinate_system 0 1 254 524
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
////////////////////////////////////////////////////////////////////
59
void Trackball::set_coordinate_system(CoordinateSystem cs);

505 21 get_coordinate_system 0 4 527 32 Trackball::get_coordinate_system 0 1 255 325
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
////////////////////////////////////////////////////////////////////
62
CoordinateSystem Trackball::get_coordinate_system(void) const;

506 7 set_mat 0 4 527 18 Trackball::set_mat 0 1 256 368
////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
////////////////////////////////////////////////////////////////////
46
void Trackball::set_mat(LMatrix4f const &mat);

507 7 get_mat 0 4 527 18 Trackball::get_mat 0 1 257 292
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
////////////////////////////////////////////////////////////////////
48
LMatrix4f const &Trackball::get_mat(void) const;

508 13 get_trans_mat 0 4 527 24 Trackball::get_trans_mat 0 1 258 387
////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
////////////////////////////////////////////////////////////////////
54
LMatrix4f const &Trackball::get_trans_mat(void) const;

509 14 get_class_type 0 4 527 25 Trackball::get_class_type 0 1 259 0
50
static TypeHandle Trackball::get_class_type(void);

510 12 Transform2SG 0 4 529 26 Transform2SG::Transform2SG 0 1 260 221
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
Transform2SG::Transform2SG(basic_string< char > const &name);

511 8 set_node 0 4 529 22 Transform2SG::set_node 0 1 261 262
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
////////////////////////////////////////////////////////////////////
45
void Transform2SG::set_node(PandaNode *node);

512 8 get_node 0 4 529 22 Transform2SG::get_node 0 1 262 324
////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
////////////////////////////////////////////////////////////////////
46
PandaNode *Transform2SG::get_node(void) const;

513 14 get_class_type 0 4 529 28 Transform2SG::get_class_type 0 1 263 0
53
static TypeHandle Transform2SG::get_class_type(void);

514 13 ~Transform2SG 0 4 529 27 Transform2SG::~Transform2SG 0 0 0
34
Transform2SG::~Transform2SG(void);

263
1 14 Dtool_v_mBk4xy 0 7 3 531 0 14 Dtool_v_mBk4xy 222 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 530  
2 14 Dtool_v_mBgXgW 0 4 4 532 0 14 Dtool_v_mBgXgW 867 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_down_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is depressed.  Unlike
//               the specific events that are unique to each key, this
//               same event name is used for *all* button events, and
//               the name of the button pressed (possibly with
//               modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  17 button_down_event 1 530  
3 14 Dtool_v_mBarVA 0 6 5 530 0 14 Dtool_v_mBarVA 353 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_down_event
//       Access: Published
//  Description: Returns the button_down_event that has been set on
//               this ButtonThrower.  See set_button_down_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
4 14 Dtool_v_mBI2Hn 0 4 6 532 0 14 Dtool_v_mBI2Hn 391 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  15 button_up_event 1 530  
5 14 Dtool_v_mBz4X5 0 6 7 530 0 14 Dtool_v_mBz4X5 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_up_event
//       Access: Published
//  Description: Returns the button_up_event that has been set on
//               this ButtonThrower.  See set_button_up_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
6 14 Dtool_v_mBrSEu 0 4 8 532 0 14 Dtool_v_mBrSEu 875 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_button_repeat_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) repeatedly while a key or button is held down.
//               Unlike the specific events that are unique to each
//               key, this same event name is used for *all* button
//               events, and the name of the button pressed (possibly
//               with modifier prefixes) will be sent as a parameter.
//
//               If this string is empty, no event is generated.  It
//               is possible to generate both generic events and
//               specific events for the same button.
//
//               See also set_keystroke_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  19 button_repeat_event 1 530  
7 14 Dtool_v_mBzthZ 0 6 9 530 0 14 Dtool_v_mBzthZ 359 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_button_repeat_event
//       Access: Published
//  Description: Returns the button_repeat_event that has been set on
//               this ButtonThrower.  See set_button_repeat_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
8 14 Dtool_v_mB_Oot 0 4 10 532 0 14 Dtool_v_mB_Oot 1304 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_keystroke_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each keystroke that is received.  A keystroke is
//               different than a button event: it represents the
//               semantic meaning of the sequence of keys that have
//               been pressed.  For instance, pressing shift and 4
//               together will generate the button event "shift-4",
//               but it will generate the keystroke "$".
//
//               If a key is held down, keyrepeat will cause the same
//               keystroke event to be generated repeatedly.  This is
//               different from the corresponding down event, which
//               will only be generated once, followed by a number of
//               button repeat events.
//
//               This event is generated with a single wstring
//               parameter, which is a one-character string that
//               contains the keystroke generated.  If this event
//               string is empty, no event is generated.
//
//               See also set_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  15 keystroke_event 1 530  
9 14 Dtool_v_mB1s5_ 0 6 11 530 0 14 Dtool_v_mB1s5_ 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_keystroke_event
//       Access: Published
//  Description: Returns the keystroke_event that has been set on this
//               ButtonThrower.  See set_keystroke_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
10 14 Dtool_v_mBzQU_ 0 4 12 532 0 14 Dtool_v_mBzQU_ 1252 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_candidate_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) for
//               each IME candidate string event received.  Events of
//               this nature are received only when the user is
//               entering data using a Microsoft Input Method Editor,
//               typically used for Asian languages such as Japanese
//               or Korean.
//
//               If you are designing a typing user interface, you
//               should track this event to support the use of the
//               IME.  In response to this event, you should display
//               the candidate string in the entry box, with the
//               appropriate sections highlighted, so the user can
//               scroll through the available choices.
//
//               This event is generated with four parameters, in
//               order: the candidate string, the character at which
//               to start the highlight, the character at which to end
//               the highlight, and the current cursor position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  15 candidate_event 1 530  
11 14 Dtool_v_mBtajR 0 6 13 530 0 14 Dtool_v_mBtajR 347 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_candidate_event
//       Access: Published
//  Description: Returns the candidate_event that has been set on this
//               ButtonThrower.  See set_candidate_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
12 14 Dtool_v_mBn2SG 0 4 14 532 0 14 Dtool_v_mBn2SG 340 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_move_event
//       Access: Published
//  Description: Specifies the event that is generated (if any) each
//               time the mouse is moved within the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  10 move_event 1 530  
13 14 Dtool_v_mBsPhu 0 6 15 530 0 14 Dtool_v_mBsPhu 332 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_move_event
//       Access: Published
//  Description: Returns the move_event that has been set on this
//               ButtonThrower.  See set_move_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
14 14 Dtool_v_mBoF21 0 4 16 532 0 14 Dtool_v_mBoF21 465 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_down_event
//       Access: Published
//  Description: Like set_button_down_event, but uses the raw,
//               untransformed scan key from the operating system.
//               This uses buttons that are independent of the
//               user's selected keyboard layout.
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  21 raw_button_down_event 1 530  
15 14 Dtool_v_mBE6x2 0 6 17 530 0 14 Dtool_v_mBE6x2 365 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_down_event
//       Access: Published
//  Description: Returns the raw_button_down_event that has been set on
//               this ButtonThrower.  See set_raw_button_down_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
16 14 Dtool_v_mBjv6O 0 4 18 532 0 14 Dtool_v_mBjv6O 399 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_raw_button_up_event
//       Access: Published
//  Description: Specifies the generic event that is generated (if
//               any) each time a key or button is released.  See
//               set_raw_button_down_event().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  19 raw_button_up_event 1 530  
17 14 Dtool_v_mB7cX6 0 6 19 530 0 14 Dtool_v_mB7cX6 359 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_raw_button_up_event
//       Access: Published
//  Description: Returns the raw_button_up_event that has been set on
//               this ButtonThrower.  See set_raw_button_up_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
18 14 Dtool_v_mB8tb8 0 4 20 532 0 14 Dtool_v_mB8tb8 505 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_prefix
//       Access: Published
//  Description: Sets the prefix which is prepended to all specific
//               event names (that is, event names generated from the
//               button name itself, as opposed to the generic event
//               names like set_button_down_event) thrown by this
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  6 prefix 1 530  
19 14 Dtool_v_mB3m_a 0 6 21 530 0 14 Dtool_v_mB3m_a 320 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_prefix
//       Access: Published
//  Description: Returns the prefix that has been set on this
//               ButtonThrower.  See set_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
20 14 Dtool_v_mBmYQj 0 4 22 532 0 14 Dtool_v_mBmYQj 604 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_specific_flag
//       Access: Published
//  Description: Sets the flag that indicates whether specific events
//               (events prefixed by set_prefix, and based on the
//               event name) should be generated at all.  This is true
//               by default, but may be disabled if you are only
//               interested in the generic events (for instance,
//               events like set_button_down_event).
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  13 specific_flag 1 535  
21 14 Dtool_v_mBpjBE 0 6 23 535 0 14 Dtool_v_mBpjBE 351 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_specific_flag
//       Access: Published
//  Description: Returns the flag that indicates whether specific
//               events should be generated.  See set_specific_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
22 14 Dtool_v_mBY3F7 0 4 24 532 0 14 Dtool_v_mBY3F7 720 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_time_flag
//       Access: Published
//  Description: Sets the flag that indicates whether the time of the
//               button event should be passed as a parameter or not.
//               When this is true, an additional parameter is
//               generated on each event (before all the parameters
//               named by add_parameter) that consists of a single
//               double value, and reflects the time the button was
//               pressed or released, as a value from
//               ClockObject::get_global_clock().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  9 time_flag 1 535  
23 14 Dtool_v_mBWTVj 0 6 25 535 0 14 Dtool_v_mBWTVj 346 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_time_flag
//       Access: Published
//  Description: Returns the flag that indicates whether the time of
//               the button event should be passed as a parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
24 14 Dtool_v_mBHaR_ 0 4 26 532 0 14 Dtool_v_mBHaR_ 382 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_parameter
//       Access: Public
//  Description: Adds the indicated parameter to the list of
//               parameters that will be passed with each event
//               generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  3 obj 1 536  
25 14 Dtool_v_mBbj99 0 6 27 539 0 14 Dtool_v_mBbj99 405 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_num_parameters
//       Access: Public
//  Description: Returns the number of parameters that have been added
//               to the list of parameters to be passed with each
//               event generated by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
26 14 Dtool_v_mBamFl 0 7 28 540 0 14 Dtool_v_mBamFl 386 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_parameter
//       Access: Public
//  Description: Returns the nth parameter that has been added to the
//               list of parameters passed with each event generated
//               by this ButtonThrower.
//////////////////////////////////////////////////////////////////// 2 4 this 3 533  1 n 1 539  
27 14 Dtool_v_mBGlsX 0 6 29 541 0 14 Dtool_v_mBGlsX 808 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               and those modifier buttons are set on the button
//               event, then the event name will be prepended with the
//               names of the modifier buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
28 14 Dtool_v_mB7l_D 0 4 30 532 0 14 Dtool_v_mB7l_D 1054 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_modifier_buttons
//       Access: Published
//  Description: Changes the set of ModifierButtons that the
//               ButtonThrower will consider important enough to
//               prepend the event name with.  Normally, this set will
//               be empty, and the ButtonThrower will therefore ignore
//               all ModifierButtons attached to the key events, but
//               if one or more buttons have been added to this set,
//               then the event name will be prepended with the names
//               of the modifier buttons.
//
//               It is recommended that you change this setting by
//               first calling get_modifier_buttons(), making
//               adjustments, and passing the new value to
//               set_modifier_buttons().  This way the current state
//               of the modifier buttons will not be lost.
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  4 mods 1 541  
29 14 Dtool_v_mBuTqR 0 4 31 532 0 14 Dtool_v_mBuTqR 597 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::set_throw_buttons_active
//       Access: Published
//  Description: Sets the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  Normally this is
//               false, meaning all buttons are processed; set it true
//               to indicate that only some buttons should be
//               processed.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 531  4 flag 1 535  
30 14 Dtool_v_mB5I8a 0 6 32 535 0 14 Dtool_v_mB5I8a 446 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::get_throw_buttons_active
//       Access: Published
//  Description: Returns the flag that indicates whether the
//               ButtonThrower will only process events for the
//               explicitly named buttons or not.  See
//               set_throw_buttons_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 533  
31 14 Dtool_v_mBJi9T 0 6 33 535 0 14 Dtool_v_mBJi9T 1056 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::add_throw_button
//       Access: Published
//  Description: Adds a new button to the set of buttons that the
//               ButtonThrower explicitly processes.
//
//               If set_throw_buttons_active is false (which is the
//               default), the ButtonThrower will process all buttons.
//               Otherwise, the ButtonThrower will only process events
//               for the button(s) explicitly named by this function;
//               buttons not on the list will be ignored by this
//               object and passed on downstream to the child node(s)
//               in the data graph.  A button that *is* on the list
//               will be processed by the ButtonThrower and not passed
//               on to the child node(s).
//
//               The return value is true if the button is added, or
//               false if it was already in the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 531  4 mods 1 541  6 button 1 544  
32 14 Dtool_v_mBpsxI 0 6 34 535 0 14 Dtool_v_mBpsxI 513 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::remove_throw_button
//       Access: Published
//  Description: Removes the indicated button from the set of buttons
//               that the ButtonThrower explicitly processes.  See
//               add_throw_button().
//
//               The return value is true if the button is removed, or
//               false if it was not on the set.
//////////////////////////////////////////////////////////////////// 3 4 this 3 531  4 mods 1 541  6 button 1 544  
33 14 Dtool_v_mBUvSd 0 6 35 535 0 14 Dtool_v_mBUvSd 644 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button, in conjunction
//               with any nonspecified modifier buttons, is on the set
//               of buttons that will be processed by the
//               ButtonThrower.  That is to say, returns true if this
//               button was ever passed as the second parameter
//               add_throw_button(), regardless of what the first
//               parameter was.
//////////////////////////////////////////////////////////////////// 2 4 this 3 533  6 button 1 544  
34 14 Dtool_v_mBcX_g 0 6 35 535 0 14 Dtool_v_mBcX_g 413 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::has_throw_button
//       Access: Published
//  Description: Returns true if the indicated button is on the set of
//               buttons that will be processed by the ButtonThrower,
//               false otherwise.  See add_throw_button().
//////////////////////////////////////////////////////////////////// 3 4 this 3 533  4 mods 1 541  6 button 1 544  
35 14 Dtool_v_mBMSSv 0 4 36 532 0 14 Dtool_v_mBMSSv 342 ////////////////////////////////////////////////////////////////////
//     Function: ButtonThrower::clear_throw_buttons
//       Access: Published
//  Description: Empties the set of buttons that were added via
//               add_throw_button().  See add_throw_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 531  
36 14 Dtool_v_mBmOhU 0 7 37 548 0 14 Dtool_v_mBmOhU 0 0 
37 14 Dtool_v_mBslm1 0 4 39 532 0 14 Dtool_v_mBslm1 589 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::require_button
//       Access: Published
//  Description: Indicates that the indicated button must be in the
//               required state (either up or down) in order for this
//               particular MouseInterfaceNode to do anything.  For
//               instance, this may be called to make a Trackball
//               object respect mouse input only when the control key
//               is held down.
//////////////////////////////////////////////////////////////////// 3 4 this 3 549  6 button 1 544  7 is_down 1 535  
38 14 Dtool_v_mBzD5_ 0 4 40 532 0 14 Dtool_v_mBzD5_ 340 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_button
//       Access: Published
//  Description: Removes any requirement on the indicated button set
//               by an earlier call to require_button().
//////////////////////////////////////////////////////////////////// 2 4 this 3 549  6 button 1 544  
39 14 Dtool_v_mBP5gT 0 4 41 532 0 14 Dtool_v_mBP5gT 332 ////////////////////////////////////////////////////////////////////
//     Function: MouseInterfaceNode::clear_all_button
//       Access: Published
//  Description: Removes all requirements on buttons set by an earlier
//               call to require_button().
//////////////////////////////////////////////////////////////////// 1 4 this 3 549  
40 14 Dtool_v_mB23QH 0 7 42 548 0 14 Dtool_v_mB23QH 0 0 
41 14 Dtool_v_mBqXDJ 0 7 44 550 0 14 Dtool_v_mBqXDJ 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 530  
42 14 Dtool_v_mBIz9n 0 7 44 550 0 14 Dtool_v_mBIz9n 226 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
43 14 Dtool_v_mBKTpq 0 4 45 532 0 14 Dtool_v_mBKTpq 396 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_forward_speed
//       Access: Published
//  Description: Sets the speed of full forward motion, when the mouse
//               is at the very top of the window.  This is in units
//               (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  5 speed 1 551  
44 14 Dtool_v_mBfKJb 0 6 46 551 0 14 Dtool_v_mBfKJb 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_forward_speed
//       Access: Published
//  Description: Returns the speed of full forward motion, when the
//               mouse is at the very top of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
45 14 Dtool_v_mB924G 0 4 47 532 0 14 Dtool_v_mB924G 399 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_reverse_speed
//       Access: Published
//  Description: Sets the speed of full reverse motion, when the mouse
//               is at the very bottom of the window.  This is in
//               units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  5 speed 1 551  
46 14 Dtool_v_mBsNX3 0 6 48 551 0 14 Dtool_v_mBsNX3 402 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_reverse_speed
//       Access: Published
//  Description: Returns the speed of full reverse motion, when the
//               mouse is at the very bottom of the window.  This is
//               in units (e.g. feet) per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
47 14 Dtool_v_mBMuQt 0 4 49 532 0 14 Dtool_v_mBMuQt 413 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_rotate_speed
//       Access: Published
//  Description: Sets the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  5 speed 1 551  
48 14 Dtool_v_mB82Ba 0 6 50 551 0 14 Dtool_v_mB82Ba 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rotate_speed
//       Access: Published
//  Description: Returns the maximum rate at which the user can rotate
//               left or right, when the mouse is at the very edge of
//               the window.  This is in degrees per second.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
49 14 Dtool_v_mB_K6o 0 4 51 532 0 14 Dtool_v_mB_K6o 603 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_dead_zone
//       Access: Published
//  Description: Sets the size of the horizontal bar in the center of
//               the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  4 zone 1 551  
50 14 Dtool_v_mBWqfE 0 6 52 551 0 14 Dtool_v_mBWqfE 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_dead_zone
//       Access: Published
//  Description: Returns the size of the horizontal bar in the center
//               of the screen that represents the "dead zone" of
//               vertical motion: the region in which the mouse does
//               not report vertical motion.  This is in a fraction of
//               the window height, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
51 14 Dtool_v_mByXFf 0 4 53 532 0 14 Dtool_v_mByXFf 606 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_dead_zone
//       Access: Published
//  Description: Sets the size of the vertical bar in the center of
//               the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  4 zone 1 551  
52 14 Dtool_v_mBh_JJ 0 6 54 551 0 14 Dtool_v_mBh_JJ 609 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_dead_zone
//       Access: Published
//  Description: Returns the size of the vertical bar in the center
//               of the screen that represents the "dead zone" of
//               horizontal motion: the region in which the mouse does
//               not report horizontal motion.  This is in a fraction of
//               the window width, so 0.5 will set a dead zone as
//               large as half the screen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
53 14 Dtool_v_mBaQ8o 0 4 55 532 0 14 Dtool_v_mBaQ8o 431 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is pressed and the
//               time it registers full forward or backward motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  12 ramp_up_time 1 551  
54 14 Dtool_v_mBq_RD 0 6 56 551 0 14 Dtool_v_mBq_RD 451 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is pressed
//               and the time it registers full forward or backward
//               motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
55 14 Dtool_v_mBkWik 0 4 57 532 0 14 Dtool_v_mBkWik 412 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_vertical_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time an up or down arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  14 ramp_down_time 1 551  
56 14 Dtool_v_mBi7QW 0 6 58 551 0 14 Dtool_v_mBi7QW 415 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_vertical_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time an up or down arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
57 14 Dtool_v_mB61dH 0 4 59 532 0 14 Dtool_v_mB61dH 417 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_up_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is pressed and the
//               time it registers full rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  12 ramp_up_time 1 551  
58 14 Dtool_v_mBNIM5 0 6 60 551 0 14 Dtool_v_mBNIM5 420 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_up_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is pressed
//               and the time it registers full rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
59 14 Dtool_v_mB2qn5 0 4 61 532 0 14 Dtool_v_mB2qn5 416 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_horizontal_ramp_down_time
//       Access: Published
//  Description: Sets the amount of time, in seconds, it takes between
//               the time a left or right arrow key is released and the
//               time it registers no motion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  14 ramp_down_time 1 551  
60 14 Dtool_v_mBACXI 0 6 62 551 0 14 Dtool_v_mBACXI 419 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_horizontal_ramp_down_time
//       Access: Published
//  Description: Returns the amount of time, in seconds, it takes
//               between the time a left or right arrow key is released
//               and the time it registers no motion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
61 14 Dtool_v_mBv7hx 0 6 63 551 0 14 Dtool_v_mBv7hx 278 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_speed
//       Access: Published
//  Description: Returns the speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
62 14 Dtool_v_mBQzD6 0 6 64 551 0 14 Dtool_v_mBQzD6 286 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_rot_speed
//       Access: Published
//  Description: Returns the rot_speed of the previous update in units/sec
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
63 14 Dtool_v_mBKbcV 0 4 65 532 0 14 Dtool_v_mBKbcV 332 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::reset
//       Access: Published
//  Description: Reinitializes the driver to the origin and resets any
//               knowledge about buttons being held down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
64 14 Dtool_v_mBdmzH 0 6 66 554 0 14 Dtool_v_mBdmzH 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_pos
//       Access: Published
//  Description: Returns the driver's position.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
65 14 Dtool_v_mBBRV2 0 6 67 551 0 14 Dtool_v_mBBRV2 0 1 4 this 3 552  
66 14 Dtool_v_mBRvo2 0 6 68 551 0 14 Dtool_v_mBRvo2 0 1 4 this 3 552  
67 14 Dtool_v_mBhN82 0 6 69 551 0 14 Dtool_v_mBhN82 0 1 4 this 3 552  
68 14 Dtool_v_mBAmwj 0 4 70 532 0 14 Dtool_v_mBAmwj 259 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_pos
//       Access: Published
//  Description: Directly sets the driver's position.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  3 vec 1 557  
69 14 Dtool_v_mBjVcP 0 4 70 532 0 14 Dtool_v_mBjVcP 0 4 4 this 3 550  1 x 1 551  1 y 1 551  1 z 1 551  
70 14 Dtool_v_mBpTmn 0 4 71 532 0 14 Dtool_v_mBpTmn 0 2 4 this 3 550  1 x 1 551  
71 14 Dtool_v_mBZx6n 0 4 72 532 0 14 Dtool_v_mBZx6n 0 2 4 this 3 550  1 y 1 551  
72 14 Dtool_v_mBJXNo 0 4 73 532 0 14 Dtool_v_mBJXNo 0 2 4 this 3 550  1 z 1 551  
73 14 Dtool_v_mBY8sW 0 6 74 557 0 14 Dtool_v_mBY8sW 256 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_hpr
//       Access: Published
//  Description: Returns the driver's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
74 14 Dtool_v_mBBtcx 0 6 75 551 0 14 Dtool_v_mBBtcx 0 1 4 this 3 552  
75 14 Dtool_v_mBBf5z 0 6 76 551 0 14 Dtool_v_mBBf5z 0 1 4 this 3 552  
76 14 Dtool_v_mBhbg0 0 6 77 551 0 14 Dtool_v_mBhbg0 0 1 4 this 3 552  
77 14 Dtool_v_mBFcoy 0 4 78 532 0 14 Dtool_v_mBFcoy 262 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_hpr
//       Access: Published
//  Description: Directly sets the driver's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  3 hpr 1 557  
78 14 Dtool_v_mB4DVe 0 4 78 532 0 14 Dtool_v_mB4DVe 0 4 4 this 3 550  1 h 1 551  1 p 1 551  1 r 1 551  
79 14 Dtool_v_mBp3ui 0 4 79 532 0 14 Dtool_v_mBp3ui 0 2 4 this 3 550  1 h 1 551  
80 14 Dtool_v_mBpBKl 0 4 80 532 0 14 Dtool_v_mBpBKl 0 2 4 this 3 550  1 p 1 551  
81 14 Dtool_v_mBJFxl 0 4 81 532 0 14 Dtool_v_mBJFxl 0 2 4 this 3 550  1 r 1 551  
82 14 Dtool_v_mBI1Ry 0 4 82 532 0 14 Dtool_v_mBI1Ry 322 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_roll
//       Access: Published
//  Description: This function is no longer used and does nothing.  It
//               will be removed soon.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  10 force_roll 1 551  
83 14 Dtool_v_mBsn9J 0 4 83 532 0 14 Dtool_v_mBsn9J 736 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_ignore_mouse
//       Access: Published
//  Description: Changes the state of the ignore_mouse flag.  If this
//               flag is true, the DriveInterface will ignore mouse
//               down button events (but still recognize mouse up
//               button events); the user will not be able to start
//               the DriveInterface going again if it is stopped, but
//               if the user is currently holding down a mouse button
//               it will not stop immediately until the user
//               eventually releases the button.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  12 ignore_mouse 1 535  
84 14 Dtool_v_mBHO_x 0 6 84 535 0 14 Dtool_v_mBHO_x 326 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_ignore_mouse
//       Access: Published
//  Description: Returns the current setting of the ignore_mouse flag.
//               See set_ignore_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
85 14 Dtool_v_mBpmA_ 0 4 85 532 0 14 Dtool_v_mBpmA_ 406 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_force_mouse
//       Access: Published
//  Description: Changes the state of the force_mouse flag.  If this
//               flag is true, the mouse button need not be held down
//               in order to drive the avatar around.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  11 force_mouse 1 535  
86 14 Dtool_v_mBlWhe 0 6 86 535 0 14 Dtool_v_mBlWhe 323 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_force_mouse
//       Access: Published
//  Description: Returns the current setting of the force_mouse flag.
//               See set_force_mouse().
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
87 14 Dtool_v_mBxaMx 0 4 87 532 0 14 Dtool_v_mBxaMx 649 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_stop_this_frame
//       Access: Published
//  Description: If stop_this_frame is true, the next time the frame
//               is computed no motion will be allowed, and then the
//               flag is reset to false.  This can be used to prevent
//               too much movement when we know a long time has
//               artificially elapsed, for instance when we take a
//               screenshot, without munging the clock for everything
//               else.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  15 stop_this_frame 1 535  
88 14 Dtool_v_mBjdTo 0 6 88 535 0 14 Dtool_v_mBjdTo 336 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_stop_this_frame
//       Access: Published
//  Description: Returns the current setting of the stop_this_frame
//               flag.  See set_stop_this_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 552  
89 14 Dtool_v_mBTToo 0 4 89 532 0 14 Dtool_v_mBTToo 276 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the DriveInterface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 550  3 mat 1 560  
90 14 Dtool_v_mBoJtK 0 6 90 560 0 14 Dtool_v_mBoJtK 253 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::get_mat
//       Access: Published
//  Description: Returns the current transform.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
91 14 Dtool_v_mBQ2Wr 0 4 91 532 0 14 Dtool_v_mBQ2Wr 558 ////////////////////////////////////////////////////////////////////
//     Function: DriveInterface::force_dgraph
//       Access: Public
//  Description: This is a special kludge for DriveInterface to allow
//               us to avoid the one-frame latency after a collision.
//               It forces an immediate partial data flow for all data
//               graph nodes below this node, causing all data nodes
//               that depend on this matrix to be updated immediately.
//////////////////////////////////////////////////////////////////// 1 4 this 3 550  
92 14 Dtool_v_mB0qRB 0 7 92 548 0 14 Dtool_v_mB0qRB 0 0 
93 14 Dtool_v_mBczRD 0 7 94 563 0 14 Dtool_v_mBczRD 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 530  
94 14 Dtool_v_mBVI_1 0 6 95 551 0 14 Dtool_v_mBVI_1 379 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
95 14 Dtool_v_mBVfJj 0 6 96 551 0 14 Dtool_v_mBVfJj 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
96 14 Dtool_v_mBaA1U 0 6 97 551 0 14 Dtool_v_mBaA1U 384 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within the window.  This number will be
//               in the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
97 14 Dtool_v_mBhR06 0 6 98 551 0 14 Dtool_v_mBhR06 377 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within the window.  This number will be in
//               the range [0..1].
//////////////////////////////////////////////////////////////////// 1 4 this 3 564  
98 14 Dtool_v_mBlkoB 0 4 99 532 0 14 Dtool_v_mBlkoB 583 ////////////////////////////////////////////////////////////////////
//     Function: MouseSubregion::set_dimensions
//       Access: Published
//  Description: Changes the region of the window in which the mouse
//               is considered to be active.  The parameters are
//               identical to those for a DisplayRegion: they range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole window.
//////////////////////////////////////////////////////////////////// 5 4 this 3 563  1 l 1 551  1 r 1 551  1 b 1 551  1 t 1 551  
99 14 Dtool_v_mByuXc 0 7 100 548 0 14 Dtool_v_mByuXc 0 0 
100 14 Dtool_v_mBXN0b 0 7 108 569 378 14 Dtool_v_mBXN0b 230 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 530  5 frame 1 566  
101 14 Dtool_v_mBVKEG 0 7 108 569 378 14 Dtool_v_mBVKEG 230 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 name 1 530  4 left 1 551  5 right 1 551  6 bottom 1 551  3 top 1 551  
102 14 Dtool_v_mBvRlo 0 4 109 532 0 14 Dtool_v_mBvRlo 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  5 frame 1 566  
103 14 Dtool_v_mBTI04 0 4 109 532 0 14 Dtool_v_mBTI04 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 569  4 left 1 551  5 right 1 551  6 bottom 1 551  3 top 1 551  
104 14 Dtool_v_mBC2td 0 6 110 566 0 14 Dtool_v_mBC2td 228 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_frame
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 570  
105 14 Dtool_v_mBxwAe 0 6 111 551 0 14 Dtool_v_mBxwAe 271 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_area
//       Access: Published
//  Description: Returns the area of the rectangular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 570  
106 14 Dtool_v_mBuUjJ 0 4 112 532 0 14 Dtool_v_mBuUjJ 672 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_sort
//       Access: Published
//  Description: Changes the sorting order of this particular region.
//               The sorting order is used to resolve conflicts in the
//               case of overlapping region; the region with the
//               highest sort value will be preferred, and between
//               regions of the same sort value, the smallest region
//               will be preferred.  The default sorting order, if
//               none is explicitly specified, is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  4 sort 1 539  
107 14 Dtool_v_mBwQ_6 0 6 113 539 0 14 Dtool_v_mBwQ_6 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_sort
//       Access: Published
//  Description: Returns the current sorting order of this region.
//               See set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 570  
108 14 Dtool_v_mBH96x 0 4 114 532 0 14 Dtool_v_mBH96x 515 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_active
//       Access: Published
//  Description: Sets whether the region is active or not.  If it is
//               not active, the MouseWatcher will never consider the
//               mouse to be over the region.  The region might still
//               receive keypress events if its set_keyboard() flag is
//               true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  6 active 1 535  
109 14 Dtool_v_mBBoGH 0 6 115 535 0 14 Dtool_v_mBBoGH 310 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_active
//       Access: Published
//  Description: Returns whether the region is active or not.  See
//               set_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 570  
110 14 Dtool_v_mB_wOd 0 4 116 532 0 14 Dtool_v_mB_wOd 598 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_keyboard
//       Access: Published
//  Description: Sets whether the region is interested in global
//               keyboard events.  If this is true, then any keyboard
//               button events will be passed to press() and release()
//               regardless of the position of the mouse onscreen;
//               otherwise, these events will only be passed if the
//               mouse is over the region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  8 keyboard 1 535  
111 14 Dtool_v_mB2JK8 0 6 117 535 0 14 Dtool_v_mB2JK8 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_keyboard
//       Access: Published
//  Description: Returns whether the region is interested in global
//               keyboard events; see set_keyboard().
//////////////////////////////////////////////////////////////////// 1 4 this 3 570  
112 14 Dtool_v_mBTWvO 0 4 119 532 0 14 Dtool_v_mBTWvO 725 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::set_suppress_flags
//       Access: Published
//  Description: Sets which events are suppressed when the mouse is
//               over the region.  This is the union of zero or more
//               various SF_* values.  Normally, this is 0, indicating
//               that no events are suppressed.
//
//               If you set this to a non-zero value, for instance
//               SF_mouse_position, then the mouse position will not
//               be sent along the data graph when the mouse is over
//               this particular region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 569  14 suppress_flags 1 539  
113 14 Dtool_v_mByKjf 0 6 120 539 0 14 Dtool_v_mByKjf 317 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::get_suppress_flags
//       Access: Published
//  Description: Returns the current suppress_flags.  See
//               set_suppress_flags().
//////////////////////////////////////////////////////////////////// 1 4 this 3 570  
114 14 Dtool_v_mBkvVL 0 4 121 532 0 14 Dtool_v_mBkvVL 225 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  3 out 1 572  
115 14 Dtool_v_mBijOS 0 4 122 532 0 14 Dtool_v_mBijOS 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 570  3 out 1 572  12 indent_level 1 539  
116 14 Dtool_v_mB1qaj 0 4 122 532 0 14 Dtool_v_mB1qaj 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherRegion::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 570  3 out 1 572  
117 14 Dtool_v_mBet1g 0 7 123 548 0 14 Dtool_v_mBet1g 0 0 
118 14 Dtool_v_mBS1_F 0 7 103 574 0 14 Dtool_v_mBS1_F 0 1 4 this 3 569  
119 14 Dtool_v_mB76md 0 7 104 569 378 14 Dtool_v_mB76md 0 1 4 this 3 574  
120 14 Dtool_v_mBuEXk 0 6 106 575 0 14 Dtool_v_mBuEXk 0 1 4 this 3 569  
121 14 Dtool_v_mB7Z9h 0 7 107 569 378 14 Dtool_v_mB7Z9h 0 1 4 this 3 575  
122 14 Dtool_v_mBjCfA 0 4 127 532 0 14 Dtool_v_mBjCfA 389 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::add_region
//       Access: Published
//  Description: Adds the indicated region to the set of regions in
//               the group.  It is an error to add the same region to
//               the set more than once.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  6 region 1 569  
123 14 Dtool_v_mBKFjU 0 6 128 535 0 14 Dtool_v_mBKFjU 346 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::has_region
//       Access: Published
//  Description: Returns true if the indicated region has already been
//               added to the MouseWatcherBase, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  6 region 1 569  
124 14 Dtool_v_mBIfic 0 6 129 535 0 14 Dtool_v_mBIfic 402 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  6 region 1 569  
125 14 Dtool_v_mBWxB_ 0 7 130 569 378 14 Dtool_v_mBWxB_ 416 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::find_region
//       Access: Published
//  Description: Returns a pointer to the first region found with the
//               indicated name.  If multiple regions share the same
//               name, the one that is returned is indeterminate.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  4 name 1 530  
126 14 Dtool_v_mB4LGa 0 4 131 532 0 14 Dtool_v_mB4LGa 270 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::clear_regions
//       Access: Published
//  Description: Removes all the regions from the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
127 14 Dtool_v_mBVYiW 0 4 132 532 0 14 Dtool_v_mBVYiW 302 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::sort_regions
//       Access: Published
//  Description: Sorts all the regions in this group into pointer
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
128 14 Dtool_v_mBs2iv 0 6 133 535 0 14 Dtool_v_mBs2iv 311 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::is_sorted
//       Access: Published
//  Description: Returns true if the group has already been sorted,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
129 14 Dtool_v_mB5CLm 0 6 134 539 0 14 Dtool_v_mB5CLm 276 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_num_regions
//       Access: Published
//  Description: Returns the number of regions in the group.
//////////////////////////////////////////////////////////////////// 1 4 this 3 577  
130 14 Dtool_v_mBr8X1 0 7 135 569 378 14 Dtool_v_mBr8X1 471 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::get_region
//       Access: Published
//  Description: Returns the nth region of the group; returns NULL if
//               there is no nth region.  Note that this is not
//               thread-safe; another thread might have removed the
//               nth region before you called this method.
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  1 n 1 539  
131 14 Dtool_v_mBFe6U 0 4 136 532 0 14 Dtool_v_mBFe6U 223 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  3 out 1 572  
132 14 Dtool_v_mB2D6l 0 4 137 532 0 14 Dtool_v_mB2D6l 222 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 577  3 out 1 572  12 indent_level 1 539  
133 14 Dtool_v_mBTMdv 0 4 137 532 0 14 Dtool_v_mBTMdv 222 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 577  3 out 1 572  
134 14 Dtool_v_mBhY18 0 4 138 532 0 14 Dtool_v_mBhY18 443 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::show_regions
//       Access: Published
//  Description: Enables the visualization of all of the regions
//               handled by this MouseWatcherBase.  The supplied
//               NodePath should be the root of the 2-d scene graph
//               for the window.
//////////////////////////////////////////////////////////////////// 4 4 this 3 576  8 render2d 1 579  8 bin_name 1 530  10 draw_order 1 539  
135 14 Dtool_v_mB5Jyw 0 4 139 532 0 14 Dtool_v_mB5Jyw 361 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::set_color
//       Access: Published
//  Description: Specifies the color used to draw the region
//               rectangles for the regions visualized by
//               show_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 576  5 color 1 566  
136 14 Dtool_v_mBE3wy 0 4 140 532 0 14 Dtool_v_mBE3wy 316 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::hide_regions
//       Access: Published
//  Description: Stops the visualization created by a previous call to
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
137 14 Dtool_v_mBEn40 0 4 141 532 0 14 Dtool_v_mBEn40 303 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherBase::update_regions
//       Access: Published
//  Description: Refreshes the visualization created by
//               show_regions().
//////////////////////////////////////////////////////////////////// 1 4 this 3 576  
138 14 Dtool_v_mBbgzl 0 7 142 548 0 14 Dtool_v_mBbgzl 0 0 
139 14 Dtool_v_mBcC1c 0 7 148 582 401 14 Dtool_v_mBcC1c 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 530  
140 14 Dtool_v_mBa1_K 0 7 148 582 401 14 Dtool_v_mBa1_K 224 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
141 14 Dtool_v_mBNVgH 0 6 150 535 0 14 Dtool_v_mBNVgH 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_region
//       Access: Published
//  Description: Removes the indicated region from the group.
//               Returns true if it was successfully removed, or false
//               if it wasn't there in the first place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  6 region 1 569  
142 14 Dtool_v_mBNnfE 0 6 151 535 0 14 Dtool_v_mBNnfE 340 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_mouse
//       Access: Published
//  Description: Returns true if the mouse is anywhere within the
//               window, false otherwise.  Also see is_mouse_open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
143 14 Dtool_v_mBIirl 0 6 152 535 0 14 Dtool_v_mBIirl 473 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_mouse_open
//       Access: Published
//  Description: Returns true if the mouse is within the window and
//               not over some particular MouseWatcherRegion that is
//               marked to suppress mouse events; that is, that the
//               mouse is in open space within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
144 14 Dtool_v_mBP88Z 0 6 153 585 0 14 Dtool_v_mBP88Z 389 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
145 14 Dtool_v_mBY5e7 0 6 154 551 0 14 Dtool_v_mBY5e7 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_x
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current X position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
146 14 Dtool_v_mBhnf7 0 6 155 551 0 14 Dtool_v_mBhnf7 393 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_mouse_y
//       Access: Published
//  Description: It is only valid to call this if has_mouse() returns
//               true.  If so, this returns the current Y position of
//               the mouse within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
147 14 Dtool_v_mBHxfL 0 4 156 532 0 14 Dtool_v_mBHxfL 928 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  This determines
//               the coordinate space in which the MouseWatcherRegions
//               should be expected to live.  Normally, this is left
//               at -1, 1, -1, 1, which is the default setting, and
//               matches the mouse coordinate range.
//
//               Whatever values you specify here indicate the shape
//               of the full screen, and the MouseWatcherRegions will
//               be given in coordinate space matching it.  For
//               instance, if you specify (0, 1, 0, 1), then a
//               MouseWatcherRegion with the frame (0, 1, 0, .5) will
//               cover the lower half of the screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  5 frame 1 566  
148 14 Dtool_v_mB0bst 0 4 156 532 0 14 Dtool_v_mB0bst 343 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_frame
//       Access: Published
//  Description: Sets the frame of the MouseWatcher.  See the next
//               flavor of this method for a more verbose explanation.
//////////////////////////////////////////////////////////////////// 5 4 this 3 582  4 left 1 551  5 right 1 551  6 bottom 1 551  3 top 1 551  
149 14 Dtool_v_mB08UI 0 6 157 566 0 14 Dtool_v_mB08UI 296 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_frame
//       Access: Published
//  Description: Returns the frame of the MouseWatcher.  See
//               set_frame().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
150 14 Dtool_v_mBcWJO 0 6 158 535 0 14 Dtool_v_mBcWJO 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
151 14 Dtool_v_mBvoLV 0 6 158 535 0 14 Dtool_v_mBvoLV 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  3 pos 1 585  
152 14 Dtool_v_mBO62h 0 6 158 535 0 14 Dtool_v_mBO62h 319 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_over_region
//       Access: Published
//  Description: Returns true if the mouse is over any rectangular
//               region, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 583  1 x 1 551  1 y 1 551  
153 14 Dtool_v_mBeZEz 0 7 159 569 378 14 Dtool_v_mBeZEz 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the mouse is currently
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
154 14 Dtool_v_mBg7zU 0 7 159 569 378 14 Dtool_v_mBg7zU 513 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the preferred region the mouse is over.  In
//               the case of overlapping regions, the region with the
//               largest sort order is preferred; if two regions have
//               the same sort order, then the smaller region is
//               preferred.
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  3 pos 1 585  
155 14 Dtool_v_mBwQqr 0 7 159 569 378 14 Dtool_v_mBwQqr 335 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_over_region
//       Access: Published
//  Description: Returns the smallest region the indicated point is
//               over, or NULL if it is over no region.
//////////////////////////////////////////////////////////////////// 3 4 this 3 583  1 x 1 551  1 y 1 551  
156 14 Dtool_v_mB39sY 0 6 160 535 0 14 Dtool_v_mB39sY 328 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::is_button_down
//       Access: Published
//  Description: Returns true if the indicated button is currently
//               being held down, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  6 button 1 588  
157 14 Dtool_v_mBcEcO 0 4 161 532 0 14 Dtool_v_mBcEcO 762 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_down_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is depressed.  This
//               is a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
158 14 Dtool_v_mBht1B 0 6 162 530 0 14 Dtool_v_mBht1B 394 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_down_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is depressed.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
159 14 Dtool_v_mBm2Gd 0 4 163 532 0 14 Dtool_v_mBm2Gd 400 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_up_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
160 14 Dtool_v_mBi4be 0 6 164 530 0 14 Dtool_v_mBi4be 391 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_up_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when a button is released.  See
//               set_button_down_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
161 14 Dtool_v_mBixkm 0 4 165 532 0 14 Dtool_v_mBixkm 827 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_button_repeat_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  This is
//               a string that may contain any of the following:
//
//                  %r  - the name of the region the mouse is over
//                  %b  - the name of the button pressed.
//
//               The event name will be based on the in_pattern
//               string specified here, with all occurrences of the
//               above strings replaced with the corresponding values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
162 14 Dtool_v_mBLPpO 0 6 166 530 0 14 Dtool_v_mBLPpO 471 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_button_repeat_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               names are generated when a button is continuously
//               held and generates keyrepeat "down" events.  See
//               set_button_repeat_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
163 14 Dtool_v_mBYndk 0 4 167 532 0 14 Dtool_v_mBYndk 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_enter_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse enters a region.
//               This is different from within_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
164 14 Dtool_v_mBAuR6 0 6 168 530 0 14 Dtool_v_mBAuR6 559 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_enter_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse enters a region.  This is
//               different from within_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
165 14 Dtool_v_mBHX33 0 4 169 532 0 14 Dtool_v_mBHX33 585 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_leave_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse leaves a region.
//               This is different from without_pattern, in that a
//               mouse is only "entered" in the topmost region at a
//               given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
166 14 Dtool_v_mBWyqN 0 6 170 530 0 14 Dtool_v_mBWyqN 560 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_leave_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse leaves a region.  This is
//               different from without_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
167 14 Dtool_v_mBlQGQ 0 4 171 532 0 14 Dtool_v_mBlQGQ 591 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_within_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders over a
//               region.  This is different from enter_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
168 14 Dtool_v_mBtUxJ 0 6 172 530 0 14 Dtool_v_mBtUxJ 565 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_within_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders over a region.  This
//               is different from enter_pattern, in that a mouse is
//               only "entered" in the topmost region at a given time,
//               while it might be "within" multiple nested regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
169 14 Dtool_v_mBq8_O 0 4 173 532 0 14 Dtool_v_mBq8_O 594 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_without_pattern
//       Access: Published
//  Description: Sets the pattern string that indicates how the event
//               names are generated when the mouse wanders out of a
//               region.  This is different from leave_pattern, in
//               that a mouse is only "entered" in the topmost region
//               at a given time, while it might be "within" multiple
//               nested regions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 pattern 1 530  
170 14 Dtool_v_mBa5mF 0 6 174 530 0 14 Dtool_v_mBa5mF 584 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_without_pattern
//       Access: Published
//  Description: Returns the string that indicates how event names are
//               generated when the mouse wanders out of a region.
//               This is different from leave_pattern, in that a mouse
//               is only "entered" in the topmost region at a given
//               time, while it might be "within" multiple nested
//               regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
171 14 Dtool_v_mBCINK 0 4 175 532 0 14 Dtool_v_mBCINK 553 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_geometry
//       Access: Published
//  Description: Sets the node that will be transformed each frame by
//               the mouse's coordinates.  It will also be hidden when
//               the mouse goes outside the window.  This can be used
//               to implement a software mouse pointer for when a
//               hardware (or system) mouse pointer is unavailable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  4 node 1 589  
172 14 Dtool_v_mBnnGj 0 6 176 535 0 14 Dtool_v_mBnnGj 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_geometry
//       Access: Published
//  Description: Returns true if a software mouse pointer has been
//               setup via set_geometry(), or false otherwise.  See
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
173 14 Dtool_v_mBgJl4 0 7 177 589 0 14 Dtool_v_mBgJl4 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_geometry
//       Access: Published
//  Description: Returns the node that has been set as the software
//               mouse pointer, or NULL if no node has been set.  See
//               has_geometry() and set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
174 14 Dtool_v_mBalHk 0 4 178 532 0 14 Dtool_v_mBalHk 308 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_geometry
//       Access: Published
//  Description: Stops the use of the software cursor set up via
//               set_geometry().
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
175 14 Dtool_v_mBT4a_ 0 4 179 532 0 14 Dtool_v_mBT4a_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  2 eh 1 591  
176 14 Dtool_v_mBpC6_ 0 6 180 591 0 14 Dtool_v_mBpC6_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_extra_handler
//       Access: Published
//  Description: As an optimization for the C++ Gui, an extra handler
//               can be registered with a mouseWatcher so that events
//               can be dealt with much sooner.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
177 14 Dtool_v_mBtFyZ 0 4 181 532 0 14 Dtool_v_mBtFyZ 376 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_modifier_buttons
//       Access: Public
//  Description: Sets the buttons that should be monitored as modifier
//               buttons for generating events to the
//               MouseWatcherRegions.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  4 mods 1 541  
178 14 Dtool_v_mBI0bg 0 7 182 593 0 14 Dtool_v_mBI0bg 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of buttons that are being monitored
//               as modifier buttons, as well as their current state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
179 14 Dtool_v_mBin8K 0 4 183 532 0 14 Dtool_v_mBin8K 743 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_display_region
//       Access: Published
//  Description: Constrains the MouseWatcher to watching the mouse
//               within a particular indicated region of the screen.
//               DataNodes parented under the MouseWatcher will
//               observe the mouse and keyboard events only when the
//               mouse is within the indicated region, and the
//               observed range will be from -1 .. 1 across the
//               region.
//
//               Do not delete the DisplayRegion while it is owned by
//               the MouseWatcher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  2 dr 1 594  
180 14 Dtool_v_mB1V8S 0 4 184 532 0 14 Dtool_v_mB1V8S 398 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_display_region
//       Access: Published
//  Description: Removes the display region constraint from the
//               MouseWatcher, and restores it to the default behavior
//               of watching the whole window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
181 14 Dtool_v_mBbAU7 0 7 185 594 0 14 Dtool_v_mBbAU7 386 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_display_region
//       Access: Published
//  Description: Returns the display region the MouseWatcher is
//               constrained to by set_display_region(), or NULL if it
//               is not constrained.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
182 14 Dtool_v_mBZp2l 0 6 186 535 0 14 Dtool_v_mBZp2l 525 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_display_region
//       Access: Published
//  Description: Returns true if the MouseWatcher has been constrained
//               to a particular region of the screen via
//               set_display_region(), or false otherwise.  If this
//               returns true, get_display_region() may be used to
//               return the particular region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
183 14 Dtool_v_mB6Y8I 0 6 187 535 0 14 Dtool_v_mB6Y8I 840 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::add_group
//       Access: Published
//  Description: Adds the indicated group of regions to the set of
//               regions the MouseWatcher will monitor each frame.
//
//               Since the MouseWatcher itself inherits from
//               MouseWatcherBase, this operation is normally not
//               necessary--you can simply add the Regions you care
//               about one at a time.  Adding a complete group is
//               useful when you may want to explicitly remove the
//               regions as a group later.
//
//               Returns true if the group was successfully added, or
//               false if it was already on the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  5 group 1 596  
184 14 Dtool_v_mBe1yD 0 6 188 535 0 14 Dtool_v_mBe1yD 474 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::remove_group
//       Access: Published
//  Description: Removes the indicated group from the set of extra
//               groups associated with the MouseWatcher.  Returns
//               true if successful, or false if the group was already
//               removed or was never added via add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  5 group 1 596  
185 14 Dtool_v_mBeayk 0 6 189 535 0 14 Dtool_v_mBeayk 665 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::replace_group
//       Access: Published
//  Description: Atomically removes old_group from the MouseWatcher,
//               and replaces it with new_group.  Presumably old_group
//               and new_group might have some regions in common;
//               these are handled properly.
//
//               If old_group is not already present, simply adds
//               new_group and returns false.  Otherwise, removes
//               old_group and adds new_group, and then returns true.
//////////////////////////////////////////////////////////////////// 3 4 this 3 582  9 old_group 1 596  9 new_group 1 596  
186 14 Dtool_v_mBlrMu 0 6 190 539 0 14 Dtool_v_mBlrMu 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_num_groups
//       Access: Published
//  Description: Returns the number of separate groups added to the
//               MouseWatcher via add_group().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
187 14 Dtool_v_mBt9yw 0 7 191 596 0 14 Dtool_v_mBt9yw 304 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_group
//       Access: Published
//  Description: Returns the nth group added to the MouseWatcher via
//               add_group().
//////////////////////////////////////////////////////////////////// 2 4 this 3 583  1 n 1 539  
188 14 Dtool_v_mBCe2F 0 4 192 532 0 14 Dtool_v_mBCe2F 822 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout
//       Access: Published
//  Description: Sets an inactivity timeout on the mouse activity.
//               When this timeout (in seconds) is exceeded with no
//               keyboard or mouse activity, all currently-held
//               buttons are automatically released.  This is intended
//               to help protect against people who inadvertently (or
//               intentionally) leave a keyboard key stuck down and
//               then wander away from the keyboard.
//
//               Also, when this timeout expires, the event specified
//               by set_inactivity_timeout_event() will be generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  7 timeout 1 598  
189 14 Dtool_v_mBmGVJ 0 6 193 535 0 14 Dtool_v_mBmGVJ 321 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::has_inactivity_timeout
//       Access: Published
//  Description: Returns true if an inactivity timeout has been set,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
190 14 Dtool_v_mBSYye 0 6 194 598 0 14 Dtool_v_mBSYye 390 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout
//       Access: Published
//  Description: Returns the inactivity timeout that has been set.
//               It is an error to call this if
//               has_inactivity_timeout() returns false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
191 14 Dtool_v_mB2sej 0 4 195 532 0 14 Dtool_v_mB2sej 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_inactivity_timeout
//       Access: Published
//  Description: Removes the inactivity timeout and restores the
//               MouseWatcher to its default behavior of allowing a
//               key to be held indefinitely.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
192 14 Dtool_v_mB6rZ_ 0 4 196 532 0 14 Dtool_v_mB6rZ_ 401 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_inactivity_timeout_event
//       Access: Published
//  Description: Specifies the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  5 event 1 530  
193 14 Dtool_v_mBemLm 0 6 197 530 0 14 Dtool_v_mBemLm 399 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_inactivity_timeout_event
//       Access: Published
//  Description: Returns the event string that will be generated
//               when the inactivity timeout counter expires.  See
//               set_inactivity_timeout().
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
194 14 Dtool_v_mBLTg_ 0 7 198 601 0 14 Dtool_v_mBLTg_ 713 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_log
//       Access: Published
//  Description: Obtain the mouse trail log.  This is a PointerEventList.
//               Does not make a copy, therefore, this PointerEventList
//               will be updated each time process_events gets called.
//
//               To use trail logging, you need to enable the
//               generation of pointer events in the
//               GraphicsWindowInputDevice and set the trail log
//               duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
195 14 Dtool_v_mBRetJ 0 6 199 539 0 14 Dtool_v_mBRetJ 440 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::num_trail_recent
//       Access: Published
//  Description: This counter indicates how many events were added
//               to the trail log this frame.  The trail log is
//               updated once per frame, during the process_events
//               operation.  
//////////////////////////////////////////////////////////////////// 1 4 this 3 583  
196 14 Dtool_v_mBCGVq 0 4 200 532 0 14 Dtool_v_mBCGVq 468 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::set_trail_log_duration
//       Access: Published
//  Description: If the duration is nonzero, causes the MouseWatcher
//               to log the mouse's trail.  Events older than the
//               specified duration are discarded.  If the duration is
//               zero, logging is disabled.
//////////////////////////////////////////////////////////////////// 2 4 this 3 582  8 duration 1 598  
197 14 Dtool_v_mBsiL0 0 7 201 603 0 14 Dtool_v_mBsiL0 999 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::get_trail_node
//       Access: Published
//  Description: Returns a GeomNode that represents the mouse trail.
//               The intent is that you should reparent this GeomNode
//               to Render2D, and then forget about it.  The
//               MouseWatcher will continually update the trail node.
//               There is only one trail node, it does not create a
//               new one each time you call get_trail_node.
//
//               This is not a particularly beautiful way to render
//               a mouse trail.  It is intended more for debugging
//               purposes than for finished applications.  Even so,
//               It is suggested that you might want to apply a line
//               thickness and antialias mode to the line --- doing
//               so makes it look a lot better.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
198 14 Dtool_v_mBdIxZ 0 4 202 532 0 14 Dtool_v_mBdIxZ 533 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_node
//       Access: Published
//  Description: If you have previously fetched the trail node
//               using get_trail_node, then the MouseWatcher is
//               continually updating the trail node every frame.
//               Using clear_trail_node causes the MouseWatcher to
//               forget the trail node and stop updating it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
199 14 Dtool_v_mBbIXE 0 4 203 532 0 14 Dtool_v_mBbIXE 349 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::clear_trail_log
//       Access: Published
//  Description: Clears the mouse trail log.  This does not prevent
//               further accumulation of the log given future events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
200 14 Dtool_v_mBYPsS 0 4 204 532 0 14 Dtool_v_mBYPsS 951 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcher::note_activity
//       Access: Published
//  Description: Can be used in conjunction with the inactivity
//               timeout to inform the MouseWatcher that the user has
//               just performed some action which proves he/she is
//               present.  It may be necessary to call this for
//               external events, such as joystick action, that the
//               MouseWatcher might otherwise not know about.  This
//               will reset the current inactivity timer.  When the
//               inactivity timer reaches the length of time specified
//               by set_inactivity_timeout(), with no keyboard or
//               mouse activity and no calls to note_activity(), then
//               any buttons held will be automatically released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 582  
201 14 Dtool_v_mBfzXa 0 7 205 548 0 14 Dtool_v_mBfzXa 0 0 
202 14 Dtool_v_mBKzc_ 0 7 144 604 0 14 Dtool_v_mBKzc_ 0 1 4 this 3 582  
203 14 Dtool_v_mBhM9_ 0 7 145 582 401 14 Dtool_v_mBhM9_ 0 1 4 this 3 604  
204 14 Dtool_v_mBm5Ah 0 6 146 576 0 14 Dtool_v_mBm5Ah 0 1 4 this 3 582  
205 14 Dtool_v_mBUhKO 0 7 147 582 401 14 Dtool_v_mBUhKO 0 1 4 this 3 576  
206 14 Dtool_v_mBHdBJ 0 6 208 535 0 14 Dtool_v_mBHdBJ 341 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_button
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse or keyboard button, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
207 14 Dtool_v_mBWbt7 0 7 209 588 0 14 Dtool_v_mBWbt7 406 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_button
//       Access: Published
//  Description: Returns the mouse or keyboard button associated with
//               this event.  If has_button(), above, returns false,
//               this returns ButtonHandle::none().
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
208 14 Dtool_v_mBNSyS 0 6 210 535 0 14 Dtool_v_mBNSyS 381 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_keyrepeat
//       Access: Published
//  Description: Returns true if the button-down even was generated
//               due to keyrepeat, or false if it was an original
//               button down.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
209 14 Dtool_v_mBjsPh 0 6 211 535 0 14 Dtool_v_mBjsPh 325 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_keycode
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               keycode, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
210 14 Dtool_v_mBLr7T 0 6 212 539 0 14 Dtool_v_mBLr7T 355 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_keycode
//       Access: Published
//  Description: Returns the keycode associated with this event.  If
//               has_keycode(), above, returns false, this returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
211 14 Dtool_v_mBm3E2 0 6 213 535 0 14 Dtool_v_mBm3E2 336 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_candidate
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               candidate string, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
212 14 Dtool_v_mBJON1 0 6 214 530 0 14 Dtool_v_mBJON1 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
213 14 Dtool_v_mBggbz 0 6 214 530 0 14 Dtool_v_mBggbz 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_candidate_string_encoded
//       Access: Published
//  Description: Returns the candidate string associated with this
//               event.  If has_candidate(), above, returns false,
//               this returns the empty string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 605  8 encoding 1 607  
214 14 Dtool_v_mB2Qq_ 0 6 215 609 0 14 Dtool_v_mB2Qq_ 323 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_start
//       Access: Published
//  Description: Returns the first highlighted character in the
//               candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
215 14 Dtool_v_mBwcQ5 0 6 216 609 0 14 Dtool_v_mBwcQ5 334 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_highlight_end
//       Access: Published
//  Description: Returns one more than the last highlighted character
//               in the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
216 14 Dtool_v_mB5fsc 0 6 217 609 0 14 Dtool_v_mB5fsc 329 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_cursor_pos
//       Access: Published
//  Description: Returns the position of the user's edit cursor within
//               the candidate string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
217 14 Dtool_v_mBD2au 0 6 218 541 0 14 Dtool_v_mBD2au 352 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_modifier_buttons
//       Access: Published
//  Description: Returns the set of modifier buttons that were being
//               held down while the event was generated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
218 14 Dtool_v_mB3Y9y 0 6 219 535 0 14 Dtool_v_mB3Y9y 330 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::has_mouse
//       Access: Published
//  Description: Returns true if this parameter has an associated
//               mouse position, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
219 14 Dtool_v_mBnFpl 0 6 220 585 0 14 Dtool_v_mBnFpl 425 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::get_mouse
//       Access: Published
//  Description: Returns the mouse position at the time the event was
//               generated, in the normalized range (-1 .. 1).  It is
//               valid to call this only if has_mouse() returned true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
220 14 Dtool_v_mBCuZd 0 6 221 535 0 14 Dtool_v_mBCuZd 415 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::is_outside
//       Access: Published
//  Description: Returns true if the mouse was outside the region at
//               the time the event was generated, false otherwise.
//               This is only valid for "release" type events.
//////////////////////////////////////////////////////////////////// 1 4 this 3 605  
221 14 Dtool_v_mBP1BE 0 4 222 532 0 14 Dtool_v_mBP1BE 229 ////////////////////////////////////////////////////////////////////
//     Function: MouseWatcherParameter::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 605  3 out 1 572  
222 14 Dtool_v_mBFM2w 0 7 224 610 0 14 Dtool_v_mBFM2w 218 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 530  
223 14 Dtool_v_mBQM3x 0 4 225 532 0 14 Dtool_v_mBQM3x 257 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset
//       Access: Published
//  Description: Reinitializes all transforms to identity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 610  
224 14 Dtool_v_mBylhr 0 6 226 551 0 14 Dtool_v_mBylhr 335 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_forward_scale
//       Access: Published
//  Description: Returns the scale factor applied to forward and
//               backward motion.  See set_forward_scale().
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
225 14 Dtool_v_mBeGTT 0 4 227 532 0 14 Dtool_v_mBeGTT 435 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_forward_scale
//       Access: Published
//  Description: Changes the scale factor applied to forward and
//               backward motion.  The larger this number, the faster
//               the model will move in response to dollying in and
//               out.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  8 fwdscale 1 551  
226 14 Dtool_v_mBAeAL 0 6 228 554 0 14 Dtool_v_mBAeAL 264 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_pos
//       Access: Published
//  Description: Return the offset from the center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
227 14 Dtool_v_mB2VRC 0 6 229 551 0 14 Dtool_v_mB2VRC 0 1 4 this 3 611  
228 14 Dtool_v_mB_EbC 0 6 230 551 0 14 Dtool_v_mB_EbC 0 1 4 this 3 611  
229 14 Dtool_v_mBm3kC 0 6 231 551 0 14 Dtool_v_mBm3kC 0 1 4 this 3 611  
230 14 Dtool_v_mB2sA5 0 4 232 532 0 14 Dtool_v_mB2sA5 269 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_pos
//       Access: Published
//  Description: Directly set the offset from the rotational origin.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  3 vec 1 557  
231 14 Dtool_v_mBSryu 0 4 232 532 0 14 Dtool_v_mBSryu 0 4 4 this 3 610  1 x 1 551  1 y 1 551  1 z 1 551  
232 14 Dtool_v_mBCF66 0 4 233 532 0 14 Dtool_v_mBCF66 0 2 4 this 3 610  1 x 1 551  
233 14 Dtool_v_mBa0E7 0 4 234 532 0 14 Dtool_v_mBa0E7 0 2 4 this 3 610  1 y 1 551  
234 14 Dtool_v_mBSnO7 0 4 235 532 0 14 Dtool_v_mBSnO7 0 2 4 this 3 610  1 z 1 551  
235 14 Dtool_v_mB9kcy 0 7 236 613 0 14 Dtool_v_mB9kcy 253 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_hpr
//       Access: Published
//  Description: Return the trackball's orientation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
236 14 Dtool_v_mB1H1_ 0 6 237 551 0 14 Dtool_v_mB1H1_ 0 1 4 this 3 611  
237 14 Dtool_v_mB2MDB 0 6 238 551 0 14 Dtool_v_mB2MDB 0 1 4 this 3 611  
238 14 Dtool_v_mBmuWB 0 6 239 551 0 14 Dtool_v_mBmuWB 0 1 4 this 3 611  
239 14 Dtool_v_mBw7cg 0 4 240 532 0 14 Dtool_v_mBw7cg 255 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_hpr
//       Access: Published
//  Description: Directly set the mover's orientation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  3 hpr 1 557  
240 14 Dtool_v_mBQARW 0 4 240 532 0 14 Dtool_v_mBQARW 0 4 4 this 3 610  1 h 1 551  1 p 1 551  1 r 1 551  
241 14 Dtool_v_mBC3e4 0 4 241 532 0 14 Dtool_v_mBC3e4 0 2 4 this 3 610  1 h 1 551  
242 14 Dtool_v_mBCMs5 0 4 242 532 0 14 Dtool_v_mBCMs5 0 2 4 this 3 610  1 p 1 551  
243 14 Dtool_v_mBSuA6 0 4 243 532 0 14 Dtool_v_mBSuA6 0 2 4 this 3 610  1 r 1 551  
244 14 Dtool_v_mBQuKj 0 4 244 532 0 14 Dtool_v_mBQuKj 396 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::reset_origin_here
//       Access: Published
//  Description: Reposition the center of rotation to coincide with
//               the current translation offset.  Future rotations
//               will be about the current origin.
//////////////////////////////////////////////////////////////////// 1 4 this 3 610  
245 14 Dtool_v_mBgy67 0 4 245 532 0 14 Dtool_v_mBgy67 271 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::move_origin
//       Access: Published
//  Description: Moves the center of rotation by the given amount.
//////////////////////////////////////////////////////////////////// 4 4 this 3 610  1 x 1 551  1 y 1 551  1 z 1 551  
246 14 Dtool_v_mB8Sdj 0 7 246 614 0 14 Dtool_v_mB8Sdj 260 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_origin
//       Access: Published
//  Description: Returns the current center of rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
247 14 Dtool_v_mBszQ3 0 4 247 532 0 14 Dtool_v_mBszQ3 258 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_origin
//       Access: Published
//  Description: Directly sets the center of rotation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  6 origin 1 557  
248 14 Dtool_v_mBlxsW 0 4 249 532 0 14 Dtool_v_mBlxsW 654 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_control_mode
//       Access: Published
//  Description: Sets the control mode.  Normally this is CM_default,
//               which means each mouse button serves its normal
//               function.  When it is CM_truck, CM_pan, CM_dolly, or
//               CM_roll, all of the mouse buttons serve the indicated
//               function instead of their normal function.  This can
//               be used in conjunction with some external way of
//               changing modes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  12 control_mode 1 528  
249 14 Dtool_v_mBKl1v 0 6 250 528 0 14 Dtool_v_mBKl1v 277 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_control_mode
//       Access: Published
//  Description: Returns the control mode.  See set_control_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
250 14 Dtool_v_mBUESo 0 4 251 532 0 14 Dtool_v_mBUESo 403 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_invert
//       Access: Published
//  Description: Sets the invert flag.  When this is set, the inverse
//               matrix is generated, suitable for joining to a
//               camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  4 flag 1 535  
251 14 Dtool_v_mBP3xR 0 6 252 535 0 14 Dtool_v_mBP3xR 406 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_invert
//       Access: Published
//  Description: Returns the invert flag.  When this is set, the
//               inverse matrix is generated, suitable for joining to
//               a camera, instead of parenting the scene under it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
252 14 Dtool_v_mBlgYv 0 4 253 532 0 14 Dtool_v_mBlgYv 561 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_rel_to
//       Access: Published
//  Description: Sets the NodePath that all trackball manipulations
//               are to be assumed to be relative to.  For instance,
//               set your camera node here to make the trackball
//               motion camera relative.  The default is the empty
//               path, which means trackball motion is in global
//               space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  6 rel_to 1 579  
253 14 Dtool_v_mBMggh 0 6 254 579 0 14 Dtool_v_mBMggh 327 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_rel_to
//       Access: Published
//  Description: Returns the NodePath that all trackball manipulations
//               are relative to, or the empty path.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
254 14 Dtool_v_mB2veS 0 4 255 532 0 14 Dtool_v_mB2veS 524 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_coordinate_system
//       Access: Published
//  Description: Sets the coordinate system of the Trackball.
//               Normally, this is the default coordinate system.
//               This changes the axes the Trackball manipulates so
//               that the user interface remains consistent across
//               different coordinate systems.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  2 cs 1 615  
255 14 Dtool_v_mB5ZF5 0 6 256 615 0 14 Dtool_v_mB5ZF5 325 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system of the Trackball.
//               See set_coordinate_system().
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
256 14 Dtool_v_mBinab 0 4 257 532 0 14 Dtool_v_mBinab 368 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::set_mat
//       Access: Published
//  Description: Stores the indicated transform in the trackball.
//               This is a transform in global space, regardless of
//               the rel_to node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 610  3 mat 1 560  
257 14 Dtool_v_mBZ1ai 0 6 258 560 0 14 Dtool_v_mBZ1ai 292 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_mat
//       Access: Published
//  Description: Returns the matrix represented by the trackball
//               rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
258 14 Dtool_v_mBWvGL 0 6 259 560 0 14 Dtool_v_mBWvGL 387 ////////////////////////////////////////////////////////////////////
//     Function: Trackball::get_trans_mat
//       Access: Published
//  Description: Returns the actual transform that will be applied to
//               the scene graph.  This is the same as get_mat(),
//               unless invert is in effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 611  
259 14 Dtool_v_mBATvH 0 7 260 548 0 14 Dtool_v_mBATvH 0 0 
260 14 Dtool_v_mBDG5A 0 7 262 616 514 14 Dtool_v_mBDG5A 221 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 530  
261 14 Dtool_v_mBdpGS 0 4 263 532 0 14 Dtool_v_mBdpGS 262 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::set_node
//       Access: Public
//  Description: Sets the node that this object will adjust.
//////////////////////////////////////////////////////////////////// 2 4 this 3 616  4 node 1 589  
262 14 Dtool_v_mBCzs4 0 7 264 589 0 14 Dtool_v_mBCzs4 324 ////////////////////////////////////////////////////////////////////
//     Function: Transform2SG::get_node
//       Access: Public
//  Description: Returns the node that this object will adjust, or NULL
//               if the node has not yet been set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 617  
263 14 Dtool_v_mBDfAE 0 7 265 548 0 14 Dtool_v_mBDfAE 0 0 
104
515 13 ButtonThrower 0 75777 13 ButtonThrower 13 ButtonThrower 0 0 0 1 264 0 0 34 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 1 619 0 1 0 516 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : ButtonThrower
// Description : Throws Panda Events for button down/up events
//               generated within the data graph.
//
//               This is a DataNode which is intended to be parented
//               to the data graph below a device which is generating
//               a sequence of button events, like a MouseAndKeyboard
//               device.  It simply takes each button it finds and
//               throws a corresponding event based on the button name
//               via the throw_event() call.
////////////////////////////////////////////////////////////////////

516 8 DataNode 0 2049 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 695
////////////////////////////////////////////////////////////////////
//       Class : DataNode
// Description : The fundamental type of node for the data graph.  The
//               DataNode class is itself primarily intended as an
//               abstract class; it defines no inputs and no outputs.
//               Most kinds of data nodes will derive from this to
//               specify the inputs and outputs in the constructor.
//
//               DataNode does not attempt to cycle its data with a
//               PipelineCycler.  The data graph is intended to be
//               used only within a single thread.
////////////////////////////////////////////////////////////////////

517 18 MouseInterfaceNode 0 75777 18 MouseInterfaceNode 18 MouseInterfaceNode 0 0 0 0 0 0 4 299 300 301 302 0 0 1 0 516 0 0 0 0 488
////////////////////////////////////////////////////////////////////
//       Class : MouseInterfaceNode
// Description : This is the base class for some classes that monitor
//               the mouse and keyboard input and perform some action
//               due to their state.
//
//               It collects together some common interface; in
//               particular, the require_button() and related methods.
////////////////////////////////////////////////////////////////////

518 14 DriveInterface 0 75777 14 DriveInterface 14 DriveInterface 0 0 0 1 303 0 0 48 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 0 0 1 0 517 0 0 0 0 411
////////////////////////////////////////////////////////////////////
//       Class : DriveInterface
// Description : This is a TFormer, similar to Trackball, that moves
//               around a transform matrix in response to mouse input.
//               The basic motion is on a horizontal plane, as if
//               driving a vehicle.
////////////////////////////////////////////////////////////////////

519 14 MouseSubregion 0 75777 14 MouseSubregion 14 MouseSubregion 0 0 0 1 352 0 0 6 353 354 355 356 357 358 0 0 1 0 517 0 0 0 0 587
////////////////////////////////////////////////////////////////////
//       Class : MouseSubregion
// Description : The MouseSubregion object scales the mouse inputs
//               from within a rectangular region of the screen, as if
//               they were the full-screen inputs.
//
//               If you choose your MouseSubregion coordinates to
//               exactly match a DisplayRegion within your window, you
//               end up with a virtual mouse within your
//               DisplayRegion.
////////////////////////////////////////////////////////////////////

520 18 MouseWatcherRegion 0 141313 18 MouseWatcherRegion 18 MouseWatcherRegion 0 0 0 1 363 378 0 14 364 365 366 367 368 369 370 371 372 373 374 375 376 377 0 0 2 3 521 359 360 3 522 361 362 0 1 523 295
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherRegion
// Description : This is the class that defines a rectangular region
//               on the screen for the MouseWatcher.
////////////////////////////////////////////////////////////////////

521 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 722
////////////////////////////////////////////////////////////////////
//       Class : TypedWritableReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedWritable and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedWritables and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

522 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

523 13 SuppressFlags 0 794624 33 MouseWatcherRegion::SuppressFlags 33 MouseWatcherRegion::SuppressFlags 520 0 0 0 0 0 0 0 0 0 4 15 SF_mouse_button 35 MouseWatcherRegion::SF_mouse_button 0
1 15 SF_other_button 35 MouseWatcherRegion::SF_other_button 0
2 13 SF_any_button 33 MouseWatcherRegion::SF_any_button 0
3 17 SF_mouse_position 37 MouseWatcherRegion::SF_mouse_position 0
4 0 0

524 16 MouseWatcherBase 0 26625 16 MouseWatcherBase 16 MouseWatcherBase 0 0 0 0 379 0 16 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 1 620 0 0 0 0 507
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherBase
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.  This is the base
//               class for both MouseWatcherGroup and MouseWatcher,
//               and exists so that we don't have to make MouseWatcher
//               inherit from ReferenceCount more than once.
////////////////////////////////////////////////////////////////////

525 12 MouseWatcher 0 26625 12 MouseWatcher 12 MouseWatcher 0 0 0 1 400 401 0 56 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 1 621 0 2 3 516 396 397 3 524 398 399 0 0 1625
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcher
// Description : This TFormer maintains a list of rectangular regions
//               on the screen that are considered special mouse
//               regions; typically these will be click buttons.  When
//               the mouse passes in or out of one of these regions,
//               or when a button is clicked while the mouse is in one
//               of these regions, an event is thrown.
//
//               Mouse events may also be suppressed from the rest of
//               the datagraph in these special regions.
//
//               This class can also implement a software mouse
//               pointer by automatically generating a transform to
//               apply to a piece of geometry placed under the 2-d
//               scene graph.  It will move the geometry around
//               according to the mouse's known position.
//
//               Finally, this class can keep a record of the mouse
//               trail.  This is useful if you want to know, not just
//               where the mouse is, but the exact sequence of movements
//               it took to get there.  This information is mainly useful
//               for gesture-recognition code.  To use trail logging,
//               you need to enable the generation of pointer events
//               in the GraphicsWindowInputDevice and set the trail
//               log duration in the MouseWatcher. Otherwise, the
//               trail log will be empty.
////////////////////////////////////////////////////////////////////

526 21 MouseWatcherParameter 0 26625 21 MouseWatcherParameter 21 MouseWatcherParameter 0 0 0 0 458 0 15 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 0 0 0 0 0 353
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherParameter
// Description : This is sent along as a parameter to most events
//               generated for a region to indicate the mouse and
//               button state for the event.
////////////////////////////////////////////////////////////////////

527 9 Trackball 0 75777 9 Trackball 9 Trackball 0 0 0 1 474 0 0 35 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 0 0 1 0 517 0 0 0 1 528 702
////////////////////////////////////////////////////////////////////
//       Class : Trackball
// Description : Trackball acts like Performer in trackball mode.  It
//               can either spin around a piece of geometry directly,
//               or it can spin around a camera with the inverse
//               transform to make it appear that the whole world is
//               spinning.
//
//               The Trackball object actually just places a transform
//               in the data graph; parent a Transform2SG node under
//               it to actually transform objects (or cameras) in the
//               world.
////////////////////////////////////////////////////////////////////

528 11 ControlMode 0 794624 22 Trackball::ControlMode 22 Trackball::ControlMode 527 0 0 0 0 0 0 0 0 0 5 10 CM_default 21 Trackball::CM_default 0
0 8 CM_truck 19 Trackball::CM_truck 19
// Normally mouse 1
1 6 CM_pan 17 Trackball::CM_pan 19
// Normally mouse 2
2 8 CM_dolly 19 Trackball::CM_dolly 19
// Normally mouse 3
3 7 CM_roll 18 Trackball::CM_roll 23
// Normally mouse 2 + 3
4 0 0

529 12 Transform2SG 0 141313 12 Transform2SG 12 Transform2SG 0 0 0 1 510 514 0 3 511 512 513 0 0 1 0 516 0 0 0 0 348
////////////////////////////////////////////////////////////////////
//       Class : Transform2SG
// Description : input: Transform (matrix)
//
//               output: none, but applies the matrix as the transform
//               transition for a given arc of the scene graph.
////////////////////////////////////////////////////////////////////

530 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

531 15 ButtonThrower * 0 8576 15 ButtonThrower * 15 ButtonThrower * 0 0 515 0 0 0 0 0 0 0 0 0 0

532 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

533 21 ButtonThrower const * 0 8576 21 ButtonThrower const * 21 ButtonThrower const * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 19 ButtonThrower const 0 8832 19 ButtonThrower const 19 ButtonThrower const 0 0 515 0 0 0 0 0 0 0 0 0 0

535 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

536 22 EventParameter const * 0 8576 22 EventParameter const * 22 EventParameter const * 0 0 537 0 0 0 0 0 0 0 0 0 0

537 20 EventParameter const 0 8832 20 EventParameter const 20 EventParameter const 0 0 538 0 0 0 0 0 0 0 0 0 0

538 14 EventParameter 0 2048 14 EventParameter 14 EventParameter 0 0 0 0 0 0 0 0 0 0 0 0 652
////////////////////////////////////////////////////////////////////
//       Class : EventParameter
// Description : An optional parameter associated with an event.  Each
//               event may have zero or more of these.  Each parameter
//               stores a pointer to a TypedWritableReferenceCount
//               object, which of course could be pretty much
//               anything.  To store a simple value like a double or a
//               string, the EventParameter constructors transparently
//               use the ParamValue template class from paramValue.h.
////////////////////////////////////////////////////////////////////

539 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

540 16 EventParameter * 0 8576 16 EventParameter * 16 EventParameter * 0 0 538 0 0 0 0 0 0 0 0 0 0

541 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 542 0 0 0 0 0 0 0 0 0 0

542 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 543 0 0 0 0 0 0 0 0 0 0

543 15 ModifierButtons 0 2048 15 ModifierButtons 15 ModifierButtons 0 0 0 0 0 0 0 1 622 0 0 0 0 343
////////////////////////////////////////////////////////////////////
//       Class : ModifierButtons
// Description : This class monitors the state of a number of
//               individual buttons and tracks whether each button is
//               known to be down or up.
////////////////////////////////////////////////////////////////////

544 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 545 0 0 0 0 0 0 0 0 0 0

545 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 546 0 0 0 0 0 0 0 0 0 0

546 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

547 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

548 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 547 0 0 0 0 0 0 0 0 0 0

549 20 MouseInterfaceNode * 0 8576 20 MouseInterfaceNode * 20 MouseInterfaceNode * 0 0 517 0 0 0 0 0 0 0 0 0 0

550 16 DriveInterface * 0 8576 16 DriveInterface * 16 DriveInterface * 0 0 518 0 0 0 0 0 0 0 0 0 0

551 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

552 22 DriveInterface const * 0 8576 22 DriveInterface const * 22 DriveInterface const * 0 0 553 0 0 0 0 0 0 0 0 0 0

553 20 DriveInterface const 0 8832 20 DriveInterface const 20 DriveInterface const 0 0 518 0 0 0 0 0 0 0 0 0 0

554 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 555 0 0 0 0 0 0 0 0 0 0

555 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 556 0 0 0 0 0 0 0 0 0 0

556 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

557 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 558 0 0 0 0 0 0 0 0 0 0

558 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 559 0 0 0 0 0 0 0 0 0 0

559 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

560 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 561 0 0 0 0 0 0 0 0 0 0

561 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 562 0 0 0 0 0 0 0 0 0 0

562 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 623 624 625 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

563 16 MouseSubregion * 0 8576 16 MouseSubregion * 16 MouseSubregion * 0 0 519 0 0 0 0 0 0 0 0 0 0

564 22 MouseSubregion const * 0 8576 22 MouseSubregion const * 22 MouseSubregion const * 0 0 565 0 0 0 0 0 0 0 0 0 0

565 20 MouseSubregion const 0 8832 20 MouseSubregion const 20 MouseSubregion const 0 0 519 0 0 0 0 0 0 0 0 0 0

566 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 567 0 0 0 0 0 0 0 0 0 0

567 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 568 0 0 0 0 0 0 0 0 0 0

568 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

569 20 MouseWatcherRegion * 0 8576 20 MouseWatcherRegion * 20 MouseWatcherRegion * 0 0 520 0 0 0 0 0 0 0 0 0 0

570 26 MouseWatcherRegion const * 0 8576 26 MouseWatcherRegion const * 26 MouseWatcherRegion const * 0 0 571 0 0 0 0 0 0 0 0 0 0

571 24 MouseWatcherRegion const 0 8832 24 MouseWatcherRegion const 24 MouseWatcherRegion const 0 0 520 0 0 0 0 0 0 0 0 0 0

572 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 573 0 0 0 0 0 0 0 0 0 0

573 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

574 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 521 0 0 0 0 0 0 0 0 0 0

575 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 522 0 0 0 0 0 0 0 0 0 0

576 18 MouseWatcherBase * 0 8576 18 MouseWatcherBase * 18 MouseWatcherBase * 0 0 524 0 0 0 0 0 0 0 0 0 0

577 24 MouseWatcherBase const * 0 8576 24 MouseWatcherBase const * 24 MouseWatcherBase const * 0 0 578 0 0 0 0 0 0 0 0 0 0

578 22 MouseWatcherBase const 0 8832 22 MouseWatcherBase const 22 MouseWatcherBase const 0 0 524 0 0 0 0 0 0 0 0 0 0

579 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 580 0 0 0 0 0 0 0 0 0 0

580 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 581 0 0 0 0 0 0 0 0 0 0

581 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 626 627 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

582 14 MouseWatcher * 0 8576 14 MouseWatcher * 14 MouseWatcher * 0 0 525 0 0 0 0 0 0 0 0 0 0

583 20 MouseWatcher const * 0 8576 20 MouseWatcher const * 20 MouseWatcher const * 0 0 584 0 0 0 0 0 0 0 0 0 0

584 18 MouseWatcher const 0 8832 18 MouseWatcher const 18 MouseWatcher const 0 0 525 0 0 0 0 0 0 0 0 0 0

585 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 586 0 0 0 0 0 0 0 0 0 0

586 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 587 0 0 0 0 0 0 0 0 0 0

587 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

588 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 546 0 0 0 0 0 0 0 0 0 0

589 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 590 0 0 0 0 0 0 0 0 0 0

590 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 628 629 630 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

591 14 EventHandler * 0 8576 14 EventHandler * 14 EventHandler * 0 0 592 0 0 0 0 0 0 0 0 0 0

592 12 EventHandler 0 2048 12 EventHandler 12 EventHandler 0 0 0 0 0 0 0 0 0 0 0 0 678
////////////////////////////////////////////////////////////////////
//       Class : EventHandler
// Description : A class to monitor events from the C++ side of
//               things.  It maintains a set of "hooks", function
//               pointers assigned to event names, and calls the
//               appropriate hooks when the matching event is
//               detected.
//
//               This class is not necessary when the hooks are
//               detected and processed entirely by the scripting
//               language, e.g. via Scheme hooks or the messenger
//               in Python.
////////////////////////////////////////////////////////////////////

593 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 543 0 0 0 0 0 0 0 0 0 0

594 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 595 0 0 0 0 0 0 0 0 0 0

595 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

596 19 MouseWatcherGroup * 0 8576 19 MouseWatcherGroup * 19 MouseWatcherGroup * 0 0 597 0 0 0 0 0 0 0 0 0 0

597 17 MouseWatcherGroup 0 1050624 17 MouseWatcherGroup 17 MouseWatcherGroup 0 0 0 0 0 0 0 0 0 0 0 0 439
////////////////////////////////////////////////////////////////////
//       Class : MouseWatcherGroup
// Description : This represents a collection of MouseWatcherRegions
//               that may be managed as a group.  The implementation
//               for this is in MouseWatcherBase; this class exists
//               so that we can inherit from ReferenceCount.
////////////////////////////////////////////////////////////////////

598 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

599 22 PointerEventList const 0 8832 22 PointerEventList const 22 PointerEventList const 0 0 600 0 0 0 0 0 0 0 0 0 0

600 16 PointerEventList 0 2048 16 PointerEventList 16 PointerEventList 0 0 0 0 0 0 0 0 0 0 0 0 468
////////////////////////////////////////////////////////////////////
//       Class : PointerEventList
// Description : Records a set of pointer events that happened
//               recently.  This class is usually used only in the
//               data graph, to transmit the recent pointer presses,
//               but it may be used anywhere a list of PointerEvents
//               is desired.
////////////////////////////////////////////////////////////////////

601 24 PointerEventList const * 0 8576 24 PointerEventList const * 24 PointerEventList const * 0 0 599 0 0 0 0 0 0 0 0 0 0

602 8 GeomNode 0 2048 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 3 631 632 633 0 0 0 0 423
////////////////////////////////////////////////////////////////////
//       Class : GeomNode
// Description : A node that holds Geom objects, renderable pieces of
//               geometry.  This is the primary kind of leaf node in
//               the scene graph; almost all visible objects will be
//               contained in a GeomNode somewhere.
////////////////////////////////////////////////////////////////////

603 10 GeomNode * 0 8576 10 GeomNode * 10 GeomNode * 0 0 602 0 0 0 0 0 0 0 0 0 0

604 10 DataNode * 0 8576 10 DataNode * 10 DataNode * 0 0 516 0 0 0 0 0 0 0 0 0 0

605 29 MouseWatcherParameter const * 0 8576 29 MouseWatcherParameter const * 29 MouseWatcherParameter const * 0 0 606 0 0 0 0 0 0 0 0 0 0

606 27 MouseWatcherParameter const 0 8832 27 MouseWatcherParameter const 27 MouseWatcherParameter const 0 0 526 0 0 0 0 0 0 0 0 0 0

607 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 608 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

608 11 TextEncoder 0 2048 11 TextEncoder 11 TextEncoder 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

609 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

610 11 Trackball * 0 8576 11 Trackball * 11 Trackball * 0 0 527 0 0 0 0 0 0 0 0 0 0

611 17 Trackball const * 0 8576 17 Trackball const * 17 Trackball const * 0 0 612 0 0 0 0 0 0 0 0 0 0

612 15 Trackball const 0 8832 15 Trackball const 15 Trackball const 0 0 527 0 0 0 0 0 0 0 0 0 0

613 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 559 0 0 0 0 0 0 0 0 0 0

614 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 556 0 0 0 0 0 0 0 0 0 0

615 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

616 14 Transform2SG * 0 8576 14 Transform2SG * 14 Transform2SG * 0 0 529 0 0 0 0 0 0 0 0 0 0

617 20 Transform2SG const * 0 8576 20 Transform2SG const * 20 Transform2SG const * 0 0 618 0 0 0 0 0 0 0 0 0 0

618 18 Transform2SG const 0 8832 18 Transform2SG const 18 Transform2SG const 0 0 529 0 0 0 0 0 0 0 0 0 0

0
0
15
619 0 0 1 14 get_parameters 18 get_num_parameters 13 get_parameter 
620 0 0 125 11 get_regions 15 get_num_regions 10 get_region 
621 0 0 143 10 get_groups 14 get_num_groups 9 get_group 
622 0 0 307 11 get_buttons 15 get_num_buttons 10 get_button 
623 0 0 389 8 get_rows 4 size 7 get_row 
624 0 0 389 8 get_cols 4 size 7 get_col 
625 0 0 389 9 get_row3s 4 size 8 get_row3 
626 0 0 453 9 get_nodes 13 get_num_nodes 8 get_node 
627 0 0 453 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
628 0 0 500 11 get_parents 15 get_num_parents 10 get_parent 
629 0 0 500 12 get_children 16 get_num_children 9 get_child 
630 0 0 500 11 get_stashed 15 get_num_stashed 11 get_stashed 
631 0 0 537 9 get_geoms 13 get_num_geoms 8 get_geom 
632 0 0 537 12 modify_geoms 13 get_num_geoms 11 modify_geom 
633 0 0 537 15 get_geom_states 13 get_num_geoms 14 get_geom_state 
