1430659598
2 3
12 libp3linmath 4 Ns0b 12 panda3d.core 
1520
2051 12 ~MathNumbers 0 4 3571 25 MathNumbers::~MathNumbers 0 0 0
32
MathNumbers::~MathNumbers(void);

2052 9 deg_2_rad 0 1 0 9 deg_2_rad 0 2 1916 1917 0
67
inline double deg_2_rad(double f);
inline float deg_2_rad(float f);

2053 9 rad_2_deg 0 1 0 9 rad_2_deg 0 2 1918 1919 0
67
inline double rad_2_deg(double f);
inline float rad_2_deg(float f);

2054 10 LVecBase2f 0 4 3572 22 LVecBase2f::LVecBase2f 0 4 1 2 3 4 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
189
inline LVecBase2f::LVecBase2f(void);
inline LVecBase2f::LVecBase2f(LVecBase2f const &copy);
inline LVecBase2f::LVecBase2f(float fill_value);
inline LVecBase2f::LVecBase2f(float x, float y);

2055 10 operator = 0 4 3572 22 LVecBase2f::operator = 0 2 5 6 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase2f &LVecBase2f::operator =(LVecBase2f const &copy);
inline LVecBase2f &LVecBase2f::operator =(float fill_value);

2056 12 operator new 0 4 3572 24 LVecBase2f::operator new 0 1 7 0
126
inline void *LVecBase2f::operator new(unsigned int size);
inline void *LVecBase2f::operator new(unsigned int size, void *ptr);

2057 15 operator delete 0 4 3572 27 LVecBase2f::operator delete 0 0 0
108
inline void LVecBase2f::operator delete(void *ptr);
inline void LVecBase2f::operator delete(void *, void *);

2058 12 validate_ptr 0 4 3572 24 LVecBase2f::validate_ptr 0 0 0
61
static inline bool LVecBase2f::validate_ptr(void const *ptr);

2059 4 zero 0 4 3572 16 LVecBase2f::zero 0 1 8 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2f const &LVecBase2f::zero(void);

2060 6 unit_x 0 4 3572 18 LVecBase2f::unit_x 0 1 9 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_x(void);

2061 6 unit_y 0 4 3572 18 LVecBase2f::unit_y 0 1 10 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2f const &LVecBase2f::unit_y(void);

2062 11 ~LVecBase2f 0 4 3572 23 LVecBase2f::~LVecBase2f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2f::~LVecBase2f(void);

2063 10 __reduce__ 0 4 3572 22 LVecBase2f::__reduce__ 0 1 11 0
60
inline _object *LVecBase2f::__reduce__(_object *self) const;

2064 11 __getattr__ 0 4 3572 23 LVecBase2f::__getattr__ 0 1 12 0
85
inline _object *LVecBase2f::__getattr__(basic_string< char > const &attr_name) const;

2065 11 __setattr__ 0 4 3572 23 LVecBase2f::__setattr__ 0 1 13 0
106
inline int LVecBase2f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2066 11 operator [] 0 4 3572 23 LVecBase2f::operator [] 0 2 14 15 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase2f::operator [](int i) const;
inline float &LVecBase2f::operator [](int i);

2067 11 __setitem__ 0 4 3572 23 LVecBase2f::__setitem__ 0 1 16 0
52
inline void LVecBase2f::__setitem__(int i, float v);

2068 4 size 0 4 3572 16 LVecBase2f::size 0 1 17 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2f::size(void);

2069 6 is_nan 0 4 3572 18 LVecBase2f::is_nan 0 1 18 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2f::is_nan(void) const;

2070 8 get_cell 0 4 3572 20 LVecBase2f::get_cell 0 1 19 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase2f::get_cell(int i) const;

2071 5 get_x 0 4 3572 17 LVecBase2f::get_x 0 1 20 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_x(void) const;

2072 5 get_y 0 4 3572 17 LVecBase2f::get_y 0 1 21 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase2f::get_y(void) const;

2073 8 set_cell 0 4 3572 20 LVecBase2f::set_cell 0 1 22 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase2f::set_cell(int i, float value);

2074 5 set_x 0 4 3572 17 LVecBase2f::set_x 0 1 23 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_x(float value);

2075 5 set_y 0 4 3572 17 LVecBase2f::set_y 0 1 24 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::set_y(float value);

2076 11 add_to_cell 0 4 3572 23 LVecBase2f::add_to_cell 0 1 25 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase2f::add_to_cell(int i, float value);

2077 5 add_x 0 4 3572 17 LVecBase2f::add_x 0 1 26 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_x(float value);

2078 5 add_y 0 4 3572 17 LVecBase2f::add_y 0 1 27 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase2f::add_y(float value);

2079 8 get_data 0 4 3572 20 LVecBase2f::get_data 0 1 28 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase2f::get_data(void) const;

2080 18 get_num_components 0 4 3572 30 LVecBase2f::get_num_components 0 1 29 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2f::get_num_components(void) const;

2081 4 fill 0 4 3572 16 LVecBase2f::fill 0 1 30 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase2f::fill(float fill_value);

2082 3 set 0 4 3572 15 LVecBase2f::set 0 1 31 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline void LVecBase2f::set(float x, float y);

2083 3 dot 0 4 3572 15 LVecBase2f::dot 0 1 32 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase2f::dot(LVecBase2f const &other) const;

2084 14 length_squared 0 4 3572 26 LVecBase2f::length_squared 0 1 33 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase2f::length_squared(void) const;

2085 6 length 0 4 3572 18 LVecBase2f::length 0 1 34 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase2f::length(void) const;

2086 9 normalize 0 4 3572 21 LVecBase2f::normalize 0 1 35 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2f::normalize(void);

2087 7 project 0 4 3572 19 LVecBase2f::project 0 1 36 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LVecBase2f::project(LVecBase2f const &onto) const;

2088 10 operator < 0 4 3572 22 LVecBase2f::operator < 0 1 37 0
66
inline bool LVecBase2f::operator <(LVecBase2f const &other) const;

2089 11 operator == 0 4 3572 23 LVecBase2f::operator == 0 1 38 0
67
inline bool LVecBase2f::operator ==(LVecBase2f const &other) const;

2090 11 operator != 0 4 3572 23 LVecBase2f::operator != 0 1 39 0
67
inline bool LVecBase2f::operator !=(LVecBase2f const &other) const;

2091 10 compare_to 0 4 3572 22 LVecBase2f::compare_to 0 2 40 41 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase2f::compare_to(LVecBase2f const &other) const;
inline int LVecBase2f::compare_to(LVecBase2f const &other, float threshold) const;

2092 8 get_hash 0 4 3572 20 LVecBase2f::get_hash 0 2 42 43 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase2f::get_hash(void) const;
inline unsigned int LVecBase2f::get_hash(float threshold) const;

2093 8 add_hash 0 4 3572 20 LVecBase2f::add_hash 0 2 44 45 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase2f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2f::add_hash(unsigned int hash, float threshold) const;

2094 13 generate_hash 0 4 3572 25 LVecBase2f::generate_hash 0 2 46 47 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2095 10 operator - 0 68 3572 22 LVecBase2f::operator - 0 1 48 0
53
inline LVecBase2f LVecBase2f::operator -(void) const;

2096 10 operator + 0 4 3572 22 LVecBase2f::operator + 0 1 49 0
72
inline LVecBase2f LVecBase2f::operator +(LVecBase2f const &other) const;

2097 10 operator - 0 4 3572 22 LVecBase2f::operator - 0 1 50 0
72
inline LVecBase2f LVecBase2f::operator -(LVecBase2f const &other) const;

2098 10 operator * 0 4 3572 22 LVecBase2f::operator * 0 1 51 0
61
inline LVecBase2f LVecBase2f::operator *(float scalar) const;

2099 10 operator / 0 4 3572 22 LVecBase2f::operator / 0 1 52 0
61
inline LVecBase2f LVecBase2f::operator /(float scalar) const;

2100 11 operator += 0 4 3572 23 LVecBase2f::operator += 0 1 53 0
61
inline void LVecBase2f::operator +=(LVecBase2f const &other);

2101 11 operator -= 0 4 3572 23 LVecBase2f::operator -= 0 1 54 0
61
inline void LVecBase2f::operator -=(LVecBase2f const &other);

2102 11 operator *= 0 4 3572 23 LVecBase2f::operator *= 0 1 55 0
50
inline void LVecBase2f::operator *=(float scalar);

2103 11 operator /= 0 4 3572 23 LVecBase2f::operator /= 0 1 56 0
50
inline void LVecBase2f::operator /=(float scalar);

2104 18 componentwise_mult 0 4 3572 30 LVecBase2f::componentwise_mult 0 1 57 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::componentwise_mult(LVecBase2f const &other);

2105 7 __pow__ 0 4 3572 19 LVecBase2f::__pow__ 0 1 58 0
60
inline LVecBase2f LVecBase2f::__pow__(float exponent) const;

2106 8 __ipow__ 0 4 3572 20 LVecBase2f::__ipow__ 0 1 59 0
68
inline _object *LVecBase2f::__ipow__(_object *self, float exponent);

2107 4 fmax 0 4 3572 16 LVecBase2f::fmax 0 1 60 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LVecBase2f::fmax(LVecBase2f const &other) const;

2108 4 fmin 0 4 3572 16 LVecBase2f::fmin 0 1 61 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2f LVecBase2f::fmin(LVecBase2f const &other) const;

2109 12 almost_equal 0 4 3572 24 LVecBase2f::almost_equal 0 2 62 63 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase2f::almost_equal(LVecBase2f const &other, float threshold) const;
inline bool LVecBase2f::almost_equal(LVecBase2f const &other) const;

2110 6 output 0 4 3572 18 LVecBase2f::output 0 1 64 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2f::output(ostream &out) const;

2111 11 python_repr 0 4 3572 23 LVecBase2f::python_repr 0 1 65 0
96
inline void LVecBase2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2112 20 write_datagram_fixed 0 4 3572 32 LVecBase2f::write_datagram_fixed 0 1 66 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2f::write_datagram_fixed(Datagram &destination) const;

2113 19 read_datagram_fixed 0 4 3572 31 LVecBase2f::read_datagram_fixed 0 1 67 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2f::read_datagram_fixed(DatagramIterator &source);

2114 14 write_datagram 0 4 3572 26 LVecBase2f::write_datagram 0 1 68 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2f::write_datagram(Datagram &destination) const;

2115 13 read_datagram 0 4 3572 25 LVecBase2f::read_datagram 0 1 69 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2f::read_datagram(DatagramIterator &source);

2116 14 get_class_type 0 4 3572 26 LVecBase2f::get_class_type 0 1 70 0
51
static TypeHandle LVecBase2f::get_class_type(void);

2117 10 LVecBase2d 0 4 3573 22 LVecBase2d::LVecBase2d 0 4 71 72 73 74 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
192
inline LVecBase2d::LVecBase2d(void);
inline LVecBase2d::LVecBase2d(LVecBase2d const &copy);
inline LVecBase2d::LVecBase2d(double fill_value);
inline LVecBase2d::LVecBase2d(double x, double y);

2118 10 operator = 0 4 3573 22 LVecBase2d::operator = 0 2 75 76 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase2d &LVecBase2d::operator =(LVecBase2d const &copy);
inline LVecBase2d &LVecBase2d::operator =(double fill_value);

2119 12 operator new 0 4 3573 24 LVecBase2d::operator new 0 1 77 0
126
inline void *LVecBase2d::operator new(unsigned int size);
inline void *LVecBase2d::operator new(unsigned int size, void *ptr);

2120 15 operator delete 0 4 3573 27 LVecBase2d::operator delete 0 0 0
108
inline void LVecBase2d::operator delete(void *ptr);
inline void LVecBase2d::operator delete(void *, void *);

2121 12 validate_ptr 0 4 3573 24 LVecBase2d::validate_ptr 0 0 0
61
static inline bool LVecBase2d::validate_ptr(void const *ptr);

2122 4 zero 0 4 3573 16 LVecBase2d::zero 0 1 78 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2d const &LVecBase2d::zero(void);

2123 6 unit_x 0 4 3573 18 LVecBase2d::unit_x 0 1 79 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_x(void);

2124 6 unit_y 0 4 3573 18 LVecBase2d::unit_y 0 1 80 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2d const &LVecBase2d::unit_y(void);

2125 11 ~LVecBase2d 0 4 3573 23 LVecBase2d::~LVecBase2d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2d::~LVecBase2d(void);

2126 10 __reduce__ 0 4 3573 22 LVecBase2d::__reduce__ 0 1 81 0
60
inline _object *LVecBase2d::__reduce__(_object *self) const;

2127 11 __getattr__ 0 4 3573 23 LVecBase2d::__getattr__ 0 1 82 0
85
inline _object *LVecBase2d::__getattr__(basic_string< char > const &attr_name) const;

2128 11 __setattr__ 0 4 3573 23 LVecBase2d::__setattr__ 0 1 83 0
106
inline int LVecBase2d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2129 11 operator [] 0 4 3573 23 LVecBase2d::operator [] 0 2 84 85 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase2d::operator [](int i) const;
inline double &LVecBase2d::operator [](int i);

2130 11 __setitem__ 0 4 3573 23 LVecBase2d::__setitem__ 0 1 86 0
53
inline void LVecBase2d::__setitem__(int i, double v);

2131 4 size 0 4 3573 16 LVecBase2d::size 0 1 87 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2d::size(void);

2132 6 is_nan 0 4 3573 18 LVecBase2d::is_nan 0 1 88 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2d::is_nan(void) const;

2133 8 get_cell 0 4 3573 20 LVecBase2d::get_cell 0 1 89 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase2d::get_cell(int i) const;

2134 5 get_x 0 4 3573 17 LVecBase2d::get_x 0 1 90 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_x(void) const;

2135 5 get_y 0 4 3573 17 LVecBase2d::get_y 0 1 91 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase2d::get_y(void) const;

2136 8 set_cell 0 4 3573 20 LVecBase2d::set_cell 0 1 92 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2d::set_cell(int i, double value);

2137 5 set_x 0 4 3573 17 LVecBase2d::set_x 0 1 93 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_x(double value);

2138 5 set_y 0 4 3573 17 LVecBase2d::set_y 0 1 94 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::set_y(double value);

2139 11 add_to_cell 0 4 3573 23 LVecBase2d::add_to_cell 0 1 95 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase2d::add_to_cell(int i, double value);

2140 5 add_x 0 4 3573 17 LVecBase2d::add_x 0 1 96 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_x(double value);

2141 5 add_y 0 4 3573 17 LVecBase2d::add_y 0 1 97 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase2d::add_y(double value);

2142 8 get_data 0 4 3573 20 LVecBase2d::get_data 0 1 98 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase2d::get_data(void) const;

2143 18 get_num_components 0 4 3573 30 LVecBase2d::get_num_components 0 1 99 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2d::get_num_components(void) const;

2144 4 fill 0 4 3573 16 LVecBase2d::fill 0 1 100 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::fill(double fill_value);

2145 3 set 0 4 3573 15 LVecBase2d::set 0 1 101 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LVecBase2d::set(double x, double y);

2146 3 dot 0 4 3573 15 LVecBase2d::dot 0 1 102 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase2d::dot(LVecBase2d const &other) const;

2147 14 length_squared 0 4 3573 26 LVecBase2d::length_squared 0 1 103 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase2d::length_squared(void) const;

2148 6 length 0 4 3573 18 LVecBase2d::length 0 1 104 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase2d::length(void) const;

2149 9 normalize 0 4 3573 21 LVecBase2d::normalize 0 1 105 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase2d::normalize(void);

2150 7 project 0 4 3573 19 LVecBase2d::project 0 1 106 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LVecBase2d::project(LVecBase2d const &onto) const;

2151 10 operator < 0 4 3573 22 LVecBase2d::operator < 0 1 107 0
66
inline bool LVecBase2d::operator <(LVecBase2d const &other) const;

2152 11 operator == 0 4 3573 23 LVecBase2d::operator == 0 1 108 0
67
inline bool LVecBase2d::operator ==(LVecBase2d const &other) const;

2153 11 operator != 0 4 3573 23 LVecBase2d::operator != 0 1 109 0
67
inline bool LVecBase2d::operator !=(LVecBase2d const &other) const;

2154 10 compare_to 0 4 3573 22 LVecBase2d::compare_to 0 2 110 111 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase2d::compare_to(LVecBase2d const &other) const;
inline int LVecBase2d::compare_to(LVecBase2d const &other, double threshold) const;

2155 8 get_hash 0 4 3573 20 LVecBase2d::get_hash 0 2 112 113 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase2d::get_hash(void) const;
inline unsigned int LVecBase2d::get_hash(double threshold) const;

2156 8 add_hash 0 4 3573 20 LVecBase2d::add_hash 0 2 114 115 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase2d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase2d::add_hash(unsigned int hash, double threshold) const;

2157 13 generate_hash 0 4 3573 25 LVecBase2d::generate_hash 0 2 116 117 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase2d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2158 10 operator - 0 68 3573 22 LVecBase2d::operator - 0 1 118 0
53
inline LVecBase2d LVecBase2d::operator -(void) const;

2159 10 operator + 0 4 3573 22 LVecBase2d::operator + 0 1 119 0
72
inline LVecBase2d LVecBase2d::operator +(LVecBase2d const &other) const;

2160 10 operator - 0 4 3573 22 LVecBase2d::operator - 0 1 120 0
72
inline LVecBase2d LVecBase2d::operator -(LVecBase2d const &other) const;

2161 10 operator * 0 4 3573 22 LVecBase2d::operator * 0 1 121 0
62
inline LVecBase2d LVecBase2d::operator *(double scalar) const;

2162 10 operator / 0 4 3573 22 LVecBase2d::operator / 0 1 122 0
62
inline LVecBase2d LVecBase2d::operator /(double scalar) const;

2163 11 operator += 0 4 3573 23 LVecBase2d::operator += 0 1 123 0
61
inline void LVecBase2d::operator +=(LVecBase2d const &other);

2164 11 operator -= 0 4 3573 23 LVecBase2d::operator -= 0 1 124 0
61
inline void LVecBase2d::operator -=(LVecBase2d const &other);

2165 11 operator *= 0 4 3573 23 LVecBase2d::operator *= 0 1 125 0
51
inline void LVecBase2d::operator *=(double scalar);

2166 11 operator /= 0 4 3573 23 LVecBase2d::operator /= 0 1 126 0
51
inline void LVecBase2d::operator /=(double scalar);

2167 18 componentwise_mult 0 4 3573 30 LVecBase2d::componentwise_mult 0 1 127 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::componentwise_mult(LVecBase2d const &other);

2168 7 __pow__ 0 4 3573 19 LVecBase2d::__pow__ 0 1 128 0
61
inline LVecBase2d LVecBase2d::__pow__(double exponent) const;

2169 8 __ipow__ 0 4 3573 20 LVecBase2d::__ipow__ 0 1 129 0
69
inline _object *LVecBase2d::__ipow__(_object *self, double exponent);

2170 4 fmax 0 4 3573 16 LVecBase2d::fmax 0 1 130 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LVecBase2d::fmax(LVecBase2d const &other) const;

2171 4 fmin 0 4 3573 16 LVecBase2d::fmin 0 1 131 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2d LVecBase2d::fmin(LVecBase2d const &other) const;

2172 12 almost_equal 0 4 3573 24 LVecBase2d::almost_equal 0 2 132 133 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase2d::almost_equal(LVecBase2d const &other, double threshold) const;
inline bool LVecBase2d::almost_equal(LVecBase2d const &other) const;

2173 6 output 0 4 3573 18 LVecBase2d::output 0 1 134 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2d::output(ostream &out) const;

2174 11 python_repr 0 4 3573 23 LVecBase2d::python_repr 0 1 135 0
96
inline void LVecBase2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2175 20 write_datagram_fixed 0 4 3573 32 LVecBase2d::write_datagram_fixed 0 1 136 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2d::write_datagram_fixed(Datagram &destination) const;

2176 19 read_datagram_fixed 0 4 3573 31 LVecBase2d::read_datagram_fixed 0 1 137 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2d::read_datagram_fixed(DatagramIterator &source);

2177 14 write_datagram 0 4 3573 26 LVecBase2d::write_datagram 0 1 138 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2d::write_datagram(Datagram &destination) const;

2178 13 read_datagram 0 4 3573 25 LVecBase2d::read_datagram 0 1 139 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2d::read_datagram(DatagramIterator &source);

2179 14 get_class_type 0 4 3573 26 LVecBase2d::get_class_type 0 1 140 0
51
static TypeHandle LVecBase2d::get_class_type(void);

2180 10 LVecBase2i 0 4 3574 22 LVecBase2i::LVecBase2i 0 4 141 142 143 144 903
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
183
inline LVecBase2i::LVecBase2i(void);
inline LVecBase2i::LVecBase2i(LVecBase2i const &copy);
inline LVecBase2i::LVecBase2i(int fill_value);
inline LVecBase2i::LVecBase2i(int x, int y);

2181 10 operator = 0 4 3574 22 LVecBase2i::operator = 0 2 145 146 470
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
125
inline LVecBase2i &LVecBase2i::operator =(LVecBase2i const &copy);
inline LVecBase2i &LVecBase2i::operator =(int fill_value);

2182 12 operator new 0 4 3574 24 LVecBase2i::operator new 0 1 147 0
126
inline void *LVecBase2i::operator new(unsigned int size);
inline void *LVecBase2i::operator new(unsigned int size, void *ptr);

2183 15 operator delete 0 4 3574 27 LVecBase2i::operator delete 0 0 0
108
inline void LVecBase2i::operator delete(void *ptr);
inline void LVecBase2i::operator delete(void *, void *);

2184 12 validate_ptr 0 4 3574 24 LVecBase2i::validate_ptr 0 0 0
61
static inline bool LVecBase2i::validate_ptr(void const *ptr);

2185 4 zero 0 4 3574 16 LVecBase2i::zero 0 1 148 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase2i const &LVecBase2i::zero(void);

2186 6 unit_x 0 4 3574 18 LVecBase2i::unit_x 0 1 149 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2i const &LVecBase2i::unit_x(void);

2187 6 unit_y 0 4 3574 18 LVecBase2i::unit_y 0 1 150 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase2i const &LVecBase2i::unit_y(void);

2188 11 ~LVecBase2i 0 4 3574 23 LVecBase2i::~LVecBase2i 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase2i::~LVecBase2i(void);

2189 10 __reduce__ 0 4 3574 22 LVecBase2i::__reduce__ 0 1 151 0
60
inline _object *LVecBase2i::__reduce__(_object *self) const;

2190 11 __getattr__ 0 4 3574 23 LVecBase2i::__getattr__ 0 1 152 0
85
inline _object *LVecBase2i::__getattr__(basic_string< char > const &attr_name) const;

2191 11 __setattr__ 0 4 3574 23 LVecBase2i::__setattr__ 0 1 153 0
106
inline int LVecBase2i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2192 11 operator [] 0 4 3574 23 LVecBase2i::operator [] 0 2 154 155 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase2i::operator [](int i) const;
inline int &LVecBase2i::operator [](int i);

2193 11 __setitem__ 0 4 3574 23 LVecBase2i::__setitem__ 0 1 156 0
50
inline void LVecBase2i::__setitem__(int i, int v);

2194 4 size 0 4 3574 16 LVecBase2i::size 0 1 157 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase2i::size(void);

2195 6 is_nan 0 4 3574 18 LVecBase2i::is_nan 0 1 158 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase2i::is_nan(void) const;

2196 8 get_cell 0 4 3574 20 LVecBase2i::get_cell 0 1 159 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase2i::get_cell(int i) const;

2197 5 get_x 0 4 3574 17 LVecBase2i::get_x 0 1 160 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase2i::get_x(void) const;

2198 5 get_y 0 4 3574 17 LVecBase2i::get_y 0 1 161 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase2i::get_y(void) const;

2199 8 set_cell 0 4 3574 20 LVecBase2i::set_cell 0 1 162 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2i::set_cell(int i, int value);

2200 5 set_x 0 4 3574 17 LVecBase2i::set_x 0 1 163 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::set_x(int value);

2201 5 set_y 0 4 3574 17 LVecBase2i::set_y 0 1 164 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::set_y(int value);

2202 11 add_to_cell 0 4 3574 23 LVecBase2i::add_to_cell 0 1 165 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase2i::add_to_cell(int i, int value);

2203 5 add_x 0 4 3574 17 LVecBase2i::add_x 0 1 166 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::add_x(int value);

2204 5 add_y 0 4 3574 17 LVecBase2i::add_y 0 1 167 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase2i::add_y(int value);

2205 8 get_data 0 4 3574 20 LVecBase2i::get_data 0 1 168 395
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase2i::get_data(void) const;

2206 18 get_num_components 0 4 3574 30 LVecBase2i::get_num_components 0 1 169 279
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase2i::get_num_components(void) const;

2207 4 fill 0 4 3574 16 LVecBase2i::fill 0 1 170 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase2i::fill(int fill_value);

2208 3 set 0 4 3574 15 LVecBase2i::set 0 1 171 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LVecBase2i::set(int x, int y);

2209 3 dot 0 4 3574 15 LVecBase2i::dot 0 1 172 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase2i::dot(LVecBase2i const &other) const;

2210 14 length_squared 0 4 3574 26 LVecBase2i::length_squared 0 1 173 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase2i::length_squared(void) const;

2211 10 operator < 0 4 3574 22 LVecBase2i::operator < 0 1 174 0
66
inline bool LVecBase2i::operator <(LVecBase2i const &other) const;

2212 11 operator == 0 4 3574 23 LVecBase2i::operator == 0 1 175 0
67
inline bool LVecBase2i::operator ==(LVecBase2i const &other) const;

2213 11 operator != 0 4 3574 23 LVecBase2i::operator != 0 1 176 0
67
inline bool LVecBase2i::operator !=(LVecBase2i const &other) const;

2214 10 compare_to 0 4 3574 22 LVecBase2i::compare_to 0 1 177 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase2i::compare_to(LVecBase2i const &other) const;

2215 8 get_hash 0 4 3574 20 LVecBase2i::get_hash 0 1 178 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase2i::get_hash(void) const;

2216 8 add_hash 0 4 3574 20 LVecBase2i::add_hash 0 1 179 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase2i::add_hash(unsigned int hash) const;

2217 13 generate_hash 0 4 3574 25 LVecBase2i::generate_hash 0 1 180 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase2i::generate_hash(ChecksumHashGenerator &hashgen) const;

2218 10 operator - 0 68 3574 22 LVecBase2i::operator - 0 1 181 0
53
inline LVecBase2i LVecBase2i::operator -(void) const;

2219 10 operator + 0 4 3574 22 LVecBase2i::operator + 0 1 182 0
72
inline LVecBase2i LVecBase2i::operator +(LVecBase2i const &other) const;

2220 10 operator - 0 4 3574 22 LVecBase2i::operator - 0 1 183 0
72
inline LVecBase2i LVecBase2i::operator -(LVecBase2i const &other) const;

2221 10 operator * 0 4 3574 22 LVecBase2i::operator * 0 1 184 0
59
inline LVecBase2i LVecBase2i::operator *(int scalar) const;

2222 10 operator / 0 4 3574 22 LVecBase2i::operator / 0 1 185 0
59
inline LVecBase2i LVecBase2i::operator /(int scalar) const;

2223 11 operator += 0 4 3574 23 LVecBase2i::operator += 0 1 186 0
61
inline void LVecBase2i::operator +=(LVecBase2i const &other);

2224 11 operator -= 0 4 3574 23 LVecBase2i::operator -= 0 1 187 0
61
inline void LVecBase2i::operator -=(LVecBase2i const &other);

2225 11 operator *= 0 4 3574 23 LVecBase2i::operator *= 0 1 188 0
48
inline void LVecBase2i::operator *=(int scalar);

2226 11 operator /= 0 4 3574 23 LVecBase2i::operator /= 0 1 189 0
48
inline void LVecBase2i::operator /=(int scalar);

2227 18 componentwise_mult 0 4 3574 30 LVecBase2i::componentwise_mult 0 1 190 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2i::componentwise_mult(LVecBase2i const &other);

2228 7 __pow__ 0 4 3574 19 LVecBase2i::__pow__ 0 1 191 0
58
inline LVecBase2i LVecBase2i::__pow__(int exponent) const;

2229 8 __ipow__ 0 4 3574 20 LVecBase2i::__ipow__ 0 1 192 0
66
inline _object *LVecBase2i::__ipow__(_object *self, int exponent);

2230 4 fmax 0 4 3574 16 LVecBase2i::fmax 0 1 193 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2i LVecBase2i::fmax(LVecBase2i const &other) const;

2231 4 fmin 0 4 3574 16 LVecBase2i::fmin 0 1 194 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase2i LVecBase2i::fmin(LVecBase2i const &other) const;

2232 12 almost_equal 0 4 3574 24 LVecBase2i::almost_equal 0 2 195 196 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase2i::almost_equal(LVecBase2i const &other, int threshold) const;
inline bool LVecBase2i::almost_equal(LVecBase2i const &other) const;

2233 6 output 0 4 3574 18 LVecBase2i::output 0 1 197 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase2i::output(ostream &out) const;

2234 11 python_repr 0 4 3574 23 LVecBase2i::python_repr 0 1 198 0
96
inline void LVecBase2i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2235 20 write_datagram_fixed 0 4 3574 32 LVecBase2i::write_datagram_fixed 0 1 199 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase2i::write_datagram_fixed(Datagram &destination) const;

2236 19 read_datagram_fixed 0 4 3574 31 LVecBase2i::read_datagram_fixed 0 1 200 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase2i::read_datagram_fixed(DatagramIterator &source);

2237 14 write_datagram 0 4 3574 26 LVecBase2i::write_datagram 0 1 201 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase2i::write_datagram(Datagram &destination) const;

2238 13 read_datagram 0 4 3574 25 LVecBase2i::read_datagram 0 1 202 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase2i::read_datagram(DatagramIterator &source);

2239 14 get_class_type 0 4 3574 26 LVecBase2i::get_class_type 0 1 203 0
51
static TypeHandle LVecBase2i::get_class_type(void);

2240 9 LVector2f 0 4 3575 20 LVector2f::LVector2f 0 4 204 205 206 207 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
181
inline LVector2f::LVector2f(void);
inline LVector2f::LVector2f(LVecBase2f const &copy);
inline LVector2f::LVector2f(float fill_value);
inline LVector2f::LVector2f(float x, float y);

2241 10 operator = 0 4 3575 21 LVector2f::operator = 0 2 208 209 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector2f &LVector2f::operator =(LVecBase2f const &copy);
inline LVector2f &LVector2f::operator =(float fill_value);

2242 11 __getattr__ 0 4 3575 22 LVector2f::__getattr__ 0 1 210 0
84
inline _object *LVector2f::__getattr__(basic_string< char > const &attr_name) const;

2243 11 __setattr__ 0 4 3575 22 LVector2f::__setattr__ 0 1 211 0
105
inline int LVector2f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2244 4 zero 0 4 3575 15 LVector2f::zero 0 1 212 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2f const &LVector2f::zero(void);

2245 6 unit_x 0 4 3575 17 LVector2f::unit_x 0 1 213 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_x(void);

2246 6 unit_y 0 4 3575 17 LVector2f::unit_y 0 1 214 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2f const &LVector2f::unit_y(void);

2247 10 operator - 0 68 3575 21 LVector2f::operator - 0 1 215 0
51
inline LVector2f LVector2f::operator -(void) const;

2248 10 operator + 0 4 3575 21 LVector2f::operator + 0 2 216 217 0
141
inline LVecBase2f LVector2f::operator +(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator +(LVector2f const &other) const;

2249 10 operator - 0 4 3575 21 LVector2f::operator - 0 2 218 219 0
141
inline LVecBase2f LVector2f::operator -(LVecBase2f const &other) const;
inline LVector2f LVector2f::operator -(LVector2f const &other) const;

2250 10 operator * 0 4 3575 21 LVector2f::operator * 0 1 220 0
59
inline LVector2f LVector2f::operator *(float scalar) const;

2251 10 operator / 0 4 3575 21 LVector2f::operator / 0 1 221 0
59
inline LVector2f LVector2f::operator /(float scalar) const;

2252 7 project 0 4 3575 18 LVector2f::project 0 1 222 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2f LVector2f::project(LVecBase2f const &onto) const;

2253 16 signed_angle_rad 0 4 3575 27 LVector2f::signed_angle_rad 0 1 223 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_rad(LVector2f const &other) const;

2254 16 signed_angle_deg 0 4 3575 27 LVector2f::signed_angle_deg 0 1 224 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
71
inline float LVector2f::signed_angle_deg(LVector2f const &other) const;

2255 11 python_repr 0 4 3575 22 LVector2f::python_repr 0 1 225 0
95
inline void LVector2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2256 14 get_class_type 0 4 3575 25 LVector2f::get_class_type 0 1 226 0
50
static TypeHandle LVector2f::get_class_type(void);

2257 10 ~LVector2f 0 4 3575 21 LVector2f::~LVector2f 0 0 0
28
LVector2f::~LVector2f(void);

2258 9 LVector2d 0 4 3576 20 LVector2d::LVector2d 0 4 227 228 229 230 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
184
inline LVector2d::LVector2d(void);
inline LVector2d::LVector2d(LVecBase2d const &copy);
inline LVector2d::LVector2d(double fill_value);
inline LVector2d::LVector2d(double x, double y);

2259 10 operator = 0 4 3576 21 LVector2d::operator = 0 2 231 232 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector2d &LVector2d::operator =(LVecBase2d const &copy);
inline LVector2d &LVector2d::operator =(double fill_value);

2260 11 __getattr__ 0 4 3576 22 LVector2d::__getattr__ 0 1 233 0
84
inline _object *LVector2d::__getattr__(basic_string< char > const &attr_name) const;

2261 11 __setattr__ 0 4 3576 22 LVector2d::__setattr__ 0 1 234 0
105
inline int LVector2d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2262 4 zero 0 4 3576 15 LVector2d::zero 0 1 235 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2d const &LVector2d::zero(void);

2263 6 unit_x 0 4 3576 17 LVector2d::unit_x 0 1 236 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_x(void);

2264 6 unit_y 0 4 3576 17 LVector2d::unit_y 0 1 237 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2d const &LVector2d::unit_y(void);

2265 10 operator - 0 68 3576 21 LVector2d::operator - 0 1 238 0
51
inline LVector2d LVector2d::operator -(void) const;

2266 10 operator + 0 4 3576 21 LVector2d::operator + 0 2 239 240 0
141
inline LVecBase2d LVector2d::operator +(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator +(LVector2d const &other) const;

2267 10 operator - 0 4 3576 21 LVector2d::operator - 0 2 241 242 0
141
inline LVecBase2d LVector2d::operator -(LVecBase2d const &other) const;
inline LVector2d LVector2d::operator -(LVector2d const &other) const;

2268 10 operator * 0 4 3576 21 LVector2d::operator * 0 1 243 0
60
inline LVector2d LVector2d::operator *(double scalar) const;

2269 10 operator / 0 4 3576 21 LVector2d::operator / 0 1 244 0
60
inline LVector2d LVector2d::operator /(double scalar) const;

2270 7 project 0 4 3576 18 LVector2d::project 0 1 245 389
////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector2d LVector2d::project(LVecBase2d const &onto) const;

2271 16 signed_angle_rad 0 4 3576 27 LVector2d::signed_angle_rad 0 1 246 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_rad(LVector2d const &other) const;

2272 16 signed_angle_deg 0 4 3576 27 LVector2d::signed_angle_deg 0 1 247 321
////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
////////////////////////////////////////////////////////////////////
72
inline double LVector2d::signed_angle_deg(LVector2d const &other) const;

2273 11 python_repr 0 4 3576 22 LVector2d::python_repr 0 1 248 0
95
inline void LVector2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2274 14 get_class_type 0 4 3576 25 LVector2d::get_class_type 0 1 249 0
50
static TypeHandle LVector2d::get_class_type(void);

2275 10 ~LVector2d 0 4 3576 21 LVector2d::~LVector2d 0 0 0
28
LVector2d::~LVector2d(void);

2276 9 LVector2i 0 4 3577 20 LVector2i::LVector2i 0 4 250 251 252 253 887
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
175
inline LVector2i::LVector2i(void);
inline LVector2i::LVector2i(LVecBase2i const &copy);
inline LVector2i::LVector2i(int fill_value);
inline LVector2i::LVector2i(int x, int y);

2277 10 operator = 0 4 3577 21 LVector2i::operator = 0 2 254 255 456
////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector2i &LVector2i::operator =(LVecBase2i const &copy);
inline LVector2i &LVector2i::operator =(int fill_value);

2278 11 __getattr__ 0 4 3577 22 LVector2i::__getattr__ 0 1 256 0
84
inline _object *LVector2i::__getattr__(basic_string< char > const &attr_name) const;

2279 11 __setattr__ 0 4 3577 22 LVector2i::__setattr__ 0 1 257 0
105
inline int LVector2i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2280 4 zero 0 4 3577 15 LVector2i::zero 0 1 258 258
////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector2i const &LVector2i::zero(void);

2281 6 unit_x 0 4 3577 17 LVector2i::unit_x 0 1 259 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2i const &LVector2i::unit_x(void);

2282 6 unit_y 0 4 3577 17 LVector2i::unit_y 0 1 260 255
////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector2i const &LVector2i::unit_y(void);

2283 10 operator - 0 68 3577 21 LVector2i::operator - 0 1 261 0
51
inline LVector2i LVector2i::operator -(void) const;

2284 10 operator + 0 4 3577 21 LVector2i::operator + 0 2 262 263 0
141
inline LVecBase2i LVector2i::operator +(LVecBase2i const &other) const;
inline LVector2i LVector2i::operator +(LVector2i const &other) const;

2285 10 operator - 0 4 3577 21 LVector2i::operator - 0 2 264 265 0
141
inline LVecBase2i LVector2i::operator -(LVecBase2i const &other) const;
inline LVector2i LVector2i::operator -(LVector2i const &other) const;

2286 10 operator * 0 4 3577 21 LVector2i::operator * 0 1 266 0
57
inline LVector2i LVector2i::operator *(int scalar) const;

2287 10 operator / 0 4 3577 21 LVector2i::operator / 0 1 267 0
57
inline LVector2i LVector2i::operator /(int scalar) const;

2288 11 python_repr 0 4 3577 22 LVector2i::python_repr 0 1 268 0
95
inline void LVector2i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2289 14 get_class_type 0 4 3577 25 LVector2i::get_class_type 0 1 269 0
50
static TypeHandle LVector2i::get_class_type(void);

2290 10 ~LVector2i 0 4 3577 21 LVector2i::~LVector2i 0 0 0
28
LVector2i::~LVector2i(void);

2291 8 LPoint2f 0 4 3578 18 LPoint2f::LPoint2f 0 4 270 271 272 273 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
173
inline LPoint2f::LPoint2f(void);
inline LPoint2f::LPoint2f(LVecBase2f const &copy);
inline LPoint2f::LPoint2f(float fill_value);
inline LPoint2f::LPoint2f(float x, float y);

2292 10 operator = 0 4 3578 20 LPoint2f::operator = 0 2 274 275 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint2f &LPoint2f::operator =(LVecBase2f const &copy);
inline LPoint2f &LPoint2f::operator =(float fill_value);

2293 11 __getattr__ 0 4 3578 21 LPoint2f::__getattr__ 0 1 276 0
83
inline _object *LPoint2f::__getattr__(basic_string< char > const &attr_name) const;

2294 11 __setattr__ 0 4 3578 21 LPoint2f::__setattr__ 0 1 277 0
104
inline int LPoint2f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2295 4 zero 0 4 3578 14 LPoint2f::zero 0 1 278 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2f const &LPoint2f::zero(void);

2296 6 unit_x 0 4 3578 16 LPoint2f::unit_x 0 1 279 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_x(void);

2297 6 unit_y 0 4 3578 16 LPoint2f::unit_y 0 1 280 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2f const &LPoint2f::unit_y(void);

2298 10 operator - 0 68 3578 20 LPoint2f::operator - 0 1 281 0
49
inline LPoint2f LPoint2f::operator -(void) const;

2299 10 operator + 0 4 3578 20 LPoint2f::operator + 0 2 282 283 0
138
inline LVecBase2f LPoint2f::operator +(LVecBase2f const &other) const;
inline LPoint2f LPoint2f::operator +(LVector2f const &other) const;

2300 10 operator - 0 4 3578 20 LPoint2f::operator - 0 3 284 285 286 0
206
inline LVecBase2f LPoint2f::operator -(LVecBase2f const &other) const;
inline LVector2f LPoint2f::operator -(LPoint2f const &other) const;
inline LPoint2f LPoint2f::operator -(LVector2f const &other) const;

2301 10 operator * 0 4 3578 20 LPoint2f::operator * 0 1 287 0
57
inline LPoint2f LPoint2f::operator *(float scalar) const;

2302 10 operator / 0 4 3578 20 LPoint2f::operator / 0 1 288 0
57
inline LPoint2f LPoint2f::operator /(float scalar) const;

2303 7 project 0 4 3578 17 LPoint2f::project 0 1 289 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2f LPoint2f::project(LVecBase2f const &onto) const;

2304 11 python_repr 0 4 3578 21 LPoint2f::python_repr 0 1 290 0
94
inline void LPoint2f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2305 14 get_class_type 0 4 3578 24 LPoint2f::get_class_type 0 1 291 0
49
static TypeHandle LPoint2f::get_class_type(void);

2306 9 ~LPoint2f 0 4 3578 19 LPoint2f::~LPoint2f 0 0 0
26
LPoint2f::~LPoint2f(void);

2307 8 LPoint2d 0 4 3579 18 LPoint2d::LPoint2d 0 4 292 293 294 295 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
176
inline LPoint2d::LPoint2d(void);
inline LPoint2d::LPoint2d(LVecBase2d const &copy);
inline LPoint2d::LPoint2d(double fill_value);
inline LPoint2d::LPoint2d(double x, double y);

2308 10 operator = 0 4 3579 20 LPoint2d::operator = 0 2 296 297 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint2d &LPoint2d::operator =(LVecBase2d const &copy);
inline LPoint2d &LPoint2d::operator =(double fill_value);

2309 11 __getattr__ 0 4 3579 21 LPoint2d::__getattr__ 0 1 298 0
83
inline _object *LPoint2d::__getattr__(basic_string< char > const &attr_name) const;

2310 11 __setattr__ 0 4 3579 21 LPoint2d::__setattr__ 0 1 299 0
104
inline int LPoint2d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2311 4 zero 0 4 3579 14 LPoint2d::zero 0 1 300 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2d const &LPoint2d::zero(void);

2312 6 unit_x 0 4 3579 16 LPoint2d::unit_x 0 1 301 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_x(void);

2313 6 unit_y 0 4 3579 16 LPoint2d::unit_y 0 1 302 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2d const &LPoint2d::unit_y(void);

2314 10 operator - 0 68 3579 20 LPoint2d::operator - 0 1 303 0
49
inline LPoint2d LPoint2d::operator -(void) const;

2315 10 operator + 0 4 3579 20 LPoint2d::operator + 0 2 304 305 0
138
inline LVecBase2d LPoint2d::operator +(LVecBase2d const &other) const;
inline LPoint2d LPoint2d::operator +(LVector2d const &other) const;

2316 10 operator - 0 4 3579 20 LPoint2d::operator - 0 3 306 307 308 0
206
inline LVecBase2d LPoint2d::operator -(LVecBase2d const &other) const;
inline LVector2d LPoint2d::operator -(LPoint2d const &other) const;
inline LPoint2d LPoint2d::operator -(LVector2d const &other) const;

2317 10 operator * 0 4 3579 20 LPoint2d::operator * 0 1 309 0
58
inline LPoint2d LPoint2d::operator *(double scalar) const;

2318 10 operator / 0 4 3579 20 LPoint2d::operator / 0 1 310 0
58
inline LPoint2d LPoint2d::operator /(double scalar) const;

2319 7 project 0 4 3579 17 LPoint2d::project 0 1 311 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint2d LPoint2d::project(LVecBase2d const &onto) const;

2320 11 python_repr 0 4 3579 21 LPoint2d::python_repr 0 1 312 0
94
inline void LPoint2d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2321 14 get_class_type 0 4 3579 24 LPoint2d::get_class_type 0 1 313 0
49
static TypeHandle LPoint2d::get_class_type(void);

2322 9 ~LPoint2d 0 4 3579 19 LPoint2d::~LPoint2d 0 0 0
26
LPoint2d::~LPoint2d(void);

2323 8 LPoint2i 0 4 3580 18 LPoint2i::LPoint2i 0 4 314 315 316 317 883
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
167
inline LPoint2i::LPoint2i(void);
inline LPoint2i::LPoint2i(LVecBase2i const &copy);
inline LPoint2i::LPoint2i(int fill_value);
inline LPoint2i::LPoint2i(int x, int y);

2324 10 operator = 0 4 3580 20 LPoint2i::operator = 0 2 318 319 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint2i &LPoint2i::operator =(LVecBase2i const &copy);
inline LPoint2i &LPoint2i::operator =(int fill_value);

2325 11 __getattr__ 0 4 3580 21 LPoint2i::__getattr__ 0 1 320 0
83
inline _object *LPoint2i::__getattr__(basic_string< char > const &attr_name) const;

2326 11 __setattr__ 0 4 3580 21 LPoint2i::__setattr__ 0 1 321 0
104
inline int LPoint2i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2327 4 zero 0 4 3580 14 LPoint2i::zero 0 1 322 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint2i const &LPoint2i::zero(void);

2328 6 unit_x 0 4 3580 16 LPoint2i::unit_x 0 1 323 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2i const &LPoint2i::unit_x(void);

2329 6 unit_y 0 4 3580 16 LPoint2i::unit_y 0 1 324 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint2i const &LPoint2i::unit_y(void);

2330 10 operator - 0 68 3580 20 LPoint2i::operator - 0 1 325 0
49
inline LPoint2i LPoint2i::operator -(void) const;

2331 10 operator + 0 4 3580 20 LPoint2i::operator + 0 2 326 327 0
138
inline LVecBase2i LPoint2i::operator +(LVecBase2i const &other) const;
inline LPoint2i LPoint2i::operator +(LVector2i const &other) const;

2332 10 operator - 0 4 3580 20 LPoint2i::operator - 0 3 328 329 330 0
206
inline LVecBase2i LPoint2i::operator -(LVecBase2i const &other) const;
inline LVector2i LPoint2i::operator -(LPoint2i const &other) const;
inline LPoint2i LPoint2i::operator -(LVector2i const &other) const;

2333 10 operator * 0 4 3580 20 LPoint2i::operator * 0 1 331 0
55
inline LPoint2i LPoint2i::operator *(int scalar) const;

2334 10 operator / 0 4 3580 20 LPoint2i::operator / 0 1 332 0
55
inline LPoint2i LPoint2i::operator /(int scalar) const;

2335 11 python_repr 0 4 3580 21 LPoint2i::python_repr 0 1 333 0
94
inline void LPoint2i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2336 14 get_class_type 0 4 3580 24 LPoint2i::get_class_type 0 1 334 0
49
static TypeHandle LPoint2i::get_class_type(void);

2337 9 ~LPoint2i 0 4 3580 19 LPoint2i::~LPoint2i 0 0 0
26
LPoint2i::~LPoint2i(void);

2338 10 LVecBase3f 0 4 3581 22 LVecBase3f::LVecBase3f 0 5 335 336 337 338 339 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
262
inline LVecBase3f::LVecBase3f(void);
inline LVecBase3f::LVecBase3f(LVecBase3f const &copy);
inline LVecBase3f::LVecBase3f(float fill_value);
inline LVecBase3f::LVecBase3f(float x, float y, float z);
inline LVecBase3f::LVecBase3f(LVecBase2f const &copy, float z);

2339 10 operator = 0 4 3581 22 LVecBase3f::operator = 0 2 340 341 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
127
inline LVecBase3f &LVecBase3f::operator =(LVecBase3f const &copy);
inline LVecBase3f &LVecBase3f::operator =(float fill_value);

2340 12 operator new 0 4 3581 24 LVecBase3f::operator new 0 1 342 0
126
inline void *LVecBase3f::operator new(unsigned int size);
inline void *LVecBase3f::operator new(unsigned int size, void *ptr);

2341 15 operator delete 0 4 3581 27 LVecBase3f::operator delete 0 0 0
108
inline void LVecBase3f::operator delete(void *ptr);
inline void LVecBase3f::operator delete(void *, void *);

2342 12 validate_ptr 0 4 3581 24 LVecBase3f::validate_ptr 0 0 0
61
static inline bool LVecBase3f::validate_ptr(void const *ptr);

2343 4 zero 0 4 3581 16 LVecBase3f::zero 0 1 343 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3f const &LVecBase3f::zero(void);

2344 6 unit_x 0 4 3581 18 LVecBase3f::unit_x 0 1 344 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_x(void);

2345 6 unit_y 0 4 3581 18 LVecBase3f::unit_y 0 1 345 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_y(void);

2346 6 unit_z 0 4 3581 18 LVecBase3f::unit_z 0 1 346 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3f const &LVecBase3f::unit_z(void);

2347 11 ~LVecBase3f 0 4 3581 23 LVecBase3f::~LVecBase3f 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3f::~LVecBase3f(void);

2348 10 __reduce__ 0 4 3581 22 LVecBase3f::__reduce__ 0 1 347 0
60
inline _object *LVecBase3f::__reduce__(_object *self) const;

2349 11 __getattr__ 0 4 3581 23 LVecBase3f::__getattr__ 0 1 348 0
85
inline _object *LVecBase3f::__getattr__(basic_string< char > const &attr_name) const;

2350 11 __setattr__ 0 4 3581 23 LVecBase3f::__setattr__ 0 1 349 0
106
inline int LVecBase3f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2351 11 operator [] 0 4 3581 23 LVecBase3f::operator [] 0 2 350 351 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase3f::operator [](int i) const;
inline float &LVecBase3f::operator [](int i);

2352 11 __setitem__ 0 4 3581 23 LVecBase3f::__setitem__ 0 1 352 0
52
inline void LVecBase3f::__setitem__(int i, float v);

2353 4 size 0 4 3581 16 LVecBase3f::size 0 1 353 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3f::size(void);

2354 6 is_nan 0 4 3581 18 LVecBase3f::is_nan 0 1 354 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3f::is_nan(void) const;

2355 8 get_cell 0 4 3581 20 LVecBase3f::get_cell 0 1 355 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase3f::get_cell(int i) const;

2356 5 get_x 0 4 3581 17 LVecBase3f::get_x 0 1 356 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_x(void) const;

2357 5 get_y 0 4 3581 17 LVecBase3f::get_y 0 1 357 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_y(void) const;

2358 5 get_z 0 4 3581 17 LVecBase3f::get_z 0 1 358 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase3f::get_z(void) const;

2359 8 set_cell 0 4 3581 20 LVecBase3f::set_cell 0 1 359 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase3f::set_cell(int i, float value);

2360 5 set_x 0 4 3581 17 LVecBase3f::set_x 0 1 360 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_x(float value);

2361 5 set_y 0 4 3581 17 LVecBase3f::set_y 0 1 361 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_y(float value);

2362 5 set_z 0 4 3581 17 LVecBase3f::set_z 0 1 362 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::set_z(float value);

2363 6 get_xy 0 4 3581 18 LVecBase3f::get_xy 0 1 363 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xy(void) const;

2364 6 get_xz 0 4 3581 18 LVecBase3f::get_xz 0 1 364 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_xz(void) const;

2365 6 get_yz 0 4 3581 18 LVecBase3f::get_yz 0 1 365 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2f LVecBase3f::get_yz(void) const;

2366 11 add_to_cell 0 4 3581 23 LVecBase3f::add_to_cell 0 1 366 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase3f::add_to_cell(int i, float value);

2367 5 add_x 0 4 3581 17 LVecBase3f::add_x 0 1 367 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_x(float value);

2368 5 add_y 0 4 3581 17 LVecBase3f::add_y 0 1 368 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_y(float value);

2369 5 add_z 0 4 3581 17 LVecBase3f::add_z 0 1 369 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase3f::add_z(float value);

2370 8 get_data 0 4 3581 20 LVecBase3f::get_data 0 1 370 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase3f::get_data(void) const;

2371 18 get_num_components 0 4 3581 30 LVecBase3f::get_num_components 0 1 371 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3f::get_num_components(void) const;

2372 4 fill 0 4 3581 16 LVecBase3f::fill 0 1 372 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase3f::fill(float fill_value);

2373 3 set 0 4 3581 15 LVecBase3f::set 0 1 373 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void LVecBase3f::set(float x, float y, float z);

2374 3 dot 0 4 3581 15 LVecBase3f::dot 0 1 374 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase3f::dot(LVecBase3f const &other) const;

2375 14 length_squared 0 4 3581 26 LVecBase3f::length_squared 0 1 375 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase3f::length_squared(void) const;

2376 6 length 0 4 3581 18 LVecBase3f::length 0 1 376 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase3f::length(void) const;

2377 9 normalize 0 4 3581 21 LVecBase3f::normalize 0 1 377 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3f::normalize(void);

2378 7 project 0 4 3581 19 LVecBase3f::project 0 1 378 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LVecBase3f::project(LVecBase3f const &onto) const;

2379 5 cross 0 4 3581 17 LVecBase3f::cross 0 1 379 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3f LVecBase3f::cross(LVecBase3f const &other) const;

2380 10 operator < 0 4 3581 22 LVecBase3f::operator < 0 1 380 0
66
inline bool LVecBase3f::operator <(LVecBase3f const &other) const;

2381 11 operator == 0 4 3581 23 LVecBase3f::operator == 0 1 381 0
67
inline bool LVecBase3f::operator ==(LVecBase3f const &other) const;

2382 11 operator != 0 4 3581 23 LVecBase3f::operator != 0 1 382 0
67
inline bool LVecBase3f::operator !=(LVecBase3f const &other) const;

2383 20 get_standardized_hpr 0 4 3581 32 LVecBase3f::get_standardized_hpr 0 1 383 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3f LVecBase3f::get_standardized_hpr(void) const;

2384 10 compare_to 0 4 3581 22 LVecBase3f::compare_to 0 2 384 385 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase3f::compare_to(LVecBase3f const &other) const;
inline int LVecBase3f::compare_to(LVecBase3f const &other, float threshold) const;

2385 8 get_hash 0 4 3581 20 LVecBase3f::get_hash 0 2 386 387 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase3f::get_hash(void) const;
inline unsigned int LVecBase3f::get_hash(float threshold) const;

2386 8 add_hash 0 4 3581 20 LVecBase3f::add_hash 0 2 388 389 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase3f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3f::add_hash(unsigned int hash, float threshold) const;

2387 13 generate_hash 0 4 3581 25 LVecBase3f::generate_hash 0 2 390 391 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2388 10 operator - 0 68 3581 22 LVecBase3f::operator - 0 1 392 0
53
inline LVecBase3f LVecBase3f::operator -(void) const;

2389 10 operator + 0 4 3581 22 LVecBase3f::operator + 0 1 393 0
72
inline LVecBase3f LVecBase3f::operator +(LVecBase3f const &other) const;

2390 10 operator - 0 4 3581 22 LVecBase3f::operator - 0 1 394 0
72
inline LVecBase3f LVecBase3f::operator -(LVecBase3f const &other) const;

2391 10 operator * 0 4 3581 22 LVecBase3f::operator * 0 1 395 0
61
inline LVecBase3f LVecBase3f::operator *(float scalar) const;

2392 10 operator / 0 4 3581 22 LVecBase3f::operator / 0 1 396 0
61
inline LVecBase3f LVecBase3f::operator /(float scalar) const;

2393 11 operator += 0 4 3581 23 LVecBase3f::operator += 0 1 397 0
61
inline void LVecBase3f::operator +=(LVecBase3f const &other);

2394 11 operator -= 0 4 3581 23 LVecBase3f::operator -= 0 1 398 0
61
inline void LVecBase3f::operator -=(LVecBase3f const &other);

2395 11 operator *= 0 4 3581 23 LVecBase3f::operator *= 0 1 399 0
50
inline void LVecBase3f::operator *=(float scalar);

2396 11 operator /= 0 4 3581 23 LVecBase3f::operator /= 0 1 400 0
50
inline void LVecBase3f::operator /=(float scalar);

2397 18 componentwise_mult 0 4 3581 30 LVecBase3f::componentwise_mult 0 1 401 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::componentwise_mult(LVecBase3f const &other);

2398 7 __pow__ 0 4 3581 19 LVecBase3f::__pow__ 0 1 402 0
60
inline LVecBase3f LVecBase3f::__pow__(float exponent) const;

2399 8 __ipow__ 0 4 3581 20 LVecBase3f::__ipow__ 0 1 403 0
68
inline _object *LVecBase3f::__ipow__(_object *self, float exponent);

2400 4 fmax 0 4 3581 16 LVecBase3f::fmax 0 1 404 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LVecBase3f::fmax(LVecBase3f const &other) const;

2401 4 fmin 0 4 3581 16 LVecBase3f::fmin 0 1 405 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LVecBase3f::fmin(LVecBase3f const &other) const;

2402 10 cross_into 0 4 3581 22 LVecBase3f::cross_into 0 1 406 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3f::cross_into(LVecBase3f const &other);

2403 12 almost_equal 0 4 3581 24 LVecBase3f::almost_equal 0 2 407 408 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase3f::almost_equal(LVecBase3f const &other, float threshold) const;
inline bool LVecBase3f::almost_equal(LVecBase3f const &other) const;

2404 6 output 0 4 3581 18 LVecBase3f::output 0 1 409 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3f::output(ostream &out) const;

2405 11 python_repr 0 4 3581 23 LVecBase3f::python_repr 0 1 410 0
96
inline void LVecBase3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2406 20 write_datagram_fixed 0 4 3581 32 LVecBase3f::write_datagram_fixed 0 1 411 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3f::write_datagram_fixed(Datagram &destination) const;

2407 19 read_datagram_fixed 0 4 3581 31 LVecBase3f::read_datagram_fixed 0 1 412 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3f::read_datagram_fixed(DatagramIterator &source);

2408 14 write_datagram 0 4 3581 26 LVecBase3f::write_datagram 0 1 413 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3f::write_datagram(Datagram &destination) const;

2409 13 read_datagram 0 4 3581 25 LVecBase3f::read_datagram 0 1 414 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3f::read_datagram(DatagramIterator &source);

2410 14 get_class_type 0 4 3581 26 LVecBase3f::get_class_type 0 1 415 0
51
static TypeHandle LVecBase3f::get_class_type(void);

2411 10 LVecBase3d 0 4 3582 22 LVecBase3d::LVecBase3d 0 5 416 417 418 419 420 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
267
inline LVecBase3d::LVecBase3d(void);
inline LVecBase3d::LVecBase3d(LVecBase3d const &copy);
inline LVecBase3d::LVecBase3d(double fill_value);
inline LVecBase3d::LVecBase3d(double x, double y, double z);
inline LVecBase3d::LVecBase3d(LVecBase2d const &copy, double z);

2412 10 operator = 0 4 3582 22 LVecBase3d::operator = 0 2 421 422 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
128
inline LVecBase3d &LVecBase3d::operator =(LVecBase3d const &copy);
inline LVecBase3d &LVecBase3d::operator =(double fill_value);

2413 12 operator new 0 4 3582 24 LVecBase3d::operator new 0 1 423 0
126
inline void *LVecBase3d::operator new(unsigned int size);
inline void *LVecBase3d::operator new(unsigned int size, void *ptr);

2414 15 operator delete 0 4 3582 27 LVecBase3d::operator delete 0 0 0
108
inline void LVecBase3d::operator delete(void *ptr);
inline void LVecBase3d::operator delete(void *, void *);

2415 12 validate_ptr 0 4 3582 24 LVecBase3d::validate_ptr 0 0 0
61
static inline bool LVecBase3d::validate_ptr(void const *ptr);

2416 4 zero 0 4 3582 16 LVecBase3d::zero 0 1 424 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3d const &LVecBase3d::zero(void);

2417 6 unit_x 0 4 3582 18 LVecBase3d::unit_x 0 1 425 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_x(void);

2418 6 unit_y 0 4 3582 18 LVecBase3d::unit_y 0 1 426 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_y(void);

2419 6 unit_z 0 4 3582 18 LVecBase3d::unit_z 0 1 427 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3d const &LVecBase3d::unit_z(void);

2420 11 ~LVecBase3d 0 4 3582 23 LVecBase3d::~LVecBase3d 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3d::~LVecBase3d(void);

2421 10 __reduce__ 0 4 3582 22 LVecBase3d::__reduce__ 0 1 428 0
60
inline _object *LVecBase3d::__reduce__(_object *self) const;

2422 11 __getattr__ 0 4 3582 23 LVecBase3d::__getattr__ 0 1 429 0
85
inline _object *LVecBase3d::__getattr__(basic_string< char > const &attr_name) const;

2423 11 __setattr__ 0 4 3582 23 LVecBase3d::__setattr__ 0 1 430 0
106
inline int LVecBase3d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2424 11 operator [] 0 4 3582 23 LVecBase3d::operator [] 0 2 431 432 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase3d::operator [](int i) const;
inline double &LVecBase3d::operator [](int i);

2425 11 __setitem__ 0 4 3582 23 LVecBase3d::__setitem__ 0 1 433 0
53
inline void LVecBase3d::__setitem__(int i, double v);

2426 4 size 0 4 3582 16 LVecBase3d::size 0 1 434 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3d::size(void);

2427 6 is_nan 0 4 3582 18 LVecBase3d::is_nan 0 1 435 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3d::is_nan(void) const;

2428 8 get_cell 0 4 3582 20 LVecBase3d::get_cell 0 1 436 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase3d::get_cell(int i) const;

2429 5 get_x 0 4 3582 17 LVecBase3d::get_x 0 1 437 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_x(void) const;

2430 5 get_y 0 4 3582 17 LVecBase3d::get_y 0 1 438 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_y(void) const;

2431 5 get_z 0 4 3582 17 LVecBase3d::get_z 0 1 439 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase3d::get_z(void) const;

2432 8 set_cell 0 4 3582 20 LVecBase3d::set_cell 0 1 440 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3d::set_cell(int i, double value);

2433 5 set_x 0 4 3582 17 LVecBase3d::set_x 0 1 441 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_x(double value);

2434 5 set_y 0 4 3582 17 LVecBase3d::set_y 0 1 442 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_y(double value);

2435 5 set_z 0 4 3582 17 LVecBase3d::set_z 0 1 443 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::set_z(double value);

2436 6 get_xy 0 4 3582 18 LVecBase3d::get_xy 0 1 444 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xy(void) const;

2437 6 get_xz 0 4 3582 18 LVecBase3d::get_xz 0 1 445 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_xz(void) const;

2438 6 get_yz 0 4 3582 18 LVecBase3d::get_yz 0 1 446 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2d LVecBase3d::get_yz(void) const;

2439 11 add_to_cell 0 4 3582 23 LVecBase3d::add_to_cell 0 1 447 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase3d::add_to_cell(int i, double value);

2440 5 add_x 0 4 3582 17 LVecBase3d::add_x 0 1 448 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_x(double value);

2441 5 add_y 0 4 3582 17 LVecBase3d::add_y 0 1 449 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_y(double value);

2442 5 add_z 0 4 3582 17 LVecBase3d::add_z 0 1 450 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase3d::add_z(double value);

2443 8 get_data 0 4 3582 20 LVecBase3d::get_data 0 1 451 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase3d::get_data(void) const;

2444 18 get_num_components 0 4 3582 30 LVecBase3d::get_num_components 0 1 452 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3d::get_num_components(void) const;

2445 4 fill 0 4 3582 16 LVecBase3d::fill 0 1 453 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase3d::fill(double fill_value);

2446 3 set 0 4 3582 15 LVecBase3d::set 0 1 454 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void LVecBase3d::set(double x, double y, double z);

2447 3 dot 0 4 3582 15 LVecBase3d::dot 0 1 455 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase3d::dot(LVecBase3d const &other) const;

2448 14 length_squared 0 4 3582 26 LVecBase3d::length_squared 0 1 456 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase3d::length_squared(void) const;

2449 6 length 0 4 3582 18 LVecBase3d::length 0 1 457 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase3d::length(void) const;

2450 9 normalize 0 4 3582 21 LVecBase3d::normalize 0 1 458 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase3d::normalize(void);

2451 7 project 0 4 3582 19 LVecBase3d::project 0 1 459 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LVecBase3d::project(LVecBase3d const &onto) const;

2452 5 cross 0 4 3582 17 LVecBase3d::cross 0 1 460 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3d LVecBase3d::cross(LVecBase3d const &other) const;

2453 10 operator < 0 4 3582 22 LVecBase3d::operator < 0 1 461 0
66
inline bool LVecBase3d::operator <(LVecBase3d const &other) const;

2454 11 operator == 0 4 3582 23 LVecBase3d::operator == 0 1 462 0
67
inline bool LVecBase3d::operator ==(LVecBase3d const &other) const;

2455 11 operator != 0 4 3582 23 LVecBase3d::operator != 0 1 463 0
67
inline bool LVecBase3d::operator !=(LVecBase3d const &other) const;

2456 20 get_standardized_hpr 0 4 3582 32 LVecBase3d::get_standardized_hpr 0 1 464 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3d LVecBase3d::get_standardized_hpr(void) const;

2457 10 compare_to 0 4 3582 22 LVecBase3d::compare_to 0 2 465 466 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase3d::compare_to(LVecBase3d const &other) const;
inline int LVecBase3d::compare_to(LVecBase3d const &other, double threshold) const;

2458 8 get_hash 0 4 3582 20 LVecBase3d::get_hash 0 2 467 468 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase3d::get_hash(void) const;
inline unsigned int LVecBase3d::get_hash(double threshold) const;

2459 8 add_hash 0 4 3582 20 LVecBase3d::add_hash 0 2 469 470 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase3d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase3d::add_hash(unsigned int hash, double threshold) const;

2460 13 generate_hash 0 4 3582 25 LVecBase3d::generate_hash 0 2 471 472 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2461 10 operator - 0 68 3582 22 LVecBase3d::operator - 0 1 473 0
53
inline LVecBase3d LVecBase3d::operator -(void) const;

2462 10 operator + 0 4 3582 22 LVecBase3d::operator + 0 1 474 0
72
inline LVecBase3d LVecBase3d::operator +(LVecBase3d const &other) const;

2463 10 operator - 0 4 3582 22 LVecBase3d::operator - 0 1 475 0
72
inline LVecBase3d LVecBase3d::operator -(LVecBase3d const &other) const;

2464 10 operator * 0 4 3582 22 LVecBase3d::operator * 0 1 476 0
62
inline LVecBase3d LVecBase3d::operator *(double scalar) const;

2465 10 operator / 0 4 3582 22 LVecBase3d::operator / 0 1 477 0
62
inline LVecBase3d LVecBase3d::operator /(double scalar) const;

2466 11 operator += 0 4 3582 23 LVecBase3d::operator += 0 1 478 0
61
inline void LVecBase3d::operator +=(LVecBase3d const &other);

2467 11 operator -= 0 4 3582 23 LVecBase3d::operator -= 0 1 479 0
61
inline void LVecBase3d::operator -=(LVecBase3d const &other);

2468 11 operator *= 0 4 3582 23 LVecBase3d::operator *= 0 1 480 0
51
inline void LVecBase3d::operator *=(double scalar);

2469 11 operator /= 0 4 3582 23 LVecBase3d::operator /= 0 1 481 0
51
inline void LVecBase3d::operator /=(double scalar);

2470 18 componentwise_mult 0 4 3582 30 LVecBase3d::componentwise_mult 0 1 482 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::componentwise_mult(LVecBase3d const &other);

2471 7 __pow__ 0 4 3582 19 LVecBase3d::__pow__ 0 1 483 0
61
inline LVecBase3d LVecBase3d::__pow__(double exponent) const;

2472 8 __ipow__ 0 4 3582 20 LVecBase3d::__ipow__ 0 1 484 0
69
inline _object *LVecBase3d::__ipow__(_object *self, double exponent);

2473 4 fmax 0 4 3582 16 LVecBase3d::fmax 0 1 485 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LVecBase3d::fmax(LVecBase3d const &other) const;

2474 4 fmin 0 4 3582 16 LVecBase3d::fmin 0 1 486 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LVecBase3d::fmin(LVecBase3d const &other) const;

2475 10 cross_into 0 4 3582 22 LVecBase3d::cross_into 0 1 487 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3d::cross_into(LVecBase3d const &other);

2476 12 almost_equal 0 4 3582 24 LVecBase3d::almost_equal 0 2 488 489 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase3d::almost_equal(LVecBase3d const &other, double threshold) const;
inline bool LVecBase3d::almost_equal(LVecBase3d const &other) const;

2477 6 output 0 4 3582 18 LVecBase3d::output 0 1 490 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3d::output(ostream &out) const;

2478 11 python_repr 0 4 3582 23 LVecBase3d::python_repr 0 1 491 0
96
inline void LVecBase3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2479 20 write_datagram_fixed 0 4 3582 32 LVecBase3d::write_datagram_fixed 0 1 492 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3d::write_datagram_fixed(Datagram &destination) const;

2480 19 read_datagram_fixed 0 4 3582 31 LVecBase3d::read_datagram_fixed 0 1 493 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3d::read_datagram_fixed(DatagramIterator &source);

2481 14 write_datagram 0 4 3582 26 LVecBase3d::write_datagram 0 1 494 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3d::write_datagram(Datagram &destination) const;

2482 13 read_datagram 0 4 3582 25 LVecBase3d::read_datagram 0 1 495 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3d::read_datagram(DatagramIterator &source);

2483 14 get_class_type 0 4 3582 26 LVecBase3d::get_class_type 0 1 496 0
51
static TypeHandle LVecBase3d::get_class_type(void);

2484 10 LVecBase3i 0 4 3583 22 LVecBase3i::LVecBase3i 0 5 497 498 499 500 501 1114
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
252
inline LVecBase3i::LVecBase3i(void);
inline LVecBase3i::LVecBase3i(LVecBase3i const &copy);
inline LVecBase3i::LVecBase3i(int fill_value);
inline LVecBase3i::LVecBase3i(int x, int y, int z);
inline LVecBase3i::LVecBase3i(LVecBase2i const &copy, int z);

2485 10 operator = 0 4 3583 22 LVecBase3i::operator = 0 2 502 503 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
125
inline LVecBase3i &LVecBase3i::operator =(LVecBase3i const &copy);
inline LVecBase3i &LVecBase3i::operator =(int fill_value);

2486 12 operator new 0 4 3583 24 LVecBase3i::operator new 0 1 504 0
126
inline void *LVecBase3i::operator new(unsigned int size);
inline void *LVecBase3i::operator new(unsigned int size, void *ptr);

2487 15 operator delete 0 4 3583 27 LVecBase3i::operator delete 0 0 0
108
inline void LVecBase3i::operator delete(void *ptr);
inline void LVecBase3i::operator delete(void *, void *);

2488 12 validate_ptr 0 4 3583 24 LVecBase3i::validate_ptr 0 0 0
61
static inline bool LVecBase3i::validate_ptr(void const *ptr);

2489 4 zero 0 4 3583 16 LVecBase3i::zero 0 1 505 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase3i const &LVecBase3i::zero(void);

2490 6 unit_x 0 4 3583 18 LVecBase3i::unit_x 0 1 506 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_x(void);

2491 6 unit_y 0 4 3583 18 LVecBase3i::unit_y 0 1 507 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_y(void);

2492 6 unit_z 0 4 3583 18 LVecBase3i::unit_z 0 1 508 256
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase3i const &LVecBase3i::unit_z(void);

2493 11 ~LVecBase3i 0 4 3583 23 LVecBase3i::~LVecBase3i 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase3i::~LVecBase3i(void);

2494 10 __reduce__ 0 4 3583 22 LVecBase3i::__reduce__ 0 1 509 0
60
inline _object *LVecBase3i::__reduce__(_object *self) const;

2495 11 __getattr__ 0 4 3583 23 LVecBase3i::__getattr__ 0 1 510 0
85
inline _object *LVecBase3i::__getattr__(basic_string< char > const &attr_name) const;

2496 11 __setattr__ 0 4 3583 23 LVecBase3i::__setattr__ 0 1 511 0
106
inline int LVecBase3i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2497 11 operator [] 0 4 3583 23 LVecBase3i::operator [] 0 2 512 513 224
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase3i::operator [](int i) const;
inline int &LVecBase3i::operator [](int i);

2498 11 __setitem__ 0 4 3583 23 LVecBase3i::__setitem__ 0 1 514 0
50
inline void LVecBase3i::__setitem__(int i, int v);

2499 4 size 0 4 3583 16 LVecBase3i::size 0 1 515 271
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase3i::size(void);

2500 6 is_nan 0 4 3583 18 LVecBase3i::is_nan 0 1 516 308
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase3i::is_nan(void) const;

2501 8 get_cell 0 4 3583 20 LVecBase3i::get_cell 0 1 517 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase3i::get_cell(int i) const;

2502 5 get_x 0 4 3583 17 LVecBase3i::get_x 0 1 518 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_x(void) const;

2503 5 get_y 0 4 3583 17 LVecBase3i::get_y 0 1 519 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_y(void) const;

2504 5 get_z 0 4 3583 17 LVecBase3i::get_z 0 1 520 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase3i::get_z(void) const;

2505 8 set_cell 0 4 3583 20 LVecBase3i::set_cell 0 1 521 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3i::set_cell(int i, int value);

2506 5 set_x 0 4 3583 17 LVecBase3i::set_x 0 1 522 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_x(int value);

2507 5 set_y 0 4 3583 17 LVecBase3i::set_y 0 1 523 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_y(int value);

2508 5 set_z 0 4 3583 17 LVecBase3i::set_z 0 1 524 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::set_z(int value);

2509 6 get_xy 0 4 3583 18 LVecBase3i::get_xy 0 1 525 317
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_xy(void) const;

2510 6 get_xz 0 4 3583 18 LVecBase3i::get_xz 0 1 526 322
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_xz(void) const;

2511 6 get_yz 0 4 3583 18 LVecBase3i::get_yz 0 1 527 316
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
49
inline LVecBase2i LVecBase3i::get_yz(void) const;

2512 11 add_to_cell 0 4 3583 23 LVecBase3i::add_to_cell 0 1 528 374
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase3i::add_to_cell(int i, int value);

2513 5 add_x 0 4 3583 17 LVecBase3i::add_x 0 1 529 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_x(int value);

2514 5 add_y 0 4 3583 17 LVecBase3i::add_y 0 1 530 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_y(int value);

2515 5 add_z 0 4 3583 17 LVecBase3i::add_z 0 1 531 212
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase3i::add_z(int value);

2516 8 get_data 0 4 3583 20 LVecBase3i::get_data 0 1 532 399
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase3i::get_data(void) const;

2517 18 get_num_components 0 4 3583 30 LVecBase3i::get_num_components 0 1 533 278
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase3i::get_num_components(void) const;

2518 4 fill 0 4 3583 16 LVecBase3i::fill 0 1 534 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase3i::fill(int fill_value);

2519 3 set 0 4 3583 15 LVecBase3i::set 0 1 535 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void LVecBase3i::set(int x, int y, int z);

2520 3 dot 0 4 3583 15 LVecBase3i::dot 0 1 536 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase3i::dot(LVecBase3i const &other) const;

2521 14 length_squared 0 4 3583 26 LVecBase3i::length_squared 0 1 537 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase3i::length_squared(void) const;

2522 5 cross 0 4 3583 17 LVecBase3i::cross 0 1 538 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
inline LVecBase3i LVecBase3i::cross(LVecBase3i const &other) const;

2523 10 operator < 0 4 3583 22 LVecBase3i::operator < 0 1 539 0
66
inline bool LVecBase3i::operator <(LVecBase3i const &other) const;

2524 11 operator == 0 4 3583 23 LVecBase3i::operator == 0 1 540 0
67
inline bool LVecBase3i::operator ==(LVecBase3i const &other) const;

2525 11 operator != 0 4 3583 23 LVecBase3i::operator != 0 1 541 0
67
inline bool LVecBase3i::operator !=(LVecBase3i const &other) const;

2526 20 get_standardized_hpr 0 4 3583 32 LVecBase3i::get_standardized_hpr 0 1 542 1030
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
////////////////////////////////////////////////////////////////////
63
inline LVecBase3i LVecBase3i::get_standardized_hpr(void) const;

2527 10 compare_to 0 4 3583 22 LVecBase3i::compare_to 0 1 543 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase3i::compare_to(LVecBase3i const &other) const;

2528 8 get_hash 0 4 3583 20 LVecBase3i::get_hash 0 1 544 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase3i::get_hash(void) const;

2529 8 add_hash 0 4 3583 20 LVecBase3i::add_hash 0 1 545 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase3i::add_hash(unsigned int hash) const;

2530 13 generate_hash 0 4 3583 25 LVecBase3i::generate_hash 0 1 546 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase3i::generate_hash(ChecksumHashGenerator &hashgen) const;

2531 10 operator - 0 68 3583 22 LVecBase3i::operator - 0 1 547 0
53
inline LVecBase3i LVecBase3i::operator -(void) const;

2532 10 operator + 0 4 3583 22 LVecBase3i::operator + 0 1 548 0
72
inline LVecBase3i LVecBase3i::operator +(LVecBase3i const &other) const;

2533 10 operator - 0 4 3583 22 LVecBase3i::operator - 0 1 549 0
72
inline LVecBase3i LVecBase3i::operator -(LVecBase3i const &other) const;

2534 10 operator * 0 4 3583 22 LVecBase3i::operator * 0 1 550 0
59
inline LVecBase3i LVecBase3i::operator *(int scalar) const;

2535 10 operator / 0 4 3583 22 LVecBase3i::operator / 0 1 551 0
59
inline LVecBase3i LVecBase3i::operator /(int scalar) const;

2536 11 operator += 0 4 3583 23 LVecBase3i::operator += 0 1 552 0
61
inline void LVecBase3i::operator +=(LVecBase3i const &other);

2537 11 operator -= 0 4 3583 23 LVecBase3i::operator -= 0 1 553 0
61
inline void LVecBase3i::operator -=(LVecBase3i const &other);

2538 11 operator *= 0 4 3583 23 LVecBase3i::operator *= 0 1 554 0
48
inline void LVecBase3i::operator *=(int scalar);

2539 11 operator /= 0 4 3583 23 LVecBase3i::operator /= 0 1 555 0
48
inline void LVecBase3i::operator /=(int scalar);

2540 18 componentwise_mult 0 4 3583 30 LVecBase3i::componentwise_mult 0 1 556 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3i::componentwise_mult(LVecBase3i const &other);

2541 7 __pow__ 0 4 3583 19 LVecBase3i::__pow__ 0 1 557 0
58
inline LVecBase3i LVecBase3i::__pow__(int exponent) const;

2542 8 __ipow__ 0 4 3583 20 LVecBase3i::__ipow__ 0 1 558 0
66
inline _object *LVecBase3i::__ipow__(_object *self, int exponent);

2543 4 fmax 0 4 3583 16 LVecBase3i::fmax 0 1 559 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3i LVecBase3i::fmax(LVecBase3i const &other) const;

2544 4 fmin 0 4 3583 16 LVecBase3i::fmin 0 1 560 211
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase3i LVecBase3i::fmin(LVecBase3i const &other) const;

2545 10 cross_into 0 4 3583 22 LVecBase3i::cross_into 0 1 561 241
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline void LVecBase3i::cross_into(LVecBase3i const &other);

2546 12 almost_equal 0 4 3583 24 LVecBase3i::almost_equal 0 2 562 563 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase3i::almost_equal(LVecBase3i const &other, int threshold) const;
inline bool LVecBase3i::almost_equal(LVecBase3i const &other) const;

2547 6 output 0 4 3583 18 LVecBase3i::output 0 1 564 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase3i::output(ostream &out) const;

2548 11 python_repr 0 4 3583 23 LVecBase3i::python_repr 0 1 565 0
96
inline void LVecBase3i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2549 20 write_datagram_fixed 0 4 3583 32 LVecBase3i::write_datagram_fixed 0 1 566 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase3i::write_datagram_fixed(Datagram &destination) const;

2550 19 read_datagram_fixed 0 4 3583 31 LVecBase3i::read_datagram_fixed 0 1 567 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase3i::read_datagram_fixed(DatagramIterator &source);

2551 14 write_datagram 0 4 3583 26 LVecBase3i::write_datagram 0 1 568 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase3i::write_datagram(Datagram &destination) const;

2552 13 read_datagram 0 4 3583 25 LVecBase3i::read_datagram 0 1 569 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase3i::read_datagram(DatagramIterator &source);

2553 14 get_class_type 0 4 3583 26 LVecBase3i::get_class_type 0 1 570 0
51
static TypeHandle LVecBase3i::get_class_type(void);

2554 29 get_default_coordinate_system 0 1 0 29 get_default_coordinate_system 0 1 1920 0
53
CoordinateSystem get_default_coordinate_system(void);

2555 30 parse_coordinate_system_string 0 1 0 30 parse_coordinate_system_string 0 1 1921 0
81
CoordinateSystem parse_coordinate_system_string(basic_string< char > const &str);

2556 24 format_coordinate_system 0 1 0 24 format_coordinate_system 0 1 1922 0
67
basic_string< char > format_coordinate_system(CoordinateSystem cs);

2557 15 is_right_handed 0 1 0 15 is_right_handed 0 2 1923 1924 0
48
bool is_right_handed(CoordinateSystem cs = (0));

2558 9 LVector3f 0 4 3585 20 LVector3f::LVector3f 0 5 571 572 573 574 575 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
252
inline LVector3f::LVector3f(void);
inline LVector3f::LVector3f(LVecBase3f const &copy);
inline LVector3f::LVector3f(float fill_value);
inline LVector3f::LVector3f(float x, float y, float z);
inline LVector3f::LVector3f(LVecBase2f const &copy, float z);

2559 10 operator = 0 4 3585 21 LVector3f::operator = 0 2 576 577 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector3f &LVector3f::operator =(LVecBase3f const &copy);
inline LVector3f &LVector3f::operator =(float fill_value);

2560 11 __getattr__ 0 4 3585 22 LVector3f::__getattr__ 0 1 578 0
84
inline _object *LVector3f::__getattr__(basic_string< char > const &attr_name) const;

2561 11 __setattr__ 0 4 3585 22 LVector3f::__setattr__ 0 1 579 0
105
inline int LVector3f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2562 4 zero 0 4 3585 15 LVector3f::zero 0 1 580 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3f const &LVector3f::zero(void);

2563 6 unit_x 0 4 3585 17 LVector3f::unit_x 0 1 581 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_x(void);

2564 6 unit_y 0 4 3585 17 LVector3f::unit_y 0 1 582 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_y(void);

2565 6 unit_z 0 4 3585 17 LVector3f::unit_z 0 1 583 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3f const &LVector3f::unit_z(void);

2566 6 get_xy 0 4 3585 17 LVector3f::get_xy 0 1 584 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xy(void) const;

2567 6 get_xz 0 4 3585 17 LVector3f::get_xz 0 1 585 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_xz(void) const;

2568 6 get_yz 0 4 3585 17 LVector3f::get_yz 0 1 586 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2f LVector3f::get_yz(void) const;

2569 10 operator - 0 68 3585 21 LVector3f::operator - 0 1 587 0
51
inline LVector3f LVector3f::operator -(void) const;

2570 10 operator + 0 4 3585 21 LVector3f::operator + 0 2 588 589 0
141
inline LVecBase3f LVector3f::operator +(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator +(LVector3f const &other) const;

2571 10 operator - 0 4 3585 21 LVector3f::operator - 0 2 590 591 0
141
inline LVecBase3f LVector3f::operator -(LVecBase3f const &other) const;
inline LVector3f LVector3f::operator -(LVector3f const &other) const;

2572 5 cross 0 4 3585 16 LVector3f::cross 0 1 592 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3f LVector3f::cross(LVecBase3f const &other) const;

2573 7 project 0 4 3585 18 LVector3f::project 0 1 593 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3f LVector3f::project(LVecBase3f const &onto) const;

2574 9 angle_rad 0 4 3585 20 LVector3f::angle_rad 0 1 594 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_rad(LVector3f const &other) const;

2575 9 angle_deg 0 4 3585 20 LVector3f::angle_deg 0 1 595 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
64
inline float LVector3f::angle_deg(LVector3f const &other) const;

2576 16 signed_angle_rad 0 4 3585 27 LVector3f::signed_angle_rad 0 1 596 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_rad(LVector3f const &other, LVector3f const &ref) const;

2577 16 signed_angle_deg 0 4 3585 27 LVector3f::signed_angle_deg 0 1 597 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
93
inline float LVector3f::signed_angle_deg(LVector3f const &other, LVector3f const &ref) const;

2578 18 relative_angle_rad 0 4 3585 29 LVector3f::relative_angle_rad 0 1 598 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_rad(LVector3f const &other) const;

2579 18 relative_angle_deg 0 4 3585 29 LVector3f::relative_angle_deg 0 1 599 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
73
inline float LVector3f::relative_angle_deg(LVector3f const &other) const;

2580 10 operator * 0 4 3585 21 LVector3f::operator * 0 1 600 0
59
inline LVector3f LVector3f::operator *(float scalar) const;

2581 10 operator / 0 4 3585 21 LVector3f::operator / 0 1 601 0
59
inline LVector3f LVector3f::operator /(float scalar) const;

2582 2 up 0 4 3585 13 LVector3f::up 0 2 602 603 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
65
static inline LVector3f LVector3f::up(CoordinateSystem cs = (0));

2583 5 right 0 4 3585 16 LVector3f::right 0 2 604 605 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
68
static inline LVector3f LVector3f::right(CoordinateSystem cs = (0));

2584 7 forward 0 4 3585 18 LVector3f::forward 0 2 606 607 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
70
static inline LVector3f LVector3f::forward(CoordinateSystem cs = (0));

2585 4 down 0 4 3585 15 LVector3f::down 0 2 608 609 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3f LVector3f::down(CoordinateSystem cs = (0));

2586 4 left 0 4 3585 15 LVector3f::left 0 2 610 611 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3f LVector3f::left(CoordinateSystem cs = (0));

2587 4 back 0 4 3585 15 LVector3f::back 0 2 612 613 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3f LVector3f::back(CoordinateSystem cs = (0));

2588 3 rfu 0 4 3585 14 LVector3f::rfu 0 2 614 615 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
100
static inline LVector3f LVector3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (0));

2589 11 python_repr 0 4 3585 22 LVector3f::python_repr 0 1 616 0
95
inline void LVector3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2590 14 get_class_type 0 4 3585 25 LVector3f::get_class_type 0 1 617 0
50
static TypeHandle LVector3f::get_class_type(void);

2591 10 ~LVector3f 0 4 3585 21 LVector3f::~LVector3f 0 0 0
28
LVector3f::~LVector3f(void);

2592 9 LVector3d 0 4 3586 20 LVector3d::LVector3d 0 5 618 619 620 621 622 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
257
inline LVector3d::LVector3d(void);
inline LVector3d::LVector3d(LVecBase3d const &copy);
inline LVector3d::LVector3d(double fill_value);
inline LVector3d::LVector3d(double x, double y, double z);
inline LVector3d::LVector3d(LVecBase2d const &copy, double z);

2593 10 operator = 0 4 3586 21 LVector3d::operator = 0 2 623 624 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector3d &LVector3d::operator =(LVecBase3d const &copy);
inline LVector3d &LVector3d::operator =(double fill_value);

2594 11 __getattr__ 0 4 3586 22 LVector3d::__getattr__ 0 1 625 0
84
inline _object *LVector3d::__getattr__(basic_string< char > const &attr_name) const;

2595 11 __setattr__ 0 4 3586 22 LVector3d::__setattr__ 0 1 626 0
105
inline int LVector3d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2596 4 zero 0 4 3586 15 LVector3d::zero 0 1 627 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3d const &LVector3d::zero(void);

2597 6 unit_x 0 4 3586 17 LVector3d::unit_x 0 1 628 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_x(void);

2598 6 unit_y 0 4 3586 17 LVector3d::unit_y 0 1 629 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_y(void);

2599 6 unit_z 0 4 3586 17 LVector3d::unit_z 0 1 630 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3d const &LVector3d::unit_z(void);

2600 6 get_xy 0 4 3586 17 LVector3d::get_xy 0 1 631 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xy(void) const;

2601 6 get_xz 0 4 3586 17 LVector3d::get_xz 0 1 632 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_xz(void) const;

2602 6 get_yz 0 4 3586 17 LVector3d::get_yz 0 1 633 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2d LVector3d::get_yz(void) const;

2603 10 operator - 0 68 3586 21 LVector3d::operator - 0 1 634 0
51
inline LVector3d LVector3d::operator -(void) const;

2604 10 operator + 0 4 3586 21 LVector3d::operator + 0 2 635 636 0
141
inline LVecBase3d LVector3d::operator +(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator +(LVector3d const &other) const;

2605 10 operator - 0 4 3586 21 LVector3d::operator - 0 2 637 638 0
141
inline LVecBase3d LVector3d::operator -(LVecBase3d const &other) const;
inline LVector3d LVector3d::operator -(LVector3d const &other) const;

2606 5 cross 0 4 3586 16 LVector3d::cross 0 1 639 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3d LVector3d::cross(LVecBase3d const &other) const;

2607 7 project 0 4 3586 18 LVector3d::project 0 1 640 389
////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector3d LVector3d::project(LVecBase3d const &onto) const;

2608 9 angle_rad 0 4 3586 20 LVector3d::angle_rad 0 1 641 385
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_rad(LVector3d const &other) const;

2609 9 angle_deg 0 4 3586 20 LVector3d::angle_deg 0 1 642 376
////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
////////////////////////////////////////////////////////////////////
65
inline double LVector3d::angle_deg(LVector3d const &other) const;

2610 16 signed_angle_rad 0 4 3586 27 LVector3d::signed_angle_rad 0 1 643 548
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_rad(LVector3d const &other, LVector3d const &ref) const;

2611 16 signed_angle_deg 0 4 3586 27 LVector3d::signed_angle_deg 0 1 644 549
////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
////////////////////////////////////////////////////////////////////
94
inline double LVector3d::signed_angle_deg(LVector3d const &other, LVector3d const &ref) const;

2612 18 relative_angle_rad 0 4 3586 29 LVector3d::relative_angle_rad 0 1 645 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_rad(LVector3d const &other) const;

2613 18 relative_angle_deg 0 4 3586 29 LVector3d::relative_angle_deg 0 1 646 266
////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
////////////////////////////////////////////////////////////////////
74
inline double LVector3d::relative_angle_deg(LVector3d const &other) const;

2614 10 operator * 0 4 3586 21 LVector3d::operator * 0 1 647 0
60
inline LVector3d LVector3d::operator *(double scalar) const;

2615 10 operator / 0 4 3586 21 LVector3d::operator / 0 1 648 0
60
inline LVector3d LVector3d::operator /(double scalar) const;

2616 2 up 0 4 3586 13 LVector3d::up 0 2 649 650 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
65
static inline LVector3d LVector3d::up(CoordinateSystem cs = (0));

2617 5 right 0 4 3586 16 LVector3d::right 0 2 651 652 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
68
static inline LVector3d LVector3d::right(CoordinateSystem cs = (0));

2618 7 forward 0 4 3586 18 LVector3d::forward 0 2 653 654 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
70
static inline LVector3d LVector3d::forward(CoordinateSystem cs = (0));

2619 4 down 0 4 3586 15 LVector3d::down 0 2 655 656 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3d LVector3d::down(CoordinateSystem cs = (0));

2620 4 left 0 4 3586 15 LVector3d::left 0 2 657 658 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3d LVector3d::left(CoordinateSystem cs = (0));

2621 4 back 0 4 3586 15 LVector3d::back 0 2 659 660 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3d LVector3d::back(CoordinateSystem cs = (0));

2622 3 rfu 0 4 3586 14 LVector3d::rfu 0 2 661 662 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
103
static inline LVector3d LVector3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (0));

2623 11 python_repr 0 4 3586 22 LVector3d::python_repr 0 1 663 0
95
inline void LVector3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2624 14 get_class_type 0 4 3586 25 LVector3d::get_class_type 0 1 664 0
50
static TypeHandle LVector3d::get_class_type(void);

2625 10 ~LVector3d 0 4 3586 21 LVector3d::~LVector3d 0 0 0
28
LVector3d::~LVector3d(void);

2626 9 LVector3i 0 4 3587 20 LVector3i::LVector3i 0 5 665 666 667 668 669 1121
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
242
inline LVector3i::LVector3i(void);
inline LVector3i::LVector3i(LVecBase3i const &copy);
inline LVector3i::LVector3i(int fill_value);
inline LVector3i::LVector3i(int x, int y, int z);
inline LVector3i::LVector3i(LVecBase2i const &copy, int z);

2627 10 operator = 0 4 3587 21 LVector3i::operator = 0 2 670 671 462
////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector3i &LVector3i::operator =(LVecBase3i const &copy);
inline LVector3i &LVector3i::operator =(int fill_value);

2628 11 __getattr__ 0 4 3587 22 LVector3i::__getattr__ 0 1 672 0
84
inline _object *LVector3i::__getattr__(basic_string< char > const &attr_name) const;

2629 11 __setattr__ 0 4 3587 22 LVector3i::__setattr__ 0 1 673 0
105
inline int LVector3i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2630 4 zero 0 4 3587 15 LVector3i::zero 0 1 674 261
////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector3i const &LVector3i::zero(void);

2631 6 unit_x 0 4 3587 17 LVector3i::unit_x 0 1 675 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_x(void);

2632 6 unit_y 0 4 3587 17 LVector3i::unit_y 0 1 676 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_y(void);

2633 6 unit_z 0 4 3587 17 LVector3i::unit_z 0 1 677 258
////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector3i const &LVector3i::unit_z(void);

2634 6 get_xy 0 4 3587 17 LVector3i::get_xy 0 1 678 316
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_xy(void) const;

2635 6 get_xz 0 4 3587 17 LVector3i::get_xz 0 1 679 321
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_xz(void) const;

2636 6 get_yz 0 4 3587 17 LVector3i::get_yz 0 1 680 315
////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
47
inline LVector2i LVector3i::get_yz(void) const;

2637 10 operator - 0 68 3587 21 LVector3i::operator - 0 1 681 0
51
inline LVector3i LVector3i::operator -(void) const;

2638 10 operator + 0 4 3587 21 LVector3i::operator + 0 2 682 683 0
141
inline LVecBase3i LVector3i::operator +(LVecBase3i const &other) const;
inline LVector3i LVector3i::operator +(LVector3i const &other) const;

2639 10 operator - 0 4 3587 21 LVector3i::operator - 0 2 684 685 0
141
inline LVecBase3i LVector3i::operator -(LVecBase3i const &other) const;
inline LVector3i LVector3i::operator -(LVector3i const &other) const;

2640 5 cross 0 4 3587 16 LVector3i::cross 0 1 686 214
////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline LVector3i LVector3i::cross(LVecBase3i const &other) const;

2641 10 operator * 0 4 3587 21 LVector3i::operator * 0 1 687 0
57
inline LVector3i LVector3i::operator *(int scalar) const;

2642 10 operator / 0 4 3587 21 LVector3i::operator / 0 1 688 0
57
inline LVector3i LVector3i::operator /(int scalar) const;

2643 2 up 0 4 3587 13 LVector3i::up 0 2 689 690 291
////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
65
static inline LVector3i LVector3i::up(CoordinateSystem cs = (0));

2644 5 right 0 4 3587 16 LVector3i::right 0 2 691 692 297
////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
68
static inline LVector3i LVector3i::right(CoordinateSystem cs = (0));

2645 7 forward 0 4 3587 18 LVector3i::forward 0 2 693 694 301
////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
70
static inline LVector3i LVector3i::forward(CoordinateSystem cs = (0));

2646 4 down 0 4 3587 15 LVector3i::down 0 2 695 696 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3i LVector3i::down(CoordinateSystem cs = (0));

2647 4 left 0 4 3587 15 LVector3i::left 0 2 697 698 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3i LVector3i::left(CoordinateSystem cs = (0));

2648 4 back 0 4 3587 15 LVector3i::back 0 2 699 700 295
////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
////////////////////////////////////////////////////////////////////
67
static inline LVector3i LVector3i::back(CoordinateSystem cs = (0));

2649 3 rfu 0 4 3587 14 LVector3i::rfu 0 2 701 702 523
//  INLINE_LINMATH static FLOATNAME(LVector3) & rfu(FLOATTYPE right,

////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3)::
94
static inline LVector3i LVector3i::rfu(int right, int fwd, int up, CoordinateSystem cs = (0));

2650 11 python_repr 0 4 3587 22 LVector3i::python_repr 0 1 703 0
95
inline void LVector3i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2651 14 get_class_type 0 4 3587 25 LVector3i::get_class_type 0 1 704 0
50
static TypeHandle LVector3i::get_class_type(void);

2652 10 ~LVector3i 0 4 3587 21 LVector3i::~LVector3i 0 0 0
28
LVector3i::~LVector3i(void);

2653 8 LPoint3f 0 4 3588 18 LPoint3f::LPoint3f 0 5 705 706 707 708 709 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
242
inline LPoint3f::LPoint3f(void);
inline LPoint3f::LPoint3f(LVecBase3f const &copy);
inline LPoint3f::LPoint3f(float fill_value);
inline LPoint3f::LPoint3f(float x, float y, float z);
inline LPoint3f::LPoint3f(LVecBase2f const &copy, float z);

2654 10 operator = 0 4 3588 20 LPoint3f::operator = 0 2 710 711 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint3f &LPoint3f::operator =(LVecBase3f const &copy);
inline LPoint3f &LPoint3f::operator =(float fill_value);

2655 11 __getattr__ 0 4 3588 21 LPoint3f::__getattr__ 0 1 712 0
83
inline _object *LPoint3f::__getattr__(basic_string< char > const &attr_name) const;

2656 11 __setattr__ 0 4 3588 21 LPoint3f::__setattr__ 0 1 713 0
104
inline int LPoint3f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2657 4 zero 0 4 3588 14 LPoint3f::zero 0 1 714 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3f const &LPoint3f::zero(void);

2658 6 unit_x 0 4 3588 16 LPoint3f::unit_x 0 1 715 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_x(void);

2659 6 unit_y 0 4 3588 16 LPoint3f::unit_y 0 1 716 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_y(void);

2660 6 unit_z 0 4 3588 16 LPoint3f::unit_z 0 1 717 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3f const &LPoint3f::unit_z(void);

2661 6 get_xy 0 4 3588 16 LPoint3f::get_xy 0 1 718 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xy(void) const;

2662 6 get_xz 0 4 3588 16 LPoint3f::get_xz 0 1 719 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_xz(void) const;

2663 6 get_yz 0 4 3588 16 LPoint3f::get_yz 0 1 720 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2f LPoint3f::get_yz(void) const;

2664 10 operator - 0 68 3588 20 LPoint3f::operator - 0 1 721 0
49
inline LPoint3f LPoint3f::operator -(void) const;

2665 10 operator + 0 4 3588 20 LPoint3f::operator + 0 2 722 723 0
138
inline LVecBase3f LPoint3f::operator +(LVecBase3f const &other) const;
inline LPoint3f LPoint3f::operator +(LVector3f const &other) const;

2666 10 operator - 0 4 3588 20 LPoint3f::operator - 0 3 724 725 726 0
206
inline LVecBase3f LPoint3f::operator -(LVecBase3f const &other) const;
inline LVector3f LPoint3f::operator -(LPoint3f const &other) const;
inline LPoint3f LPoint3f::operator -(LVector3f const &other) const;

2667 5 cross 0 4 3588 15 LPoint3f::cross 0 1 727 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3f LPoint3f::cross(LVecBase3f const &other) const;

2668 7 project 0 4 3588 17 LPoint3f::project 0 1 728 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3f LPoint3f::project(LVecBase3f const &onto) const;

2669 10 operator * 0 4 3588 20 LPoint3f::operator * 0 1 729 0
57
inline LPoint3f LPoint3f::operator *(float scalar) const;

2670 10 operator / 0 4 3588 20 LPoint3f::operator / 0 1 730 0
57
inline LPoint3f LPoint3f::operator /(float scalar) const;

2671 6 origin 0 4 3588 16 LPoint3f::origin 0 2 731 732 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
74
static inline LPoint3f const &LPoint3f::origin(CoordinateSystem cs = (0));

2672 3 rfu 0 4 3588 13 LPoint3f::rfu 0 2 733 734 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
98
static inline LPoint3f LPoint3f::rfu(float right, float fwd, float up, CoordinateSystem cs = (0));

2673 11 python_repr 0 4 3588 21 LPoint3f::python_repr 0 1 735 0
94
inline void LPoint3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2674 14 get_class_type 0 4 3588 24 LPoint3f::get_class_type 0 1 736 0
49
static TypeHandle LPoint3f::get_class_type(void);

2675 9 ~LPoint3f 0 4 3588 19 LPoint3f::~LPoint3f 0 0 0
26
LPoint3f::~LPoint3f(void);

2676 8 LPoint3d 0 4 3589 18 LPoint3d::LPoint3d 0 5 737 738 739 740 741 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
247
inline LPoint3d::LPoint3d(void);
inline LPoint3d::LPoint3d(LVecBase3d const &copy);
inline LPoint3d::LPoint3d(double fill_value);
inline LPoint3d::LPoint3d(double x, double y, double z);
inline LPoint3d::LPoint3d(LVecBase2d const &copy, double z);

2677 10 operator = 0 4 3589 20 LPoint3d::operator = 0 2 742 743 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint3d &LPoint3d::operator =(LVecBase3d const &copy);
inline LPoint3d &LPoint3d::operator =(double fill_value);

2678 11 __getattr__ 0 4 3589 21 LPoint3d::__getattr__ 0 1 744 0
83
inline _object *LPoint3d::__getattr__(basic_string< char > const &attr_name) const;

2679 11 __setattr__ 0 4 3589 21 LPoint3d::__setattr__ 0 1 745 0
104
inline int LPoint3d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2680 4 zero 0 4 3589 14 LPoint3d::zero 0 1 746 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3d const &LPoint3d::zero(void);

2681 6 unit_x 0 4 3589 16 LPoint3d::unit_x 0 1 747 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_x(void);

2682 6 unit_y 0 4 3589 16 LPoint3d::unit_y 0 1 748 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_y(void);

2683 6 unit_z 0 4 3589 16 LPoint3d::unit_z 0 1 749 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3d const &LPoint3d::unit_z(void);

2684 6 get_xy 0 4 3589 16 LPoint3d::get_xy 0 1 750 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xy(void) const;

2685 6 get_xz 0 4 3589 16 LPoint3d::get_xz 0 1 751 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_xz(void) const;

2686 6 get_yz 0 4 3589 16 LPoint3d::get_yz 0 1 752 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2d LPoint3d::get_yz(void) const;

2687 10 operator - 0 68 3589 20 LPoint3d::operator - 0 1 753 0
49
inline LPoint3d LPoint3d::operator -(void) const;

2688 10 operator + 0 4 3589 20 LPoint3d::operator + 0 2 754 755 0
138
inline LVecBase3d LPoint3d::operator +(LVecBase3d const &other) const;
inline LPoint3d LPoint3d::operator +(LVector3d const &other) const;

2689 10 operator - 0 4 3589 20 LPoint3d::operator - 0 3 756 757 758 0
206
inline LVecBase3d LPoint3d::operator -(LVecBase3d const &other) const;
inline LVector3d LPoint3d::operator -(LPoint3d const &other) const;
inline LPoint3d LPoint3d::operator -(LVector3d const &other) const;

2690 5 cross 0 4 3589 15 LPoint3d::cross 0 1 759 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3d LPoint3d::cross(LVecBase3d const &other) const;

2691 7 project 0 4 3589 17 LPoint3d::project 0 1 760 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint3d LPoint3d::project(LVecBase3d const &onto) const;

2692 10 operator * 0 4 3589 20 LPoint3d::operator * 0 1 761 0
58
inline LPoint3d LPoint3d::operator *(double scalar) const;

2693 10 operator / 0 4 3589 20 LPoint3d::operator / 0 1 762 0
58
inline LPoint3d LPoint3d::operator /(double scalar) const;

2694 6 origin 0 4 3589 16 LPoint3d::origin 0 2 763 764 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
74
static inline LPoint3d const &LPoint3d::origin(CoordinateSystem cs = (0));

2695 3 rfu 0 4 3589 13 LPoint3d::rfu 0 2 765 766 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
101
static inline LPoint3d LPoint3d::rfu(double right, double fwd, double up, CoordinateSystem cs = (0));

2696 11 python_repr 0 4 3589 21 LPoint3d::python_repr 0 1 767 0
94
inline void LPoint3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2697 14 get_class_type 0 4 3589 24 LPoint3d::get_class_type 0 1 768 0
49
static TypeHandle LPoint3d::get_class_type(void);

2698 9 ~LPoint3d 0 4 3589 19 LPoint3d::~LPoint3d 0 0 0
26
LPoint3d::~LPoint3d(void);

2699 8 LPoint3i 0 4 3590 18 LPoint3i::LPoint3i 0 5 769 770 771 772 773 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
232
inline LPoint3i::LPoint3i(void);
inline LPoint3i::LPoint3i(LVecBase3i const &copy);
inline LPoint3i::LPoint3i(int fill_value);
inline LPoint3i::LPoint3i(int x, int y, int z);
inline LPoint3i::LPoint3i(LVecBase2i const &copy, int z);

2700 10 operator = 0 4 3590 20 LPoint3i::operator = 0 2 774 775 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint3i &LPoint3i::operator =(LVecBase3i const &copy);
inline LPoint3i &LPoint3i::operator =(int fill_value);

2701 11 __getattr__ 0 4 3590 21 LPoint3i::__getattr__ 0 1 776 0
83
inline _object *LPoint3i::__getattr__(basic_string< char > const &attr_name) const;

2702 11 __setattr__ 0 4 3590 21 LPoint3i::__setattr__ 0 1 777 0
104
inline int LPoint3i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2703 4 zero 0 4 3590 14 LPoint3i::zero 0 1 778 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint3i const &LPoint3i::zero(void);

2704 6 unit_x 0 4 3590 16 LPoint3i::unit_x 0 1 779 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_x(void);

2705 6 unit_y 0 4 3590 16 LPoint3i::unit_y 0 1 780 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_y(void);

2706 6 unit_z 0 4 3590 16 LPoint3i::unit_z 0 1 781 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint3i const &LPoint3i::unit_z(void);

2707 6 get_xy 0 4 3590 16 LPoint3i::get_xy 0 1 782 315
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_xy(void) const;

2708 6 get_xz 0 4 3590 16 LPoint3i::get_xz 0 1 783 320
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_xz(void) const;

2709 6 get_yz 0 4 3590 16 LPoint3i::get_yz 0 1 784 314
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
////////////////////////////////////////////////////////////////////
45
inline LPoint2i LPoint3i::get_yz(void) const;

2710 10 operator - 0 68 3590 20 LPoint3i::operator - 0 1 785 0
49
inline LPoint3i LPoint3i::operator -(void) const;

2711 10 operator + 0 4 3590 20 LPoint3i::operator + 0 2 786 787 0
138
inline LVecBase3i LPoint3i::operator +(LVecBase3i const &other) const;
inline LPoint3i LPoint3i::operator +(LVector3i const &other) const;

2712 10 operator - 0 4 3590 20 LPoint3i::operator - 0 3 788 789 790 0
206
inline LVecBase3i LPoint3i::operator -(LVecBase3i const &other) const;
inline LVector3i LPoint3i::operator -(LPoint3i const &other) const;
inline LPoint3i LPoint3i::operator -(LVector3i const &other) const;

2713 5 cross 0 4 3590 15 LPoint3i::cross 0 1 791 210
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline LPoint3i LPoint3i::cross(LVecBase3i const &other) const;

2714 10 operator * 0 4 3590 20 LPoint3i::operator * 0 1 792 0
55
inline LPoint3i LPoint3i::operator *(int scalar) const;

2715 10 operator / 0 4 3590 20 LPoint3i::operator / 0 1 793 0
55
inline LPoint3i LPoint3i::operator /(int scalar) const;

2716 6 origin 0 4 3590 16 LPoint3i::origin 0 2 794 795 440
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
////////////////////////////////////////////////////////////////////
74
static inline LPoint3i const &LPoint3i::origin(CoordinateSystem cs = (0));

2717 3 rfu 0 4 3590 13 LPoint3i::rfu 0 2 796 797 383
////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
////////////////////////////////////////////////////////////////////
92
static inline LPoint3i LPoint3i::rfu(int right, int fwd, int up, CoordinateSystem cs = (0));

2718 11 python_repr 0 4 3590 21 LPoint3i::python_repr 0 1 798 0
94
inline void LPoint3i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2719 14 get_class_type 0 4 3590 24 LPoint3i::get_class_type 0 1 799 0
49
static TypeHandle LPoint3i::get_class_type(void);

2720 9 ~LPoint3i 0 4 3590 19 LPoint3i::~LPoint3i 0 0 0
26
LPoint3i::~LPoint3i(void);

2721 10 LVecBase4f 0 4 3591 22 LVecBase4f::LVecBase4f 0 6 800 801 802 803 804 805 1351
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
335
inline LVecBase4f::LVecBase4f(void);
inline LVecBase4f::LVecBase4f(LVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(UnalignedLVecBase4f const &copy);
inline LVecBase4f::LVecBase4f(float fill_value);
inline LVecBase4f::LVecBase4f(float x, float y, float z, float w);
inline LVecBase4f::LVecBase4f(LVecBase3f const &copy, float w);

2722 10 operator = 0 4 3591 22 LVecBase4f::operator = 0 3 806 807 808 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
203
inline LVecBase4f &LVecBase4f::operator =(LVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(UnalignedLVecBase4f const &copy);
inline LVecBase4f &LVecBase4f::operator =(float fill_value);

2723 12 operator new 0 4 3591 24 LVecBase4f::operator new 0 1 809 0
126
inline void *LVecBase4f::operator new(unsigned int size);
inline void *LVecBase4f::operator new(unsigned int size, void *ptr);

2724 15 operator delete 0 4 3591 27 LVecBase4f::operator delete 0 0 0
108
inline void LVecBase4f::operator delete(void *ptr);
inline void LVecBase4f::operator delete(void *, void *);

2725 12 validate_ptr 0 4 3591 24 LVecBase4f::validate_ptr 0 0 0
61
static inline bool LVecBase4f::validate_ptr(void const *ptr);

2726 4 zero 0 4 3591 16 LVecBase4f::zero 0 1 810 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4f const &LVecBase4f::zero(void);

2727 6 unit_x 0 4 3591 18 LVecBase4f::unit_x 0 1 811 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_x(void);

2728 6 unit_y 0 4 3591 18 LVecBase4f::unit_y 0 1 812 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_y(void);

2729 6 unit_z 0 4 3591 18 LVecBase4f::unit_z 0 1 813 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_z(void);

2730 6 unit_w 0 4 3591 18 LVecBase4f::unit_w 0 1 814 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4f const &LVecBase4f::unit_w(void);

2731 11 ~LVecBase4f 0 4 3591 23 LVecBase4f::~LVecBase4f 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4f::~LVecBase4f(void);

2732 10 __reduce__ 0 4 3591 22 LVecBase4f::__reduce__ 0 1 815 0
60
inline _object *LVecBase4f::__reduce__(_object *self) const;

2733 11 __getattr__ 0 4 3591 23 LVecBase4f::__getattr__ 0 1 816 0
85
inline _object *LVecBase4f::__getattr__(basic_string< char > const &attr_name) const;

2734 11 __setattr__ 0 4 3591 23 LVecBase4f::__setattr__ 0 1 817 0
106
inline int LVecBase4f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2735 11 operator [] 0 4 3591 23 LVecBase4f::operator [] 0 2 818 819 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline float LVecBase4f::operator [](int i) const;
inline float &LVecBase4f::operator [](int i);

2736 11 __setitem__ 0 4 3591 23 LVecBase4f::__setitem__ 0 1 820 0
52
inline void LVecBase4f::__setitem__(int i, float v);

2737 4 size 0 4 3591 16 LVecBase4f::size 0 1 821 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4f::size(void);

2738 6 is_nan 0 4 3591 18 LVecBase4f::is_nan 0 1 822 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4f::is_nan(void) const;

2739 8 get_cell 0 4 3591 20 LVecBase4f::get_cell 0 1 823 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline float LVecBase4f::get_cell(int i) const;

2740 5 get_x 0 4 3591 17 LVecBase4f::get_x 0 1 824 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_x(void) const;

2741 5 get_y 0 4 3591 17 LVecBase4f::get_y 0 1 825 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_y(void) const;

2742 5 get_z 0 4 3591 17 LVecBase4f::get_z 0 1 826 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_z(void) const;

2743 5 get_w 0 4 3591 17 LVecBase4f::get_w 0 1 827 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline float LVecBase4f::get_w(void) const;

2744 8 set_cell 0 4 3591 20 LVecBase4f::set_cell 0 1 828 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void LVecBase4f::set_cell(int i, float value);

2745 5 set_x 0 4 3591 17 LVecBase4f::set_x 0 1 829 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_x(float value);

2746 5 set_y 0 4 3591 17 LVecBase4f::set_y 0 1 830 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_y(float value);

2747 5 set_z 0 4 3591 17 LVecBase4f::set_z 0 1 831 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_z(float value);

2748 5 set_w 0 4 3591 17 LVecBase4f::set_w 0 1 832 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::set_w(float value);

2749 11 add_to_cell 0 4 3591 23 LVecBase4f::add_to_cell 0 1 833 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4f::add_to_cell(int i, float value);

2750 5 add_x 0 4 3591 17 LVecBase4f::add_x 0 1 834 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_x(float value);

2751 5 add_y 0 4 3591 17 LVecBase4f::add_y 0 1 835 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_y(float value);

2752 5 add_z 0 4 3591 17 LVecBase4f::add_z 0 1 836 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_z(float value);

2753 5 add_w 0 4 3591 17 LVecBase4f::add_w 0 1 837 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline void LVecBase4f::add_w(float value);

2754 8 get_data 0 4 3591 20 LVecBase4f::get_data 0 1 838 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
53
inline float const *LVecBase4f::get_data(void) const;

2755 18 get_num_components 0 4 3591 30 LVecBase4f::get_num_components 0 1 839 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4f::get_num_components(void) const;

2756 4 fill 0 4 3591 16 LVecBase4f::fill 0 1 840 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LVecBase4f::fill(float fill_value);

2757 3 set 0 4 3591 15 LVecBase4f::set 0 1 841 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::set(float x, float y, float z, float w);

2758 3 dot 0 4 3591 15 LVecBase4f::dot 0 1 842 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline float LVecBase4f::dot(LVecBase4f const &other) const;

2759 14 length_squared 0 4 3591 26 LVecBase4f::length_squared 0 1 843 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
52
inline float LVecBase4f::length_squared(void) const;

2760 6 length 0 4 3591 18 LVecBase4f::length 0 1 844 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
44
inline float LVecBase4f::length(void) const;

2761 9 normalize 0 4 3591 21 LVecBase4f::normalize 0 1 845 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4f::normalize(void);

2762 7 project 0 4 3591 19 LVecBase4f::project 0 1 846 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f LVecBase4f::project(LVecBase4f const &onto) const;

2763 10 operator < 0 4 3591 22 LVecBase4f::operator < 0 1 847 0
66
inline bool LVecBase4f::operator <(LVecBase4f const &other) const;

2764 11 operator == 0 4 3591 23 LVecBase4f::operator == 0 1 848 0
67
inline bool LVecBase4f::operator ==(LVecBase4f const &other) const;

2765 11 operator != 0 4 3591 23 LVecBase4f::operator != 0 1 849 0
67
inline bool LVecBase4f::operator !=(LVecBase4f const &other) const;

2766 10 compare_to 0 4 3591 22 LVecBase4f::compare_to 0 2 850 851 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
148
inline int LVecBase4f::compare_to(LVecBase4f const &other) const;
inline int LVecBase4f::compare_to(LVecBase4f const &other, float threshold) const;

2767 8 get_hash 0 4 3591 20 LVecBase4f::get_hash 0 2 852 853 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
118
inline unsigned int LVecBase4f::get_hash(void) const;
inline unsigned int LVecBase4f::get_hash(float threshold) const;

2768 8 add_hash 0 4 3591 20 LVecBase4f::add_hash 0 2 854 855 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
150
inline unsigned int LVecBase4f::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4f::add_hash(unsigned int hash, float threshold) const;

2769 13 generate_hash 0 4 3591 25 LVecBase4f::generate_hash 0 2 856 857 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
170
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

2770 10 operator - 0 68 3591 22 LVecBase4f::operator - 0 1 858 0
53
inline LVecBase4f LVecBase4f::operator -(void) const;

2771 10 operator + 0 4 3591 22 LVecBase4f::operator + 0 1 859 0
72
inline LVecBase4f LVecBase4f::operator +(LVecBase4f const &other) const;

2772 10 operator - 0 4 3591 22 LVecBase4f::operator - 0 1 860 0
72
inline LVecBase4f LVecBase4f::operator -(LVecBase4f const &other) const;

2773 10 operator * 0 4 3591 22 LVecBase4f::operator * 0 1 861 0
61
inline LVecBase4f LVecBase4f::operator *(float scalar) const;

2774 10 operator / 0 4 3591 22 LVecBase4f::operator / 0 1 862 0
61
inline LVecBase4f LVecBase4f::operator /(float scalar) const;

2775 11 operator += 0 4 3591 23 LVecBase4f::operator += 0 1 863 0
61
inline void LVecBase4f::operator +=(LVecBase4f const &other);

2776 11 operator -= 0 4 3591 23 LVecBase4f::operator -= 0 1 864 0
61
inline void LVecBase4f::operator -=(LVecBase4f const &other);

2777 11 operator *= 0 4 3591 23 LVecBase4f::operator *= 0 1 865 0
50
inline void LVecBase4f::operator *=(float scalar);

2778 11 operator /= 0 4 3591 23 LVecBase4f::operator /= 0 1 866 0
50
inline void LVecBase4f::operator /=(float scalar);

2779 18 componentwise_mult 0 4 3591 30 LVecBase4f::componentwise_mult 0 1 867 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::componentwise_mult(LVecBase4f const &other);

2780 7 __pow__ 0 4 3591 19 LVecBase4f::__pow__ 0 1 868 0
60
inline LVecBase4f LVecBase4f::__pow__(float exponent) const;

2781 8 __ipow__ 0 4 3591 20 LVecBase4f::__ipow__ 0 1 869 0
68
inline _object *LVecBase4f::__ipow__(_object *self, float exponent);

2782 4 fmax 0 4 3591 16 LVecBase4f::fmax 0 1 870 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f LVecBase4f::fmax(LVecBase4f const &other) const;

2783 4 fmin 0 4 3591 16 LVecBase4f::fmin 0 1 871 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4f LVecBase4f::fmin(LVecBase4f const &other) const;

2784 12 almost_equal 0 4 3591 24 LVecBase4f::almost_equal 0 2 872 873 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
154
inline bool LVecBase4f::almost_equal(LVecBase4f const &other, float threshold) const;
inline bool LVecBase4f::almost_equal(LVecBase4f const &other) const;

2785 6 output 0 4 3591 18 LVecBase4f::output 0 1 874 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4f::output(ostream &out) const;

2786 11 python_repr 0 4 3591 23 LVecBase4f::python_repr 0 1 875 0
96
inline void LVecBase4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2787 20 write_datagram_fixed 0 4 3591 32 LVecBase4f::write_datagram_fixed 0 1 876 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4f::write_datagram_fixed(Datagram &destination) const;

2788 19 read_datagram_fixed 0 4 3591 31 LVecBase4f::read_datagram_fixed 0 1 877 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4f::read_datagram_fixed(DatagramIterator &source);

2789 14 write_datagram 0 4 3591 26 LVecBase4f::write_datagram 0 1 878 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4f::write_datagram(Datagram &destination) const;

2790 13 read_datagram 0 4 3591 25 LVecBase4f::read_datagram 0 1 879 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4f::read_datagram(DatagramIterator &source);

2791 14 get_class_type 0 4 3591 26 LVecBase4f::get_class_type 0 1 880 0
51
static TypeHandle LVecBase4f::get_class_type(void);

2792 19 UnalignedLVecBase4f 0 4 3592 40 UnalignedLVecBase4f::UnalignedLVecBase4f 0 4 881 882 883 884 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
294
inline UnalignedLVecBase4f::UnalignedLVecBase4f(void);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(LVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(UnalignedLVecBase4f const &copy);
inline UnalignedLVecBase4f::UnalignedLVecBase4f(float x, float y, float z, float w);

2793 10 operator = 0 4 3592 31 UnalignedLVecBase4f::operator = 0 2 885 886 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(LVecBase4f const &copy);
inline UnalignedLVecBase4f &UnalignedLVecBase4f::operator =(UnalignedLVecBase4f const &copy);

2794 3 set 0 4 3592 24 UnalignedLVecBase4f::set 0 1 887 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
73
inline void UnalignedLVecBase4f::set(float x, float y, float z, float w);

2795 11 operator [] 0 4 3592 32 UnalignedLVecBase4f::operator [] 0 2 888 889 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
114
inline float UnalignedLVecBase4f::operator [](int i) const;
inline float &UnalignedLVecBase4f::operator [](int i);

2796 11 __setitem__ 0 4 3592 32 UnalignedLVecBase4f::__setitem__ 0 1 890 0
61
inline void UnalignedLVecBase4f::__setitem__(int i, float v);

2797 4 size 0 4 3592 25 UnalignedLVecBase4f::size 0 1 891 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4f::size(void);

2798 8 get_data 0 4 3592 29 UnalignedLVecBase4f::get_data 0 1 892 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
62
inline float const *UnalignedLVecBase4f::get_data(void) const;

2799 18 get_num_components 0 4 3592 39 UnalignedLVecBase4f::get_num_components 0 1 893 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4f::get_num_components(void) const;

2800 14 get_class_type 0 4 3592 35 UnalignedLVecBase4f::get_class_type 0 1 894 0
60
static TypeHandle UnalignedLVecBase4f::get_class_type(void);

2801 20 ~UnalignedLVecBase4f 0 4 3592 41 UnalignedLVecBase4f::~UnalignedLVecBase4f 0 0 0
48
UnalignedLVecBase4f::~UnalignedLVecBase4f(void);

2802 10 LVecBase4d 0 4 3593 22 LVecBase4d::LVecBase4d 0 6 895 896 897 898 899 900 1351
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
341
inline LVecBase4d::LVecBase4d(void);
inline LVecBase4d::LVecBase4d(LVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(UnalignedLVecBase4d const &copy);
inline LVecBase4d::LVecBase4d(double fill_value);
inline LVecBase4d::LVecBase4d(double x, double y, double z, double w);
inline LVecBase4d::LVecBase4d(LVecBase3d const &copy, double w);

2803 10 operator = 0 4 3593 22 LVecBase4d::operator = 0 3 901 902 903 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
204
inline LVecBase4d &LVecBase4d::operator =(LVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(UnalignedLVecBase4d const &copy);
inline LVecBase4d &LVecBase4d::operator =(double fill_value);

2804 12 operator new 0 4 3593 24 LVecBase4d::operator new 0 1 904 0
126
inline void *LVecBase4d::operator new(unsigned int size);
inline void *LVecBase4d::operator new(unsigned int size, void *ptr);

2805 15 operator delete 0 4 3593 27 LVecBase4d::operator delete 0 0 0
108
inline void LVecBase4d::operator delete(void *ptr);
inline void LVecBase4d::operator delete(void *, void *);

2806 12 validate_ptr 0 4 3593 24 LVecBase4d::validate_ptr 0 0 0
61
static inline bool LVecBase4d::validate_ptr(void const *ptr);

2807 4 zero 0 4 3593 16 LVecBase4d::zero 0 1 905 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4d const &LVecBase4d::zero(void);

2808 6 unit_x 0 4 3593 18 LVecBase4d::unit_x 0 1 906 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_x(void);

2809 6 unit_y 0 4 3593 18 LVecBase4d::unit_y 0 1 907 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_y(void);

2810 6 unit_z 0 4 3593 18 LVecBase4d::unit_z 0 1 908 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_z(void);

2811 6 unit_w 0 4 3593 18 LVecBase4d::unit_w 0 1 909 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4d const &LVecBase4d::unit_w(void);

2812 11 ~LVecBase4d 0 4 3593 23 LVecBase4d::~LVecBase4d 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4d::~LVecBase4d(void);

2813 10 __reduce__ 0 4 3593 22 LVecBase4d::__reduce__ 0 1 910 0
60
inline _object *LVecBase4d::__reduce__(_object *self) const;

2814 11 __getattr__ 0 4 3593 23 LVecBase4d::__getattr__ 0 1 911 0
85
inline _object *LVecBase4d::__getattr__(basic_string< char > const &attr_name) const;

2815 11 __setattr__ 0 4 3593 23 LVecBase4d::__setattr__ 0 1 912 0
106
inline int LVecBase4d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2816 11 operator [] 0 4 3593 23 LVecBase4d::operator [] 0 2 913 914 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
98
inline double LVecBase4d::operator [](int i) const;
inline double &LVecBase4d::operator [](int i);

2817 11 __setitem__ 0 4 3593 23 LVecBase4d::__setitem__ 0 1 915 0
53
inline void LVecBase4d::__setitem__(int i, double v);

2818 4 size 0 4 3593 16 LVecBase4d::size 0 1 916 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4d::size(void);

2819 6 is_nan 0 4 3593 18 LVecBase4d::is_nan 0 1 917 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4d::is_nan(void) const;

2820 8 get_cell 0 4 3593 20 LVecBase4d::get_cell 0 1 918 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline double LVecBase4d::get_cell(int i) const;

2821 5 get_x 0 4 3593 17 LVecBase4d::get_x 0 1 919 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_x(void) const;

2822 5 get_y 0 4 3593 17 LVecBase4d::get_y 0 1 920 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_y(void) const;

2823 5 get_z 0 4 3593 17 LVecBase4d::get_z 0 1 921 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_z(void) const;

2824 5 get_w 0 4 3593 17 LVecBase4d::get_w 0 1 922 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline double LVecBase4d::get_w(void) const;

2825 8 set_cell 0 4 3593 20 LVecBase4d::set_cell 0 1 923 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4d::set_cell(int i, double value);

2826 5 set_x 0 4 3593 17 LVecBase4d::set_x 0 1 924 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_x(double value);

2827 5 set_y 0 4 3593 17 LVecBase4d::set_y 0 1 925 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_y(double value);

2828 5 set_z 0 4 3593 17 LVecBase4d::set_z 0 1 926 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_z(double value);

2829 5 set_w 0 4 3593 17 LVecBase4d::set_w 0 1 927 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::set_w(double value);

2830 11 add_to_cell 0 4 3593 23 LVecBase4d::add_to_cell 0 1 928 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void LVecBase4d::add_to_cell(int i, double value);

2831 5 add_x 0 4 3593 17 LVecBase4d::add_x 0 1 929 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_x(double value);

2832 5 add_y 0 4 3593 17 LVecBase4d::add_y 0 1 930 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_y(double value);

2833 5 add_z 0 4 3593 17 LVecBase4d::add_z 0 1 931 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_z(double value);

2834 5 add_w 0 4 3593 17 LVecBase4d::add_w 0 1 932 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
inline void LVecBase4d::add_w(double value);

2835 8 get_data 0 4 3593 20 LVecBase4d::get_data 0 1 933 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
54
inline double const *LVecBase4d::get_data(void) const;

2836 18 get_num_components 0 4 3593 30 LVecBase4d::get_num_components 0 1 934 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4d::get_num_components(void) const;

2837 4 fill 0 4 3593 16 LVecBase4d::fill 0 1 935 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
48
inline void LVecBase4d::fill(double fill_value);

2838 3 set 0 4 3593 15 LVecBase4d::set 0 1 936 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::set(double x, double y, double z, double w);

2839 3 dot 0 4 3593 15 LVecBase4d::dot 0 1 937 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline double LVecBase4d::dot(LVecBase4d const &other) const;

2840 14 length_squared 0 4 3593 26 LVecBase4d::length_squared 0 1 938 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
53
inline double LVecBase4d::length_squared(void) const;

2841 6 length 0 4 3593 18 LVecBase4d::length 0 1 939 295
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
////////////////////////////////////////////////////////////////////
45
inline double LVecBase4d::length(void) const;

2842 9 normalize 0 4 3593 21 LVecBase4d::normalize 0 1 940 367
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
////////////////////////////////////////////////////////////////////
40
inline bool LVecBase4d::normalize(void);

2843 7 project 0 4 3593 19 LVecBase4d::project 0 1 941 390
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4d LVecBase4d::project(LVecBase4d const &onto) const;

2844 10 operator < 0 4 3593 22 LVecBase4d::operator < 0 1 942 0
66
inline bool LVecBase4d::operator <(LVecBase4d const &other) const;

2845 11 operator == 0 4 3593 23 LVecBase4d::operator == 0 1 943 0
67
inline bool LVecBase4d::operator ==(LVecBase4d const &other) const;

2846 11 operator != 0 4 3593 23 LVecBase4d::operator != 0 1 944 0
67
inline bool LVecBase4d::operator !=(LVecBase4d const &other) const;

2847 10 compare_to 0 4 3593 22 LVecBase4d::compare_to 0 2 945 946 827
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
149
inline int LVecBase4d::compare_to(LVecBase4d const &other) const;
inline int LVecBase4d::compare_to(LVecBase4d const &other, double threshold) const;

2848 8 get_hash 0 4 3593 20 LVecBase4d::get_hash 0 2 947 948 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
119
inline unsigned int LVecBase4d::get_hash(void) const;
inline unsigned int LVecBase4d::get_hash(double threshold) const;

2849 8 add_hash 0 4 3593 20 LVecBase4d::add_hash 0 2 949 950 516
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
151
inline unsigned int LVecBase4d::add_hash(unsigned int hash) const;
inline unsigned int LVecBase4d::add_hash(unsigned int hash, double threshold) const;

2850 13 generate_hash 0 4 3593 25 LVecBase4d::generate_hash 0 2 951 952 546
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
171
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen) const;
inline void LVecBase4d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

2851 10 operator - 0 68 3593 22 LVecBase4d::operator - 0 1 953 0
53
inline LVecBase4d LVecBase4d::operator -(void) const;

2852 10 operator + 0 4 3593 22 LVecBase4d::operator + 0 1 954 0
72
inline LVecBase4d LVecBase4d::operator +(LVecBase4d const &other) const;

2853 10 operator - 0 4 3593 22 LVecBase4d::operator - 0 1 955 0
72
inline LVecBase4d LVecBase4d::operator -(LVecBase4d const &other) const;

2854 10 operator * 0 4 3593 22 LVecBase4d::operator * 0 1 956 0
62
inline LVecBase4d LVecBase4d::operator *(double scalar) const;

2855 10 operator / 0 4 3593 22 LVecBase4d::operator / 0 1 957 0
62
inline LVecBase4d LVecBase4d::operator /(double scalar) const;

2856 11 operator += 0 4 3593 23 LVecBase4d::operator += 0 1 958 0
61
inline void LVecBase4d::operator +=(LVecBase4d const &other);

2857 11 operator -= 0 4 3593 23 LVecBase4d::operator -= 0 1 959 0
61
inline void LVecBase4d::operator -=(LVecBase4d const &other);

2858 11 operator *= 0 4 3593 23 LVecBase4d::operator *= 0 1 960 0
51
inline void LVecBase4d::operator *=(double scalar);

2859 11 operator /= 0 4 3593 23 LVecBase4d::operator /= 0 1 961 0
51
inline void LVecBase4d::operator /=(double scalar);

2860 18 componentwise_mult 0 4 3593 30 LVecBase4d::componentwise_mult 0 1 962 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::componentwise_mult(LVecBase4d const &other);

2861 7 __pow__ 0 4 3593 19 LVecBase4d::__pow__ 0 1 963 0
61
inline LVecBase4d LVecBase4d::__pow__(double exponent) const;

2862 8 __ipow__ 0 4 3593 20 LVecBase4d::__ipow__ 0 1 964 0
69
inline _object *LVecBase4d::__ipow__(_object *self, double exponent);

2863 4 fmax 0 4 3593 16 LVecBase4d::fmax 0 1 965 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d LVecBase4d::fmax(LVecBase4d const &other) const;

2864 4 fmin 0 4 3593 16 LVecBase4d::fmin 0 1 966 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4d LVecBase4d::fmin(LVecBase4d const &other) const;

2865 12 almost_equal 0 4 3593 24 LVecBase4d::almost_equal 0 2 967 968 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
155
inline bool LVecBase4d::almost_equal(LVecBase4d const &other, double threshold) const;
inline bool LVecBase4d::almost_equal(LVecBase4d const &other) const;

2866 6 output 0 4 3593 18 LVecBase4d::output 0 1 969 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4d::output(ostream &out) const;

2867 11 python_repr 0 4 3593 23 LVecBase4d::python_repr 0 1 970 0
96
inline void LVecBase4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2868 20 write_datagram_fixed 0 4 3593 32 LVecBase4d::write_datagram_fixed 0 1 971 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4d::write_datagram_fixed(Datagram &destination) const;

2869 19 read_datagram_fixed 0 4 3593 31 LVecBase4d::read_datagram_fixed 0 1 972 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4d::read_datagram_fixed(DatagramIterator &source);

2870 14 write_datagram 0 4 3593 26 LVecBase4d::write_datagram 0 1 973 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4d::write_datagram(Datagram &destination) const;

2871 13 read_datagram 0 4 3593 25 LVecBase4d::read_datagram 0 1 974 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4d::read_datagram(DatagramIterator &source);

2872 14 get_class_type 0 4 3593 26 LVecBase4d::get_class_type 0 1 975 0
51
static TypeHandle LVecBase4d::get_class_type(void);

2873 19 UnalignedLVecBase4d 0 4 3594 40 UnalignedLVecBase4d::UnalignedLVecBase4d 0 4 976 977 978 979 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
298
inline UnalignedLVecBase4d::UnalignedLVecBase4d(void);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(LVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(UnalignedLVecBase4d const &copy);
inline UnalignedLVecBase4d::UnalignedLVecBase4d(double x, double y, double z, double w);

2874 10 operator = 0 4 3594 31 UnalignedLVecBase4d::operator = 0 2 980 981 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(LVecBase4d const &copy);
inline UnalignedLVecBase4d &UnalignedLVecBase4d::operator =(UnalignedLVecBase4d const &copy);

2875 3 set 0 4 3594 24 UnalignedLVecBase4d::set 0 1 982 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
inline void UnalignedLVecBase4d::set(double x, double y, double z, double w);

2876 11 operator [] 0 4 3594 32 UnalignedLVecBase4d::operator [] 0 2 983 984 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline double UnalignedLVecBase4d::operator [](int i) const;
inline double &UnalignedLVecBase4d::operator [](int i);

2877 11 __setitem__ 0 4 3594 32 UnalignedLVecBase4d::__setitem__ 0 1 985 0
62
inline void UnalignedLVecBase4d::__setitem__(int i, double v);

2878 4 size 0 4 3594 25 UnalignedLVecBase4d::size 0 1 986 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4d::size(void);

2879 8 get_data 0 4 3594 29 UnalignedLVecBase4d::get_data 0 1 987 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
63
inline double const *UnalignedLVecBase4d::get_data(void) const;

2880 18 get_num_components 0 4 3594 39 UnalignedLVecBase4d::get_num_components 0 1 988 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4d::get_num_components(void) const;

2881 14 get_class_type 0 4 3594 35 UnalignedLVecBase4d::get_class_type 0 1 989 0
60
static TypeHandle UnalignedLVecBase4d::get_class_type(void);

2882 20 ~UnalignedLVecBase4d 0 4 3594 41 UnalignedLVecBase4d::~UnalignedLVecBase4d 0 0 0
48
UnalignedLVecBase4d::~UnalignedLVecBase4d(void);

2883 10 LVecBase4i 0 4 3595 22 LVecBase4i::LVecBase4i 0 6 990 991 992 993 994 995 1351
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
323
inline LVecBase4i::LVecBase4i(void);
inline LVecBase4i::LVecBase4i(LVecBase4i const &copy);
inline LVecBase4i::LVecBase4i(UnalignedLVecBase4i const &copy);
inline LVecBase4i::LVecBase4i(int fill_value);
inline LVecBase4i::LVecBase4i(int x, int y, int z, int w);
inline LVecBase4i::LVecBase4i(LVecBase3i const &copy, int w);

2884 10 operator = 0 4 3595 22 LVecBase4i::operator = 0 3 996 997 998 703
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
201
inline LVecBase4i &LVecBase4i::operator =(LVecBase4i const &copy);
inline LVecBase4i &LVecBase4i::operator =(UnalignedLVecBase4i const &copy);
inline LVecBase4i &LVecBase4i::operator =(int fill_value);

2885 12 operator new 0 4 3595 24 LVecBase4i::operator new 0 1 999 0
126
inline void *LVecBase4i::operator new(unsigned int size);
inline void *LVecBase4i::operator new(unsigned int size, void *ptr);

2886 15 operator delete 0 4 3595 27 LVecBase4i::operator delete 0 0 0
108
inline void LVecBase4i::operator delete(void *ptr);
inline void LVecBase4i::operator delete(void *, void *);

2887 12 validate_ptr 0 4 3595 24 LVecBase4i::validate_ptr 0 0 0
61
static inline bool LVecBase4i::validate_ptr(void const *ptr);

2888 4 zero 0 4 3595 16 LVecBase4i::zero 0 1 1000 262
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
55
static inline LVecBase4i const &LVecBase4i::zero(void);

2889 6 unit_x 0 4 3595 18 LVecBase4i::unit_x 0 1 1001 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_x(void);

2890 6 unit_y 0 4 3595 18 LVecBase4i::unit_y 0 1 1002 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_y(void);

2891 6 unit_z 0 4 3595 18 LVecBase4i::unit_z 0 1 1003 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_z(void);

2892 6 unit_w 0 4 3595 18 LVecBase4i::unit_w 0 1 1004 259
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
57
static inline LVecBase4i const &LVecBase4i::unit_w(void);

2893 11 ~LVecBase4i 0 4 3595 23 LVecBase4i::~LVecBase4i 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline LVecBase4i::~LVecBase4i(void);

2894 10 __reduce__ 0 4 3595 22 LVecBase4i::__reduce__ 0 1 1005 0
60
inline _object *LVecBase4i::__reduce__(_object *self) const;

2895 11 __getattr__ 0 4 3595 23 LVecBase4i::__getattr__ 0 1 1006 0
85
inline _object *LVecBase4i::__getattr__(basic_string< char > const &attr_name) const;

2896 11 __setattr__ 0 4 3595 23 LVecBase4i::__setattr__ 0 1 1007 0
106
inline int LVecBase4i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2897 11 operator [] 0 4 3595 23 LVecBase4i::operator [] 0 2 1008 1009 227
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
92
inline int LVecBase4i::operator [](int i) const;
inline int &LVecBase4i::operator [](int i);

2898 11 __setitem__ 0 4 3595 23 LVecBase4i::__setitem__ 0 1 1010 0
50
inline void LVecBase4i::__setitem__(int i, int v);

2899 4 size 0 4 3595 16 LVecBase4i::size 0 1 1011 274
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
41
static inline int LVecBase4i::size(void);

2900 6 is_nan 0 4 3595 18 LVecBase4i::is_nan 0 1 1012 311
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
43
inline bool LVecBase4i::is_nan(void) const;

2901 8 get_cell 0 4 3595 20 LVecBase4i::get_cell 0 1 1013 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline int LVecBase4i::get_cell(int i) const;

2902 5 get_x 0 4 3595 17 LVecBase4i::get_x 0 1 1014 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_x(void) const;

2903 5 get_y 0 4 3595 17 LVecBase4i::get_y 0 1 1015 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_y(void) const;

2904 5 get_z 0 4 3595 17 LVecBase4i::get_z 0 1 1016 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_z(void) const;

2905 5 get_w 0 4 3595 17 LVecBase4i::get_w 0 1 1017 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline int LVecBase4i::get_w(void) const;

2906 8 set_cell 0 4 3595 20 LVecBase4i::set_cell 0 1 1018 218
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4i::set_cell(int i, int value);

2907 5 set_x 0 4 3595 17 LVecBase4i::set_x 0 1 1019 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_x(int value);

2908 5 set_y 0 4 3595 17 LVecBase4i::set_y 0 1 1020 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_y(int value);

2909 5 set_z 0 4 3595 17 LVecBase4i::set_z 0 1 1021 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_z(int value);

2910 5 set_w 0 4 3595 17 LVecBase4i::set_w 0 1 1022 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::set_w(int value);

2911 11 add_to_cell 0 4 3595 23 LVecBase4i::add_to_cell 0 1 1023 377
// These next functions add to an existing value.
// i.e. foo.set_x(foo.get_x() + value)
// These are useful to reduce overhead in scripting
// languages:

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void LVecBase4i::add_to_cell(int i, int value);

2912 5 add_x 0 4 3595 17 LVecBase4i::add_x 0 1 1024 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_x(int value);

2913 5 add_y 0 4 3595 17 LVecBase4i::add_y 0 1 1025 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_y(int value);

2914 5 add_z 0 4 3595 17 LVecBase4i::add_z 0 1 1026 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_z(int value);

2915 5 add_w 0 4 3595 17 LVecBase4i::add_w 0 1 1027 215
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LVecBase4i::add_w(int value);

2916 8 get_data 0 4 3595 20 LVecBase4i::get_data 0 1 1028 401
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
51
inline int const *LVecBase4i::get_data(void) const;

2917 18 get_num_components 0 4 3595 30 LVecBase4i::get_num_components 0 1 1029 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
////////////////////////////////////////////////////////////////////
54
inline int LVecBase4i::get_num_components(void) const;

2918 4 fill 0 4 3595 16 LVecBase4i::fill 0 1 1030 364
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
////////////////////////////////////////////////////////////////////
45
inline void LVecBase4i::fill(int fill_value);

2919 3 set 0 4 3595 15 LVecBase4i::set 0 1 1031 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void LVecBase4i::set(int x, int y, int z, int w);

2920 3 dot 0 4 3595 15 LVecBase4i::dot 0 1 1032 213
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline int LVecBase4i::dot(LVecBase4i const &other) const;

2921 14 length_squared 0 4 3595 26 LVecBase4i::length_squared 0 1 1033 300
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
////////////////////////////////////////////////////////////////////
50
inline int LVecBase4i::length_squared(void) const;

2922 10 operator < 0 4 3595 22 LVecBase4i::operator < 0 1 1034 0
66
inline bool LVecBase4i::operator <(LVecBase4i const &other) const;

2923 11 operator == 0 4 3595 23 LVecBase4i::operator == 0 1 1035 0
67
inline bool LVecBase4i::operator ==(LVecBase4i const &other) const;

2924 11 operator != 0 4 3595 23 LVecBase4i::operator != 0 1 1036 0
67
inline bool LVecBase4i::operator !=(LVecBase4i const &other) const;

2925 10 compare_to 0 4 3595 22 LVecBase4i::compare_to 0 1 1037 321
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////
65
inline int LVecBase4i::compare_to(LVecBase4i const &other) const;

2926 8 get_hash 0 4 3595 20 LVecBase4i::get_hash 0 1 1038 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
53
inline unsigned int LVecBase4i::get_hash(void) const;

2927 8 add_hash 0 4 3595 20 LVecBase4i::add_hash 0 1 1039 257
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
66
inline unsigned int LVecBase4i::add_hash(unsigned int hash) const;

2928 13 generate_hash 0 4 3595 25 LVecBase4i::generate_hash 0 1 1040 272
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
76
inline void LVecBase4i::generate_hash(ChecksumHashGenerator &hashgen) const;

2929 10 operator - 0 68 3595 22 LVecBase4i::operator - 0 1 1041 0
53
inline LVecBase4i LVecBase4i::operator -(void) const;

2930 10 operator + 0 4 3595 22 LVecBase4i::operator + 0 1 1042 0
72
inline LVecBase4i LVecBase4i::operator +(LVecBase4i const &other) const;

2931 10 operator - 0 4 3595 22 LVecBase4i::operator - 0 1 1043 0
72
inline LVecBase4i LVecBase4i::operator -(LVecBase4i const &other) const;

2932 10 operator * 0 4 3595 22 LVecBase4i::operator * 0 1 1044 0
59
inline LVecBase4i LVecBase4i::operator *(int scalar) const;

2933 10 operator / 0 4 3595 22 LVecBase4i::operator / 0 1 1045 0
59
inline LVecBase4i LVecBase4i::operator /(int scalar) const;

2934 11 operator += 0 4 3595 23 LVecBase4i::operator += 0 1 1046 0
61
inline void LVecBase4i::operator +=(LVecBase4i const &other);

2935 11 operator -= 0 4 3595 23 LVecBase4i::operator -= 0 1 1047 0
61
inline void LVecBase4i::operator -=(LVecBase4i const &other);

2936 11 operator *= 0 4 3595 23 LVecBase4i::operator *= 0 1 1048 0
48
inline void LVecBase4i::operator *=(int scalar);

2937 11 operator /= 0 4 3595 23 LVecBase4i::operator /= 0 1 1049 0
48
inline void LVecBase4i::operator /=(int scalar);

2938 18 componentwise_mult 0 4 3595 30 LVecBase4i::componentwise_mult 0 1 1050 228
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4i::componentwise_mult(LVecBase4i const &other);

2939 7 __pow__ 0 4 3595 19 LVecBase4i::__pow__ 0 1 1051 0
58
inline LVecBase4i LVecBase4i::__pow__(int exponent) const;

2940 8 __ipow__ 0 4 3595 20 LVecBase4i::__ipow__ 0 1 1052 0
66
inline _object *LVecBase4i::__ipow__(_object *self, int exponent);

2941 4 fmax 0 4 3595 16 LVecBase4i::fmax 0 1 1053 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4i LVecBase4i::fmax(LVecBase4i const &other) const;

2942 4 fmin 0 4 3595 16 LVecBase4i::fmin 0 1 1054 214
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline LVecBase4i LVecBase4i::fmin(LVecBase4i const &other) const;

2943 12 almost_equal 0 4 3595 24 LVecBase4i::almost_equal 0 2 1055 1056 662
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////
152
inline bool LVecBase4i::almost_equal(LVecBase4i const &other, int threshold) const;
inline bool LVecBase4i::almost_equal(LVecBase4i const &other) const;

2944 6 output 0 4 3595 18 LVecBase4i::output 0 1 1057 216
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline void LVecBase4i::output(ostream &out) const;

2945 11 python_repr 0 4 3595 23 LVecBase4i::python_repr 0 1 1058 0
96
inline void LVecBase4i::python_repr(ostream &out, basic_string< char > const &class_name) const;

2946 20 write_datagram_fixed 0 4 3595 32 LVecBase4i::write_datagram_fixed 0 1 1059 642
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
74
inline void LVecBase4i::write_datagram_fixed(Datagram &destination) const;

2947 19 read_datagram_fixed 0 4 3595 31 LVecBase4i::read_datagram_fixed 0 1 1060 348
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
70
inline void LVecBase4i::read_datagram_fixed(DatagramIterator &source);

2948 14 write_datagram 0 4 3595 26 LVecBase4i::write_datagram 0 1 1061 464
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
68
inline void LVecBase4i::write_datagram(Datagram &destination) const;

2949 13 read_datagram 0 4 3595 25 LVecBase4i::read_datagram 0 1 1062 280
////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
64
inline void LVecBase4i::read_datagram(DatagramIterator &source);

2950 14 get_class_type 0 4 3595 26 LVecBase4i::get_class_type 0 1 1063 0
51
static TypeHandle LVecBase4i::get_class_type(void);

2951 19 UnalignedLVecBase4i 0 4 3596 40 UnalignedLVecBase4i::UnalignedLVecBase4i 0 4 1064 1065 1066 1067 932
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
286
inline UnalignedLVecBase4i::UnalignedLVecBase4i(void);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(LVecBase4i const &copy);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(UnalignedLVecBase4i const &copy);
inline UnalignedLVecBase4i::UnalignedLVecBase4i(int x, int y, int z, int w);

2952 10 operator = 0 4 3596 31 UnalignedLVecBase4i::operator = 0 2 1068 1069 482
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
178
inline UnalignedLVecBase4i &UnalignedLVecBase4i::operator =(LVecBase4i const &copy);
inline UnalignedLVecBase4i &UnalignedLVecBase4i::operator =(UnalignedLVecBase4i const &copy);

2953 3 set 0 4 3596 24 UnalignedLVecBase4i::set 0 1 1070 222
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline void UnalignedLVecBase4i::set(int x, int y, int z, int w);

2954 11 operator [] 0 4 3596 32 UnalignedLVecBase4i::operator [] 0 2 1071 1072 233
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
110
inline int UnalignedLVecBase4i::operator [](int i) const;
inline int &UnalignedLVecBase4i::operator [](int i);

2955 11 __setitem__ 0 4 3596 32 UnalignedLVecBase4i::__setitem__ 0 1 1073 0
59
inline void UnalignedLVecBase4i::__setitem__(int i, int v);

2956 4 size 0 4 3596 25 UnalignedLVecBase4i::size 0 1 1074 280
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
////////////////////////////////////////////////////////////////////
50
static inline int UnalignedLVecBase4i::size(void);

2957 8 get_data 0 4 3596 29 UnalignedLVecBase4i::get_data 0 1 1075 408
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
////////////////////////////////////////////////////////////////////
60
inline int const *UnalignedLVecBase4i::get_data(void) const;

2958 18 get_num_components 0 4 3596 39 UnalignedLVecBase4i::get_num_components 0 1 1076 283
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
////////////////////////////////////////////////////////////////////
63
inline int UnalignedLVecBase4i::get_num_components(void) const;

2959 14 get_class_type 0 4 3596 35 UnalignedLVecBase4i::get_class_type 0 1 1077 0
60
static TypeHandle UnalignedLVecBase4i::get_class_type(void);

2960 20 ~UnalignedLVecBase4i 0 4 3596 41 UnalignedLVecBase4i::~UnalignedLVecBase4i 0 0 0
48
UnalignedLVecBase4i::~UnalignedLVecBase4i(void);

2961 9 LVector4f 0 4 3597 20 LVector4f::LVector4f 0 5 1078 1079 1080 1081 1082 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
261
inline LVector4f::LVector4f(void);
inline LVector4f::LVector4f(LVecBase4f const &copy);
inline LVector4f::LVector4f(float fill_value);
inline LVector4f::LVector4f(float x, float y, float z, float w);
inline LVector4f::LVector4f(LVecBase3f const &copy, float w);

2962 10 operator = 0 4 3597 21 LVector4f::operator = 0 2 1083 1084 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LVector4f &LVector4f::operator =(LVecBase4f const &copy);
inline LVector4f &LVector4f::operator =(float fill_value);

2963 11 __getattr__ 0 4 3597 22 LVector4f::__getattr__ 0 1 1085 0
84
inline _object *LVector4f::__getattr__(basic_string< char > const &attr_name) const;

2964 11 __setattr__ 0 4 3597 22 LVector4f::__setattr__ 0 1 1086 0
105
inline int LVector4f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2965 4 zero 0 4 3597 15 LVector4f::zero 0 1 1087 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4f const &LVector4f::zero(void);

2966 6 unit_x 0 4 3597 17 LVector4f::unit_x 0 1 1088 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_x(void);

2967 6 unit_y 0 4 3597 17 LVector4f::unit_y 0 1 1089 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_y(void);

2968 6 unit_z 0 4 3597 17 LVector4f::unit_z 0 1 1090 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_z(void);

2969 6 unit_w 0 4 3597 17 LVector4f::unit_w 0 1 1091 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4f const &LVector4f::unit_w(void);

2970 10 operator - 0 68 3597 21 LVector4f::operator - 0 1 1092 0
51
inline LVector4f LVector4f::operator -(void) const;

2971 10 operator + 0 4 3597 21 LVector4f::operator + 0 2 1093 1094 0
141
inline LVecBase4f LVector4f::operator +(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator +(LVector4f const &other) const;

2972 10 operator - 0 4 3597 21 LVector4f::operator - 0 2 1095 1096 0
141
inline LVecBase4f LVector4f::operator -(LVecBase4f const &other) const;
inline LVector4f LVector4f::operator -(LVector4f const &other) const;

2973 10 operator * 0 4 3597 21 LVector4f::operator * 0 1 1097 0
59
inline LVector4f LVector4f::operator *(float scalar) const;

2974 10 operator / 0 4 3597 21 LVector4f::operator / 0 1 1098 0
59
inline LVector4f LVector4f::operator /(float scalar) const;

2975 7 project 0 4 3597 18 LVector4f::project 0 1 1099 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4f LVector4f::project(LVecBase4f const &onto) const;

2976 11 python_repr 0 4 3597 22 LVector4f::python_repr 0 1 1100 0
95
inline void LVector4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

2977 14 get_class_type 0 4 3597 25 LVector4f::get_class_type 0 1 1101 0
50
static TypeHandle LVector4f::get_class_type(void);

2978 10 ~LVector4f 0 4 3597 21 LVector4f::~LVector4f 0 0 0
28
LVector4f::~LVector4f(void);

2979 9 LVector4d 0 4 3598 20 LVector4d::LVector4d 0 5 1102 1103 1104 1105 1106 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
267
inline LVector4d::LVector4d(void);
inline LVector4d::LVector4d(LVecBase4d const &copy);
inline LVector4d::LVector4d(double fill_value);
inline LVector4d::LVector4d(double x, double y, double z, double w);
inline LVector4d::LVector4d(LVecBase3d const &copy, double w);

2980 10 operator = 0 4 3598 21 LVector4d::operator = 0 2 1107 1108 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LVector4d &LVector4d::operator =(LVecBase4d const &copy);
inline LVector4d &LVector4d::operator =(double fill_value);

2981 11 __getattr__ 0 4 3598 22 LVector4d::__getattr__ 0 1 1109 0
84
inline _object *LVector4d::__getattr__(basic_string< char > const &attr_name) const;

2982 11 __setattr__ 0 4 3598 22 LVector4d::__setattr__ 0 1 1110 0
105
inline int LVector4d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

2983 4 zero 0 4 3598 15 LVector4d::zero 0 1 1111 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4d const &LVector4d::zero(void);

2984 6 unit_x 0 4 3598 17 LVector4d::unit_x 0 1 1112 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_x(void);

2985 6 unit_y 0 4 3598 17 LVector4d::unit_y 0 1 1113 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_y(void);

2986 6 unit_z 0 4 3598 17 LVector4d::unit_z 0 1 1114 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_z(void);

2987 6 unit_w 0 4 3598 17 LVector4d::unit_w 0 1 1115 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4d const &LVector4d::unit_w(void);

2988 10 operator - 0 68 3598 21 LVector4d::operator - 0 1 1116 0
51
inline LVector4d LVector4d::operator -(void) const;

2989 10 operator + 0 4 3598 21 LVector4d::operator + 0 2 1117 1118 0
141
inline LVecBase4d LVector4d::operator +(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator +(LVector4d const &other) const;

2990 10 operator - 0 4 3598 21 LVector4d::operator - 0 2 1119 1120 0
141
inline LVecBase4d LVector4d::operator -(LVecBase4d const &other) const;
inline LVector4d LVector4d::operator -(LVector4d const &other) const;

2991 10 operator * 0 4 3598 21 LVector4d::operator * 0 1 1121 0
60
inline LVector4d LVector4d::operator *(double scalar) const;

2992 10 operator / 0 4 3598 21 LVector4d::operator / 0 1 1122 0
60
inline LVector4d LVector4d::operator /(double scalar) const;

2993 7 project 0 4 3598 18 LVector4d::project 0 1 1123 389
////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
66
inline LVector4d LVector4d::project(LVecBase4d const &onto) const;

2994 11 python_repr 0 4 3598 22 LVector4d::python_repr 0 1 1124 0
95
inline void LVector4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

2995 14 get_class_type 0 4 3598 25 LVector4d::get_class_type 0 1 1125 0
50
static TypeHandle LVector4d::get_class_type(void);

2996 10 ~LVector4d 0 4 3598 21 LVector4d::~LVector4d 0 0 0
28
LVector4d::~LVector4d(void);

2997 9 LVector4i 0 4 3599 20 LVector4i::LVector4i 0 5 1126 1127 1128 1129 1130 1109
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
249
inline LVector4i::LVector4i(void);
inline LVector4i::LVector4i(LVecBase4i const &copy);
inline LVector4i::LVector4i(int fill_value);
inline LVector4i::LVector4i(int x, int y, int z, int w);
inline LVector4i::LVector4i(LVecBase3i const &copy, int w);

2998 10 operator = 0 4 3599 21 LVector4i::operator = 0 2 1131 1132 456
////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LVector4i &LVector4i::operator =(LVecBase4i const &copy);
inline LVector4i &LVector4i::operator =(int fill_value);

2999 11 __getattr__ 0 4 3599 22 LVector4i::__getattr__ 0 1 1133 0
84
inline _object *LVector4i::__getattr__(basic_string< char > const &attr_name) const;

3000 11 __setattr__ 0 4 3599 22 LVector4i::__setattr__ 0 1 1134 0
105
inline int LVector4i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3001 4 zero 0 4 3599 15 LVector4i::zero 0 1 1135 258
////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
////////////////////////////////////////////////////////////////////
53
static inline LVector4i const &LVector4i::zero(void);

3002 6 unit_x 0 4 3599 17 LVector4i::unit_x 0 1 1136 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_x(void);

3003 6 unit_y 0 4 3599 17 LVector4i::unit_y 0 1 1137 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_y(void);

3004 6 unit_z 0 4 3599 17 LVector4i::unit_z 0 1 1138 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_z(void);

3005 6 unit_w 0 4 3599 17 LVector4i::unit_w 0 1 1139 255
////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
////////////////////////////////////////////////////////////////////
55
static inline LVector4i const &LVector4i::unit_w(void);

3006 10 operator - 0 68 3599 21 LVector4i::operator - 0 1 1140 0
51
inline LVector4i LVector4i::operator -(void) const;

3007 10 operator + 0 4 3599 21 LVector4i::operator + 0 2 1141 1142 0
141
inline LVecBase4i LVector4i::operator +(LVecBase4i const &other) const;
inline LVector4i LVector4i::operator +(LVector4i const &other) const;

3008 10 operator - 0 4 3599 21 LVector4i::operator - 0 2 1143 1144 0
141
inline LVecBase4i LVector4i::operator -(LVecBase4i const &other) const;
inline LVector4i LVector4i::operator -(LVector4i const &other) const;

3009 10 operator * 0 4 3599 21 LVector4i::operator * 0 1 1145 0
57
inline LVector4i LVector4i::operator *(int scalar) const;

3010 10 operator / 0 4 3599 21 LVector4i::operator / 0 1 1146 0
57
inline LVector4i LVector4i::operator /(int scalar) const;

3011 11 python_repr 0 4 3599 22 LVector4i::python_repr 0 1 1147 0
95
inline void LVector4i::python_repr(ostream &out, basic_string< char > const &class_name) const;

3012 14 get_class_type 0 4 3599 25 LVector4i::get_class_type 0 1 1148 0
50
static TypeHandle LVector4i::get_class_type(void);

3013 10 ~LVector4i 0 4 3599 21 LVector4i::~LVector4i 0 0 0
28
LVector4i::~LVector4i(void);

3014 8 LPoint4f 0 4 3600 18 LPoint4f::LPoint4f 0 5 1149 1150 1151 1152 1153 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
251
inline LPoint4f::LPoint4f(void);
inline LPoint4f::LPoint4f(LVecBase4f const &copy);
inline LPoint4f::LPoint4f(float fill_value);
inline LPoint4f::LPoint4f(float x, float y, float z, float w);
inline LPoint4f::LPoint4f(LVecBase3f const &copy, float w);

3015 10 operator = 0 4 3600 20 LPoint4f::operator = 0 2 1154 1155 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
119
inline LPoint4f &LPoint4f::operator =(LVecBase4f const &copy);
inline LPoint4f &LPoint4f::operator =(float fill_value);

3016 11 __getattr__ 0 4 3600 21 LPoint4f::__getattr__ 0 1 1156 0
83
inline _object *LPoint4f::__getattr__(basic_string< char > const &attr_name) const;

3017 11 __setattr__ 0 4 3600 21 LPoint4f::__setattr__ 0 1 1157 0
104
inline int LPoint4f::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3018 4 zero 0 4 3600 14 LPoint4f::zero 0 1 1158 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4f const &LPoint4f::zero(void);

3019 6 unit_x 0 4 3600 16 LPoint4f::unit_x 0 1 1159 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_x(void);

3020 6 unit_y 0 4 3600 16 LPoint4f::unit_y 0 1 1160 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_y(void);

3021 6 unit_z 0 4 3600 16 LPoint4f::unit_z 0 1 1161 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_z(void);

3022 6 unit_w 0 4 3600 16 LPoint4f::unit_w 0 1 1162 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4f const &LPoint4f::unit_w(void);

3023 10 operator - 0 68 3600 20 LPoint4f::operator - 0 1 1163 0
49
inline LPoint4f LPoint4f::operator -(void) const;

3024 10 operator + 0 4 3600 20 LPoint4f::operator + 0 2 1164 1165 0
138
inline LVecBase4f LPoint4f::operator +(LVecBase4f const &other) const;
inline LPoint4f LPoint4f::operator +(LVector4f const &other) const;

3025 10 operator - 0 4 3600 20 LPoint4f::operator - 0 3 1166 1167 1168 0
206
inline LVecBase4f LPoint4f::operator -(LVecBase4f const &other) const;
inline LVector4f LPoint4f::operator -(LPoint4f const &other) const;
inline LPoint4f LPoint4f::operator -(LVector4f const &other) const;

3026 10 operator * 0 4 3600 20 LPoint4f::operator * 0 1 1169 0
57
inline LPoint4f LPoint4f::operator *(float scalar) const;

3027 10 operator / 0 4 3600 20 LPoint4f::operator / 0 1 1170 0
57
inline LPoint4f LPoint4f::operator /(float scalar) const;

3028 7 project 0 4 3600 17 LPoint4f::project 0 1 1171 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4f LPoint4f::project(LVecBase4f const &onto) const;

3029 11 python_repr 0 4 3600 21 LPoint4f::python_repr 0 1 1172 0
94
inline void LPoint4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

3030 14 get_class_type 0 4 3600 24 LPoint4f::get_class_type 0 1 1173 0
49
static TypeHandle LPoint4f::get_class_type(void);

3031 9 ~LPoint4f 0 4 3600 19 LPoint4f::~LPoint4f 0 0 0
26
LPoint4f::~LPoint4f(void);

3032 8 LPoint4d 0 4 3601 18 LPoint4d::LPoint4d 0 5 1174 1175 1176 1177 1178 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
257
inline LPoint4d::LPoint4d(void);
inline LPoint4d::LPoint4d(LVecBase4d const &copy);
inline LPoint4d::LPoint4d(double fill_value);
inline LPoint4d::LPoint4d(double x, double y, double z, double w);
inline LPoint4d::LPoint4d(LVecBase3d const &copy, double w);

3033 10 operator = 0 4 3601 20 LPoint4d::operator = 0 2 1179 1180 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
120
inline LPoint4d &LPoint4d::operator =(LVecBase4d const &copy);
inline LPoint4d &LPoint4d::operator =(double fill_value);

3034 11 __getattr__ 0 4 3601 21 LPoint4d::__getattr__ 0 1 1181 0
83
inline _object *LPoint4d::__getattr__(basic_string< char > const &attr_name) const;

3035 11 __setattr__ 0 4 3601 21 LPoint4d::__setattr__ 0 1 1182 0
104
inline int LPoint4d::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3036 4 zero 0 4 3601 14 LPoint4d::zero 0 1 1183 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4d const &LPoint4d::zero(void);

3037 6 unit_x 0 4 3601 16 LPoint4d::unit_x 0 1 1184 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_x(void);

3038 6 unit_y 0 4 3601 16 LPoint4d::unit_y 0 1 1185 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_y(void);

3039 6 unit_z 0 4 3601 16 LPoint4d::unit_z 0 1 1186 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_z(void);

3040 6 unit_w 0 4 3601 16 LPoint4d::unit_w 0 1 1187 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4d const &LPoint4d::unit_w(void);

3041 10 operator - 0 68 3601 20 LPoint4d::operator - 0 1 1188 0
49
inline LPoint4d LPoint4d::operator -(void) const;

3042 10 operator + 0 4 3601 20 LPoint4d::operator + 0 2 1189 1190 0
138
inline LVecBase4d LPoint4d::operator +(LVecBase4d const &other) const;
inline LPoint4d LPoint4d::operator +(LVector4d const &other) const;

3043 10 operator - 0 4 3601 20 LPoint4d::operator - 0 3 1191 1192 1193 0
206
inline LVecBase4d LPoint4d::operator -(LVecBase4d const &other) const;
inline LVector4d LPoint4d::operator -(LPoint4d const &other) const;
inline LPoint4d LPoint4d::operator -(LVector4d const &other) const;

3044 10 operator * 0 4 3601 20 LPoint4d::operator * 0 1 1194 0
58
inline LPoint4d LPoint4d::operator *(double scalar) const;

3045 10 operator / 0 4 3601 20 LPoint4d::operator / 0 1 1195 0
58
inline LPoint4d LPoint4d::operator /(double scalar) const;

3046 7 project 0 4 3601 17 LPoint4d::project 0 1 1196 388
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
////////////////////////////////////////////////////////////////////
64
inline LPoint4d LPoint4d::project(LVecBase4d const &onto) const;

3047 11 python_repr 0 4 3601 21 LPoint4d::python_repr 0 1 1197 0
94
inline void LPoint4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

3048 14 get_class_type 0 4 3601 24 LPoint4d::get_class_type 0 1 1198 0
49
static TypeHandle LPoint4d::get_class_type(void);

3049 9 ~LPoint4d 0 4 3601 19 LPoint4d::~LPoint4d 0 0 0
26
LPoint4d::~LPoint4d(void);

3050 8 LPoint4i 0 4 3602 18 LPoint4i::LPoint4i 0 5 1199 1200 1201 1202 1203 1104
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
239
inline LPoint4i::LPoint4i(void);
inline LPoint4i::LPoint4i(LVecBase4i const &copy);
inline LPoint4i::LPoint4i(int fill_value);
inline LPoint4i::LPoint4i(int x, int y, int z, int w);
inline LPoint4i::LPoint4i(LVecBase3i const &copy, int w);

3051 10 operator = 0 4 3602 20 LPoint4i::operator = 0 2 1204 1205 454
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
117
inline LPoint4i &LPoint4i::operator =(LVecBase4i const &copy);
inline LPoint4i &LPoint4i::operator =(int fill_value);

3052 11 __getattr__ 0 4 3602 21 LPoint4i::__getattr__ 0 1 1206 0
83
inline _object *LPoint4i::__getattr__(basic_string< char > const &attr_name) const;

3053 11 __setattr__ 0 4 3602 21 LPoint4i::__setattr__ 0 1 1207 0
104
inline int LPoint4i::__setattr__(_object *self, basic_string< char > const &attr_name, _object *assign);

3054 4 zero 0 4 3602 14 LPoint4i::zero 0 1 1208 256
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
////////////////////////////////////////////////////////////////////
51
static inline LPoint4i const &LPoint4i::zero(void);

3055 6 unit_x 0 4 3602 16 LPoint4i::unit_x 0 1 1209 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_x(void);

3056 6 unit_y 0 4 3602 16 LPoint4i::unit_y 0 1 1210 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_y(void);

3057 6 unit_z 0 4 3602 16 LPoint4i::unit_z 0 1 1211 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_z(void);

3058 6 unit_w 0 4 3602 16 LPoint4i::unit_w 0 1 1212 253
////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
////////////////////////////////////////////////////////////////////
53
static inline LPoint4i const &LPoint4i::unit_w(void);

3059 10 operator - 0 68 3602 20 LPoint4i::operator - 0 1 1213 0
49
inline LPoint4i LPoint4i::operator -(void) const;

3060 10 operator + 0 4 3602 20 LPoint4i::operator + 0 2 1214 1215 0
138
inline LVecBase4i LPoint4i::operator +(LVecBase4i const &other) const;
inline LPoint4i LPoint4i::operator +(LVector4i const &other) const;

3061 10 operator - 0 4 3602 20 LPoint4i::operator - 0 3 1216 1217 1218 0
206
inline LVecBase4i LPoint4i::operator -(LVecBase4i const &other) const;
inline LVector4i LPoint4i::operator -(LPoint4i const &other) const;
inline LPoint4i LPoint4i::operator -(LVector4i const &other) const;

3062 10 operator * 0 4 3602 20 LPoint4i::operator * 0 1 1219 0
55
inline LPoint4i LPoint4i::operator *(int scalar) const;

3063 10 operator / 0 4 3602 20 LPoint4i::operator / 0 1 1220 0
55
inline LPoint4i LPoint4i::operator /(int scalar) const;

3064 11 python_repr 0 4 3602 21 LPoint4i::python_repr 0 1 1221 0
94
inline void LPoint4i::python_repr(ostream &out, basic_string< char > const &class_name) const;

3065 14 get_class_type 0 4 3602 24 LPoint4i::get_class_type 0 1 1222 0
49
static TypeHandle LPoint4i::get_class_type(void);

3066 9 ~LPoint4i 0 4 3602 19 LPoint4i::~LPoint4i 0 0 0
26
LPoint4i::~LPoint4i(void);

3067 11 operator [] 0 4 3604 27 LMatrix3f::Row::operator [] 0 2 1334 1335 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
104
inline float LMatrix3f::Row::operator [](int i) const;
inline float &LMatrix3f::Row::operator [](int i);

3068 11 __setitem__ 0 4 3604 27 LMatrix3f::Row::__setitem__ 0 1 1336 0
56
inline void LMatrix3f::Row::__setitem__(int i, float v);

3069 4 size 0 4 3604 20 LMatrix3f::Row::size 0 1 1337 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3f::Row::size(void);

3070 4 ~Row 0 4 3604 20 LMatrix3f::Row::~Row 0 0 0
27
LMatrix3f::Row::~Row(void);

3071 11 operator [] 0 4 3605 28 LMatrix3f::CRow::operator [] 0 1 1338 0
55
inline float LMatrix3f::CRow::operator [](int i) const;

3072 4 size 0 4 3605 21 LMatrix3f::CRow::size 0 1 1339 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3f::CRow::size(void);

3073 5 ~CRow 0 4 3605 22 LMatrix3f::CRow::~CRow 0 0 0
29
LMatrix3f::CRow::~CRow(void);

3074 9 LMatrix3f 0 4 3603 20 LMatrix3f::LMatrix3f 0 3 1223 1224 1225 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
215
inline LMatrix3f::LMatrix3f(void);
inline LMatrix3f::LMatrix3f(LMatrix3f const &other);
inline LMatrix3f::LMatrix3f(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

3075 10 operator = 0 4 3603 21 LMatrix3f::operator = 0 2 1226 1227 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
123
inline LMatrix3f &LMatrix3f::operator =(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator =(float fill_value);

3076 12 operator new 0 4 3603 23 LMatrix3f::operator new 0 1 1228 0
124
inline void *LMatrix3f::operator new(unsigned int size);
inline void *LMatrix3f::operator new(unsigned int size, void *ptr);

3077 15 operator delete 0 4 3603 26 LMatrix3f::operator delete 0 0 0
106
inline void LMatrix3f::operator delete(void *ptr);
inline void LMatrix3f::operator delete(void *, void *);

3078 12 validate_ptr 0 4 3603 23 LMatrix3f::validate_ptr 0 0 0
60
static inline bool LMatrix3f::validate_ptr(void const *ptr);

3079 10 __reduce__ 0 4 3603 21 LMatrix3f::__reduce__ 0 1 1229 0
59
inline _object *LMatrix3f::__reduce__(_object *self) const;

3080 4 fill 0 4 3603 15 LMatrix3f::fill 0 1 1230 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
39
void LMatrix3f::fill(float fill_value);

3081 3 set 0 4 3603 14 LMatrix3f::set 0 1 1231 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
126
inline void LMatrix3f::set(float e00, float e01, float e02, float e10, float e11, float e12, float e20, float e21, float e22);

3082 7 set_row 0 4 3603 18 LMatrix3f::set_row 0 2 1232 1233 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_row(int row, LVecBase3f const &v);
inline void LMatrix3f::set_row(int row, LVecBase2f const &v);

3083 7 set_col 0 4 3603 18 LMatrix3f::set_col 0 2 1234 1235 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3f::set_col(int col, LVecBase3f const &v);
inline void LMatrix3f::set_col(int col, LVecBase2f const &v);

3084 7 get_row 0 4 3603 18 LMatrix3f::get_row 0 2 1236 1237 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3f LMatrix3f::get_row(int row) const;
inline void LMatrix3f::get_row(LVecBase3f &result_vec, int row) const;

3085 7 get_col 0 4 3603 18 LMatrix3f::get_col 0 1 1238 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3f LMatrix3f::get_col(int col) const;

3086 8 get_row2 0 4 3603 19 LMatrix3f::get_row2 0 1 1239 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_row2(int row) const;

3087 8 get_col2 0 4 3603 19 LMatrix3f::get_col2 0 1 1240 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2f LMatrix3f::get_col2(int col) const;

3088 11 operator () 0 4 3603 22 LMatrix3f::operator () 0 2 1241 1242 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix3f::operator ()(int row, int col);
inline float LMatrix3f::operator ()(int row, int col) const;

3089 11 operator [] 0 4 3603 22 LMatrix3f::operator [] 0 2 1243 1244 0
112
inline LMatrix3f::CRow LMatrix3f::operator [](int i) const;
inline LMatrix3f::Row LMatrix3f::operator [](int i);

3090 4 size 0 4 3603 15 LMatrix3f::size 0 1 1245 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3f::size(void);

3091 6 is_nan 0 4 3603 17 LMatrix3f::is_nan 0 1 1246 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3f::is_nan(void) const;

3092 11 is_identity 0 4 3603 22 LMatrix3f::is_identity 0 1 1247 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix3f::is_identity(void) const;

3093 8 get_cell 0 4 3603 19 LMatrix3f::get_cell 0 1 1248 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix3f::get_cell(int row, int col) const;

3094 8 set_cell 0 4 3603 19 LMatrix3f::set_cell 0 1 1249 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix3f::set_cell(int row, int col, float value);

3095 8 get_data 0 4 3603 19 LMatrix3f::get_data 0 1 1250 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix3f::get_data(void) const;

3096 18 get_num_components 0 4 3603 29 LMatrix3f::get_num_components 0 1 1251 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3f::get_num_components(void) const;

3097 10 operator < 0 4 3603 21 LMatrix3f::operator < 0 1 1252 0
64
inline bool LMatrix3f::operator <(LMatrix3f const &other) const;

3098 11 operator == 0 4 3603 22 LMatrix3f::operator == 0 1 1253 0
65
inline bool LMatrix3f::operator ==(LMatrix3f const &other) const;

3099 11 operator != 0 4 3603 22 LMatrix3f::operator != 0 1 1254 0
65
inline bool LMatrix3f::operator !=(LMatrix3f const &other) const;

3100 10 compare_to 0 4 3603 21 LMatrix3f::compare_to 0 2 1255 1256 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix3f::compare_to(LMatrix3f const &other) const;
int LMatrix3f::compare_to(LMatrix3f const &other, float threshold) const;

3101 8 get_hash 0 4 3603 19 LMatrix3f::get_hash 0 2 1257 1258 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix3f::get_hash(void) const;
inline unsigned int LMatrix3f::get_hash(float threshold) const;

3102 8 add_hash 0 4 3603 19 LMatrix3f::add_hash 0 2 1259 1260 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix3f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3f::add_hash(unsigned int hash, float threshold) const;

3103 5 xform 0 4 3603 16 LMatrix3f::xform 0 1 1261 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3f LMatrix3f::xform(LVecBase3f const &v) const;

3104 11 xform_point 0 4 3603 22 LMatrix3f::xform_point 0 1 1262 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2f LMatrix3f::xform_point(LVecBase2f const &v) const;

3105 9 xform_vec 0 4 3603 20 LMatrix3f::xform_vec 0 2 1263 1264 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2f LMatrix3f::xform_vec(LVecBase2f const &v) const;
inline LVecBase3f LMatrix3f::xform_vec(LVecBase3f const &v) const;

3106 17 xform_vec_general 0 4 3603 28 LMatrix3f::xform_vec_general 0 1 1265 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix3f::xform_vec_general(LVecBase3f const &v) const;

3107 14 xform_in_place 0 4 3603 25 LMatrix3f::xform_in_place 0 1 1266 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3f::xform_in_place(LVecBase3f &v) const;

3108 20 xform_point_in_place 0 4 3603 31 LMatrix3f::xform_point_in_place 0 1 1267 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3f::xform_point_in_place(LVecBase2f &v) const;

3109 18 xform_vec_in_place 0 4 3603 29 LMatrix3f::xform_vec_in_place 0 2 1268 1269 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3f::xform_vec_in_place(LVecBase2f &v) const;
inline void LMatrix3f::xform_vec_in_place(LVecBase3f &v) const;

3110 26 xform_vec_general_in_place 0 4 3603 37 LMatrix3f::xform_vec_general_in_place 0 1 1270 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3f::xform_vec_general_in_place(LVecBase3f &v) const;

3111 8 multiply 0 4 3603 19 LMatrix3f::multiply 0 1 1271 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3f::multiply(LMatrix3f const &other1, LMatrix3f const &other2);

3112 10 operator * 0 4 3603 21 LMatrix3f::operator * 0 2 1272 1273 0
129
inline LMatrix3f LMatrix3f::operator *(LMatrix3f const &other) const;
inline LMatrix3f LMatrix3f::operator *(float scalar) const;

3113 10 operator / 0 4 3603 21 LMatrix3f::operator / 0 1 1274 0
59
inline LMatrix3f LMatrix3f::operator /(float scalar) const;

3114 11 operator += 0 4 3603 22 LMatrix3f::operator += 0 1 1275 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator +=(LMatrix3f const &other);

3115 11 operator -= 0 4 3603 22 LMatrix3f::operator -= 0 1 1276 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3f &LMatrix3f::operator -=(LMatrix3f const &other);

3116 11 operator *= 0 4 3603 22 LMatrix3f::operator *= 0 2 1277 1278 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
121
inline LMatrix3f &LMatrix3f::operator *=(LMatrix3f const &other);
inline LMatrix3f &LMatrix3f::operator *=(float scalar);

3117 11 operator /= 0 4 3603 22 LMatrix3f::operator /= 0 1 1279 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
55
inline LMatrix3f &LMatrix3f::operator /=(float scalar);

3118 18 componentwise_mult 0 4 3603 29 LMatrix3f::componentwise_mult 0 1 1280 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::componentwise_mult(LMatrix3f const &other);

3119 11 determinant 0 4 3603 22 LMatrix3f::determinant 0 1 1281 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
48
inline float LMatrix3f::determinant(void) const;

3120 14 transpose_from 0 4 3603 25 LMatrix3f::transpose_from 0 1 1282 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3f::transpose_from(LMatrix3f const &other);

3121 18 transpose_in_place 0 4 3603 29 LMatrix3f::transpose_in_place 0 1 1283 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3f::transpose_in_place(void);

3122 11 invert_from 0 4 3603 22 LMatrix3f::invert_from 0 1 1284 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3f::invert_from(LMatrix3f const &other);

3123 15 invert_in_place 0 4 3603 26 LMatrix3f::invert_in_place 0 1 1285 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3f::invert_in_place(void);

3124 21 invert_transpose_from 0 4 3603 32 LMatrix3f::invert_transpose_from 0 2 1286 1287 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3f::invert_transpose_from(LMatrix3f const &other);
inline bool LMatrix3f::invert_transpose_from(LMatrix4f const &other);

3125 9 ident_mat 0 4 3603 20 LMatrix3f::ident_mat 0 1 1288 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3f const &LMatrix3f::ident_mat(void);

3126 17 set_translate_mat 0 4 3603 28 LMatrix3f::set_translate_mat 0 1 1289 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3f::set_translate_mat(LVecBase2f const &trans);

3127 14 set_rotate_mat 0 4 3603 25 LMatrix3f::set_rotate_mat 0 3 1290 1291 1292 694
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
147
inline void LMatrix3f::set_rotate_mat(float angle);
void LMatrix3f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3128 13 set_scale_mat 0 4 3603 24 LMatrix3f::set_scale_mat 0 2 1293 1294 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3f::set_scale_mat(LVecBase2f const &scale);
inline void LMatrix3f::set_scale_mat(LVecBase3f const &scale);

3129 13 translate_mat 0 4 3603 24 LMatrix3f::translate_mat 0 2 1295 1296 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
144
static inline LMatrix3f LMatrix3f::translate_mat(LVecBase2f const &trans);
static inline LMatrix3f LMatrix3f::translate_mat(float tx, float ty);

3130 10 rotate_mat 0 4 3603 21 LMatrix3f::rotate_mat 0 3 1297 1298 1299 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
170
static inline LMatrix3f LMatrix3f::rotate_mat(float angle);
static inline LMatrix3f LMatrix3f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3131 9 scale_mat 0 4 3603 20 LMatrix3f::scale_mat 0 4 1300 1301 1302 1303 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
283
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase2f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy);
static inline LMatrix3f LMatrix3f::scale_mat(LVecBase3f const &scale);
static inline LMatrix3f LMatrix3f::scale_mat(float sx, float sy, float sz);

3132 23 set_rotate_mat_normaxis 0 4 3603 34 LMatrix3f::set_rotate_mat_normaxis 0 2 1304 1305 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
104
void LMatrix3f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3133 19 rotate_mat_normaxis 0 4 3603 30 LMatrix3f::rotate_mat_normaxis 0 2 1306 1307 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix3f LMatrix3f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3134 13 set_shear_mat 0 4 3603 24 LMatrix3f::set_shear_mat 0 2 1308 1309 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix3f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));

3135 9 shear_mat 0 4 3603 20 LMatrix3f::shear_mat 0 4 1310 1311 1312 1313 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
206
static inline LMatrix3f LMatrix3f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix3f LMatrix3f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3136 19 set_scale_shear_mat 0 4 3603 30 LMatrix3f::set_scale_shear_mat 0 2 1314 1315 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
113
void LMatrix3f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));

3137 15 scale_shear_mat 0 4 3603 26 LMatrix3f::scale_shear_mat 0 4 1316 1317 1318 1319 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
273
static inline LMatrix3f LMatrix3f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix3f LMatrix3f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3138 11 convert_mat 0 4 3603 22 LMatrix3f::convert_mat 0 1 1320 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3f const &LMatrix3f::convert_mat(CoordinateSystem from, CoordinateSystem to);

3139 12 almost_equal 0 4 3603 23 LMatrix3f::almost_equal 0 2 1321 1322 662
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
143
bool LMatrix3f::almost_equal(LMatrix3f const &other, float threshold) const;
inline bool LMatrix3f::almost_equal(LMatrix3f const &other) const;

3140 6 output 0 4 3603 17 LMatrix3f::output 0 1 1323 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3f::output(ostream &out) const;

3141 5 write 0 4 3603 16 LMatrix3f::write 0 2 1324 1325 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write(ostream &out, int indent_level = (0)) const;

3142 11 python_repr 0 4 3603 22 LMatrix3f::python_repr 0 1 1326 0
95
inline void LMatrix3f::python_repr(ostream &out, basic_string< char > const &class_name) const;

3143 13 generate_hash 0 4 3603 24 LMatrix3f::generate_hash 0 2 1327 1328 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
161
inline void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3f::generate_hash(ChecksumHashGenerator &hashgen, float threshold) const;

3144 20 write_datagram_fixed 0 4 3603 31 LMatrix3f::write_datagram_fixed 0 1 1329 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3f::write_datagram_fixed(Datagram &destination) const;

3145 19 read_datagram_fixed 0 4 3603 30 LMatrix3f::read_datagram_fixed 0 1 1330 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::read_datagram_fixed(DatagramIterator &scan);

3146 14 write_datagram 0 4 3603 25 LMatrix3f::write_datagram 0 1 1331 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3f::write_datagram(Datagram &destination) const;

3147 13 read_datagram 0 4 3603 24 LMatrix3f::read_datagram 0 1 1332 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3f::read_datagram(DatagramIterator &source);

3148 14 get_class_type 0 4 3603 25 LMatrix3f::get_class_type 0 1 1333 0
50
static TypeHandle LMatrix3f::get_class_type(void);

3149 10 ~LMatrix3f 0 4 3603 21 LMatrix3f::~LMatrix3f 0 0 0
28
LMatrix3f::~LMatrix3f(void);

3150 9 transpose 0 1 0 9 transpose 0 4 1925 1926 1927 1928 0
191
inline LMatrix3f transpose(LMatrix3f const &a);
inline LMatrix4f transpose(LMatrix4f const &a);
inline LMatrix3d transpose(LMatrix3d const &a);
inline LMatrix4d transpose(LMatrix4d const &a);

3151 6 invert 0 1 0 6 invert 0 6 1929 1930 1931 1932 1933 1934 0
281
inline LMatrix3f invert(LMatrix3f const &a);
inline LMatrix4f invert(LMatrix4f const &a);
inline LMatrix3d invert(LMatrix3d const &a);
inline LMatrix4d invert(LMatrix4d const &a);
inline LQuaternionf invert(LQuaternionf const &a);
inline LQuaterniond invert(LQuaterniond const &a);

3152 11 operator [] 0 4 3607 27 LMatrix4f::Row::operator [] 0 2 1461 1462 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
104
inline float LMatrix4f::Row::operator [](int i) const;
inline float &LMatrix4f::Row::operator [](int i);

3153 11 __setitem__ 0 4 3607 27 LMatrix4f::Row::__setitem__ 0 1 1463 0
56
inline void LMatrix4f::Row::__setitem__(int i, float v);

3154 4 size 0 4 3607 20 LMatrix4f::Row::size 0 1 1464 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4f::Row::size(void);

3155 4 ~Row 0 4 3607 20 LMatrix4f::Row::~Row 0 0 0
27
LMatrix4f::Row::~Row(void);

3156 11 operator [] 0 4 3608 28 LMatrix4f::CRow::operator [] 0 1 1465 0
55
inline float LMatrix4f::CRow::operator [](int i) const;

3157 4 size 0 4 3608 21 LMatrix4f::CRow::size 0 1 1466 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4f::CRow::size(void);

3158 5 ~CRow 0 4 3608 22 LMatrix4f::CRow::~CRow 0 0 0
29
LMatrix4f::CRow::~CRow(void);

3159 9 LMatrix4f 0 4 3606 20 LMatrix4f::LMatrix4f 0 6 1340 1341 1342 1343 1344 1345 1469
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
487
inline LMatrix4f::LMatrix4f(void);
inline LMatrix4f::LMatrix4f(LMatrix4f const &other);
inline LMatrix4f::LMatrix4f(UnalignedLMatrix4f const &other);
inline LMatrix4f::LMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3);
inline LMatrix4f::LMatrix4f(LMatrix3f const &upper3, LVecBase3f const &trans);

3160 10 operator = 0 4 3606 21 LMatrix4f::operator = 0 3 1346 1347 1348 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
197
inline LMatrix4f &LMatrix4f::operator =(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(UnalignedLMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator =(float fill_value);

3161 12 operator new 0 4 3606 23 LMatrix4f::operator new 0 1 1349 0
124
inline void *LMatrix4f::operator new(unsigned int size);
inline void *LMatrix4f::operator new(unsigned int size, void *ptr);

3162 15 operator delete 0 4 3606 26 LMatrix4f::operator delete 0 0 0
106
inline void LMatrix4f::operator delete(void *ptr);
inline void LMatrix4f::operator delete(void *, void *);

3163 12 validate_ptr 0 4 3606 23 LMatrix4f::validate_ptr 0 0 0
60
static inline bool LMatrix4f::validate_ptr(void const *ptr);

3164 10 __reduce__ 0 4 3606 21 LMatrix4f::__reduce__ 0 1 1350 0
59
inline _object *LMatrix4f::__reduce__(_object *self) const;

3165 4 fill 0 4 3606 15 LMatrix4f::fill 0 1 1351 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
46
inline void LMatrix4f::fill(float fill_value);

3166 3 set 0 4 3606 14 LMatrix4f::set 0 1 1352 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
203
inline void LMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3167 11 set_upper_3 0 4 3606 22 LMatrix4f::set_upper_3 0 1 1353 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4f::set_upper_3(LMatrix3f const &upper3);

3168 11 get_upper_3 0 4 3606 22 LMatrix4f::get_upper_3 0 1 1354 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3f LMatrix4f::get_upper_3(void) const;

3169 7 set_row 0 4 3606 18 LMatrix4f::set_row 0 2 1355 1356 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_row(int row, LVecBase4f const &v);
inline void LMatrix4f::set_row(int row, LVecBase3f const &v);

3170 7 set_col 0 4 3606 18 LMatrix4f::set_col 0 2 1357 1358 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4f::set_col(int col, LVecBase4f const &v);
inline void LMatrix4f::set_col(int col, LVecBase3f const &v);

3171 7 get_row 0 4 3606 18 LMatrix4f::get_row 0 2 1359 1360 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4f LMatrix4f::get_row(int row) const;
inline void LMatrix4f::get_row(LVecBase4f &result_vec, int row) const;

3172 7 get_col 0 4 3606 18 LMatrix4f::get_col 0 1 1361 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4f LMatrix4f::get_col(int col) const;

3173 8 get_row3 0 4 3606 19 LMatrix4f::get_row3 0 2 1362 1363 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3f LMatrix4f::get_row3(int row) const;
inline void LMatrix4f::get_row3(LVecBase3f &result_vec, int row) const;

3174 8 get_col3 0 4 3606 19 LMatrix4f::get_col3 0 1 1364 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3f LMatrix4f::get_col3(int col) const;

3175 11 operator () 0 4 3606 22 LMatrix4f::operator () 0 2 1365 1366 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
116
inline float &LMatrix4f::operator ()(int row, int col);
inline float LMatrix4f::operator ()(int row, int col) const;

3176 11 operator [] 0 4 3606 22 LMatrix4f::operator [] 0 2 1367 1368 0
112
inline LMatrix4f::CRow LMatrix4f::operator [](int i) const;
inline LMatrix4f::Row LMatrix4f::operator [](int i);

3177 4 size 0 4 3606 15 LMatrix4f::size 0 1 1369 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4f::size(void);

3178 6 is_nan 0 4 3606 17 LMatrix4f::is_nan 0 1 1370 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4f::is_nan(void) const;

3179 11 is_identity 0 4 3606 22 LMatrix4f::is_identity 0 1 1371 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix4f::is_identity(void) const;

3180 8 get_cell 0 4 3606 19 LMatrix4f::get_cell 0 1 1372 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
57
inline float LMatrix4f::get_cell(int row, int col) const;

3181 8 set_cell 0 4 3606 19 LMatrix4f::set_cell 0 1 1373 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::set_cell(int row, int col, float value);

3182 8 get_data 0 4 3606 19 LMatrix4f::get_data 0 1 1374 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
52
inline float const *LMatrix4f::get_data(void) const;

3183 18 get_num_components 0 4 3606 29 LMatrix4f::get_num_components 0 1 1375 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4f::get_num_components(void) const;

3184 5 begin 0 4 3606 16 LMatrix4f::begin 0 2 1376 1377 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
93
inline float const *LMatrix4f::begin(void);
inline float const *LMatrix4f::begin(void) const;

3185 3 end 0 4 3606 14 LMatrix4f::end 0 2 1378 1379 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
89
inline float const *LMatrix4f::end(void);
inline float const *LMatrix4f::end(void) const;

3186 10 operator < 0 4 3606 21 LMatrix4f::operator < 0 1 1380 0
64
inline bool LMatrix4f::operator <(LMatrix4f const &other) const;

3187 11 operator == 0 4 3606 22 LMatrix4f::operator == 0 1 1381 0
65
inline bool LMatrix4f::operator ==(LMatrix4f const &other) const;

3188 11 operator != 0 4 3606 22 LMatrix4f::operator != 0 1 1382 0
65
inline bool LMatrix4f::operator !=(LMatrix4f const &other) const;

3189 10 compare_to 0 4 3606 21 LMatrix4f::compare_to 0 2 1383 1384 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
137
inline int LMatrix4f::compare_to(LMatrix4f const &other) const;
int LMatrix4f::compare_to(LMatrix4f const &other, float threshold) const;

3190 8 get_hash 0 4 3606 19 LMatrix4f::get_hash 0 2 1385 1386 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
116
inline unsigned int LMatrix4f::get_hash(void) const;
inline unsigned int LMatrix4f::get_hash(float threshold) const;

3191 8 add_hash 0 4 3606 19 LMatrix4f::add_hash 0 2 1387 1388 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
148
inline unsigned int LMatrix4f::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4f::add_hash(unsigned int hash, float threshold) const;

3192 5 xform 0 4 3606 16 LMatrix4f::xform 0 1 1389 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4f LMatrix4f::xform(LVecBase4f const &v) const;

3193 11 xform_point 0 4 3606 22 LMatrix4f::xform_point 0 1 1390 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3f LMatrix4f::xform_point(LVecBase3f const &v) const;

3194 19 xform_point_general 0 4 3606 30 LMatrix4f::xform_point_general 0 1 1391 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3f LMatrix4f::xform_point_general(LVecBase3f const &v) const;

3195 9 xform_vec 0 4 3606 20 LMatrix4f::xform_vec 0 1 1392 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3f LMatrix4f::xform_vec(LVecBase3f const &v) const;

3196 17 xform_vec_general 0 4 3606 28 LMatrix4f::xform_vec_general 0 1 1393 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3f LMatrix4f::xform_vec_general(LVecBase3f const &v) const;

3197 14 xform_in_place 0 4 3606 25 LMatrix4f::xform_in_place 0 1 1394 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4f::xform_in_place(LVecBase4f &v) const;

3198 20 xform_point_in_place 0 4 3606 31 LMatrix4f::xform_point_in_place 0 1 1395 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4f::xform_point_in_place(LVecBase3f &v) const;

3199 28 xform_point_general_in_place 0 4 3606 39 LMatrix4f::xform_point_general_in_place 0 1 1396 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4f::xform_point_general_in_place(LVecBase3f &v) const;

3200 18 xform_vec_in_place 0 4 3606 29 LMatrix4f::xform_vec_in_place 0 1 1397 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4f::xform_vec_in_place(LVecBase3f &v) const;

3201 26 xform_vec_general_in_place 0 4 3606 37 LMatrix4f::xform_vec_general_in_place 0 1 1398 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4f::xform_vec_general_in_place(LVecBase3f &v) const;

3202 8 multiply 0 4 3606 19 LMatrix4f::multiply 0 1 1399 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4f::multiply(LMatrix4f const &other1, LMatrix4f const &other2);

3203 10 operator * 0 4 3606 21 LMatrix4f::operator * 0 2 1400 1401 0
129
inline LMatrix4f LMatrix4f::operator *(LMatrix4f const &other) const;
inline LMatrix4f LMatrix4f::operator *(float scalar) const;

3204 10 operator / 0 4 3606 21 LMatrix4f::operator / 0 1 1402 0
59
inline LMatrix4f LMatrix4f::operator /(float scalar) const;

3205 11 operator += 0 4 3606 22 LMatrix4f::operator += 0 1 1403 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator +=(LMatrix4f const &other);

3206 11 operator -= 0 4 3606 22 LMatrix4f::operator -= 0 1 1404 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4f &LMatrix4f::operator -=(LMatrix4f const &other);

3207 11 operator *= 0 4 3606 22 LMatrix4f::operator *= 0 2 1405 1406 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
121
inline LMatrix4f &LMatrix4f::operator *=(LMatrix4f const &other);
inline LMatrix4f &LMatrix4f::operator *=(float scalar);

3208 11 operator /= 0 4 3606 22 LMatrix4f::operator /= 0 1 1407 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline LMatrix4f &LMatrix4f::operator /=(float scalar);

3209 18 componentwise_mult 0 4 3606 29 LMatrix4f::componentwise_mult 0 1 1408 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::componentwise_mult(LMatrix4f const &other);

3210 14 transpose_from 0 4 3606 25 LMatrix4f::transpose_from 0 1 1409 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::transpose_from(LMatrix4f const &other);

3211 18 transpose_in_place 0 4 3606 29 LMatrix4f::transpose_in_place 0 1 1410 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4f::transpose_in_place(void);

3212 11 invert_from 0 4 3606 22 LMatrix4f::invert_from 0 1 1411 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4f::invert_from(LMatrix4f const &other);

3213 18 invert_affine_from 0 4 3606 29 LMatrix4f::invert_affine_from 0 1 1412 149
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4f::invert_affine_from(LMatrix4f const &other);

3214 15 invert_in_place 0 4 3606 26 LMatrix4f::invert_in_place 0 1 1413 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4f::invert_in_place(void);

3215 10 accumulate 0 4 3606 21 LMatrix4f::accumulate 0 1 1414 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
72
inline void LMatrix4f::accumulate(LMatrix4f const &other, float weight);

3216 9 ident_mat 0 4 3606 20 LMatrix4f::ident_mat 0 1 1415 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::ident_mat(void);

3217 8 ones_mat 0 4 3606 19 LMatrix4f::ones_mat 0 1 1416 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4f const &LMatrix4f::ones_mat(void);

3218 9 zeros_mat 0 4 3606 20 LMatrix4f::zeros_mat 0 1 1417 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4f const &LMatrix4f::zeros_mat(void);

3219 17 set_translate_mat 0 4 3606 28 LMatrix4f::set_translate_mat 0 1 1418 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4f::set_translate_mat(LVecBase3f const &trans);

3220 14 set_rotate_mat 0 4 3606 25 LMatrix4f::set_rotate_mat 0 2 1419 1420 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
95
void LMatrix4f::set_rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3221 23 set_rotate_mat_normaxis 0 4 3606 34 LMatrix4f::set_rotate_mat_normaxis 0 2 1421 1422 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
104
void LMatrix4f::set_rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3222 13 set_scale_mat 0 4 3606 24 LMatrix4f::set_scale_mat 0 1 1423 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4f::set_scale_mat(LVecBase3f const &scale);

3223 13 set_shear_mat 0 4 3606 24 LMatrix4f::set_shear_mat 0 2 1424 1425 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix4f::set_shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));

3224 19 set_scale_shear_mat 0 4 3606 30 LMatrix4f::set_scale_shear_mat 0 2 1426 1427 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
120
inline void LMatrix4f::set_scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));

3225 13 translate_mat 0 4 3606 24 LMatrix4f::translate_mat 0 2 1428 1429 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
154
static inline LMatrix4f LMatrix4f::translate_mat(LVecBase3f const &trans);
static inline LMatrix4f LMatrix4f::translate_mat(float tx, float ty, float tz);

3226 10 rotate_mat 0 4 3606 21 LMatrix4f::rotate_mat 0 2 1430 1431 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
110
static inline LMatrix4f LMatrix4f::rotate_mat(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3227 19 rotate_mat_normaxis 0 4 3606 30 LMatrix4f::rotate_mat_normaxis 0 2 1432 1433 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
119
static inline LMatrix4f LMatrix4f::rotate_mat_normaxis(float angle, LVecBase3f const &axis, CoordinateSystem cs = (0));

3228 9 scale_mat 0 4 3606 20 LMatrix4f::scale_mat 0 3 1434 1435 1436 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
205
static inline LMatrix4f LMatrix4f::scale_mat(LVecBase3f const &scale);
static inline LMatrix4f LMatrix4f::scale_mat(float sx, float sy, float sz);
static inline LMatrix4f LMatrix4f::scale_mat(float scale);

3229 9 shear_mat 0 4 3606 20 LMatrix4f::shear_mat 0 4 1437 1438 1439 1440 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
206
static inline LMatrix4f LMatrix4f::shear_mat(LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix4f LMatrix4f::shear_mat(float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3230 15 scale_shear_mat 0 4 3606 26 LMatrix4f::scale_shear_mat 0 4 1441 1442 1443 1444 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
273
static inline LMatrix4f LMatrix4f::scale_shear_mat(LVecBase3f const &scale, LVecBase3f const &shear, CoordinateSystem cs = (0));
static inline LMatrix4f LMatrix4f::scale_shear_mat(float sx, float sy, float sz, float shxy, float shxz, float shyz, CoordinateSystem cs = (0));

3231 13 y_to_z_up_mat 0 4 3606 24 LMatrix4f::y_to_z_up_mat 0 1 1445 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::y_to_z_up_mat(void);

3232 13 z_to_y_up_mat 0 4 3606 24 LMatrix4f::z_to_y_up_mat 0 1 1446 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4f const &LMatrix4f::z_to_y_up_mat(void);

3233 11 convert_mat 0 4 3606 22 LMatrix4f::convert_mat 0 1 1447 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4f const &LMatrix4f::convert_mat(CoordinateSystem from, CoordinateSystem to);

3234 12 almost_equal 0 4 3606 23 LMatrix4f::almost_equal 0 2 1448 1449 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
////////////////////////////////////////////////////////////////////
143
bool LMatrix4f::almost_equal(LMatrix4f const &other, float threshold) const;
inline bool LMatrix4f::almost_equal(LMatrix4f const &other) const;

3235 6 output 0 4 3606 17 LMatrix4f::output 0 1 1450 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4f::output(ostream &out) const;

3236 5 write 0 4 3606 16 LMatrix4f::write 0 2 1451 1452 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write(ostream &out, int indent_level = (0)) const;

3237 11 python_repr 0 4 3606 22 LMatrix4f::python_repr 0 1 1453 0
95
inline void LMatrix4f::python_repr(ostream &out, basic_string< char > const &class_name) const;

3238 13 generate_hash 0 4 3606 24 LMatrix4f::generate_hash 0 2 1454 1455 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
157
inline void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4f::generate_hash(ChecksumHashGenerator &hashgen, float scale) const;

3239 20 write_datagram_fixed 0 4 3606 31 LMatrix4f::write_datagram_fixed 0 1 1456 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4f::write_datagram_fixed(Datagram &destination) const;

3240 19 read_datagram_fixed 0 4 3606 30 LMatrix4f::read_datagram_fixed 0 1 1457 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::read_datagram_fixed(DatagramIterator &scan);

3241 14 write_datagram 0 4 3606 25 LMatrix4f::write_datagram 0 1 1458 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4f::write_datagram(Datagram &destination) const;

3242 13 read_datagram 0 4 3606 24 LMatrix4f::read_datagram 0 1 1459 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4f::read_datagram(DatagramIterator &source);

3243 14 get_class_type 0 4 3606 25 LMatrix4f::get_class_type 0 1 1460 0
50
static TypeHandle LMatrix4f::get_class_type(void);

3244 10 ~LMatrix4f 0 4 3606 21 LMatrix4f::~LMatrix4f 0 0 0
28
LMatrix4f::~LMatrix4f(void);

3245 18 UnalignedLMatrix4f 0 4 3609 38 UnalignedLMatrix4f::UnalignedLMatrix4f 0 4 1467 1468 1469 1470 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
424
inline UnalignedLMatrix4f::UnalignedLMatrix4f(void);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(LMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(UnalignedLMatrix4f const &copy);
inline UnalignedLMatrix4f::UnalignedLMatrix4f(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3246 10 operator = 0 4 3609 30 UnalignedLMatrix4f::operator = 0 2 1471 1472 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(LMatrix4f const &copy);
inline UnalignedLMatrix4f &UnalignedLMatrix4f::operator =(UnalignedLMatrix4f const &copy);

3247 3 set 0 4 3609 23 UnalignedLMatrix4f::set 0 1 1473 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
212
inline void UnalignedLMatrix4f::set(float e00, float e01, float e02, float e03, float e10, float e11, float e12, float e13, float e20, float e21, float e22, float e23, float e30, float e31, float e32, float e33);

3248 11 operator () 0 4 3609 31 UnalignedLMatrix4f::operator () 0 2 1474 1475 235
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
134
inline float &UnalignedLMatrix4f::operator ()(int row, int col);
inline float UnalignedLMatrix4f::operator ()(int row, int col) const;

3249 8 get_data 0 4 3609 28 UnalignedLMatrix4f::get_data 0 1 1476 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
61
inline float const *UnalignedLMatrix4f::get_data(void) const;

3250 18 get_num_components 0 4 3609 38 UnalignedLMatrix4f::get_num_components 0 1 1477 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4f::get_num_components(void) const;

3251 14 get_class_type 0 4 3609 34 UnalignedLMatrix4f::get_class_type 0 1 1478 0
59
static TypeHandle UnalignedLMatrix4f::get_class_type(void);

3252 19 ~UnalignedLMatrix4f 0 4 3609 39 UnalignedLMatrix4f::~UnalignedLMatrix4f 0 0 0
46
UnalignedLMatrix4f::~UnalignedLMatrix4f(void);

3253 11 operator [] 0 4 3611 27 LMatrix3d::Row::operator [] 0 2 1590 1591 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline double LMatrix3d::Row::operator [](int i) const;
inline double &LMatrix3d::Row::operator [](int i);

3254 11 __setitem__ 0 4 3611 27 LMatrix3d::Row::__setitem__ 0 1 1592 0
57
inline void LMatrix3d::Row::__setitem__(int i, double v);

3255 4 size 0 4 3611 20 LMatrix3d::Row::size 0 1 1593 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix3d::Row::size(void);

3256 4 ~Row 0 4 3611 20 LMatrix3d::Row::~Row 0 0 0
27
LMatrix3d::Row::~Row(void);

3257 11 operator [] 0 4 3612 28 LMatrix3d::CRow::operator [] 0 1 1594 0
56
inline double LMatrix3d::CRow::operator [](int i) const;

3258 4 size 0 4 3612 21 LMatrix3d::CRow::size 0 1 1595 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix3d::CRow::size(void);

3259 5 ~CRow 0 4 3612 22 LMatrix3d::CRow::~CRow 0 0 0
29
LMatrix3d::CRow::~CRow(void);

3260 9 LMatrix3d 0 4 3610 20 LMatrix3d::LMatrix3d 0 3 1479 1480 1481 677
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
224
inline LMatrix3d::LMatrix3d(void);
inline LMatrix3d::LMatrix3d(LMatrix3d const &other);
inline LMatrix3d::LMatrix3d(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

3261 10 operator = 0 4 3610 21 LMatrix3d::operator = 0 2 1482 1483 468
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
124
inline LMatrix3d &LMatrix3d::operator =(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator =(double fill_value);

3262 12 operator new 0 4 3610 23 LMatrix3d::operator new 0 1 1484 0
124
inline void *LMatrix3d::operator new(unsigned int size);
inline void *LMatrix3d::operator new(unsigned int size, void *ptr);

3263 15 operator delete 0 4 3610 26 LMatrix3d::operator delete 0 0 0
106
inline void LMatrix3d::operator delete(void *ptr);
inline void LMatrix3d::operator delete(void *, void *);

3264 12 validate_ptr 0 4 3610 23 LMatrix3d::validate_ptr 0 0 0
60
static inline bool LMatrix3d::validate_ptr(void const *ptr);

3265 10 __reduce__ 0 4 3610 21 LMatrix3d::__reduce__ 0 1 1485 0
59
inline _object *LMatrix3d::__reduce__(_object *self) const;

3266 4 fill 0 4 3610 15 LMatrix3d::fill 0 1 1486 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
40
void LMatrix3d::fill(double fill_value);

3267 3 set 0 4 3610 14 LMatrix3d::set 0 1 1487 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
135
inline void LMatrix3d::set(double e00, double e01, double e02, double e10, double e11, double e12, double e20, double e21, double e22);

3268 7 set_row 0 4 3610 18 LMatrix3d::set_row 0 2 1488 1489 636
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_row(int row, LVecBase3d const &v);
inline void LMatrix3d::set_row(int row, LVecBase2d const &v);

3269 7 set_col 0 4 3610 18 LMatrix3d::set_col 0 2 1490 1491 645
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix3d::set_col(int col, LVecBase3d const &v);
inline void LMatrix3d::set_col(int col, LVecBase2d const &v);

3270 7 get_row 0 4 3610 18 LMatrix3d::get_row 0 2 1492 1493 638
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase3d LMatrix3d::get_row(int row) const;
inline void LMatrix3d::get_row(LVecBase3d &result_vec, int row) const;

3271 7 get_col 0 4 3610 18 LMatrix3d::get_col 0 1 1494 305
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase3d LMatrix3d::get_col(int col) const;

3272 8 get_row2 0 4 3610 19 LMatrix3d::get_row2 0 1 1495 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_row2(int row) const;

3273 8 get_col2 0 4 3610 19 LMatrix3d::get_col2 0 1 1496 327
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase2d LMatrix3d::get_col2(int col) const;

3274 11 operator () 0 4 3610 22 LMatrix3d::operator () 0 2 1497 1498 226
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix3d::operator ()(int row, int col);
inline double LMatrix3d::operator ()(int row, int col) const;

3275 11 operator [] 0 4 3610 22 LMatrix3d::operator [] 0 2 1499 1500 0
112
inline LMatrix3d::CRow LMatrix3d::operator [](int i) const;
inline LMatrix3d::Row LMatrix3d::operator [](int i);

3276 4 size 0 4 3610 15 LMatrix3d::size 0 1 1501 266
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix3d::size(void);

3277 6 is_nan 0 4 3610 17 LMatrix3d::is_nan 0 1 1502 310
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix3d::is_nan(void) const;

3278 11 is_identity 0 4 3610 22 LMatrix3d::is_identity 0 1 1503 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix3d::is_identity(void) const;

3279 8 get_cell 0 4 3610 19 LMatrix3d::get_cell 0 1 1504 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix3d::get_cell(int row, int col) const;

3280 8 set_cell 0 4 3610 19 LMatrix3d::set_cell 0 1 1505 261
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix3d::set_cell(int row, int col, double value);

3281 8 get_data 0 4 3610 19 LMatrix3d::get_data 0 1 1506 401
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix3d::get_data(void) const;

3282 18 get_num_components 0 4 3610 29 LMatrix3d::get_num_components 0 1 1507 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix3d::get_num_components(void) const;

3283 10 operator < 0 4 3610 21 LMatrix3d::operator < 0 1 1508 0
64
inline bool LMatrix3d::operator <(LMatrix3d const &other) const;

3284 11 operator == 0 4 3610 22 LMatrix3d::operator == 0 1 1509 0
65
inline bool LMatrix3d::operator ==(LMatrix3d const &other) const;

3285 11 operator != 0 4 3610 22 LMatrix3d::operator != 0 1 1510 0
65
inline bool LMatrix3d::operator !=(LMatrix3d const &other) const;

3286 10 compare_to 0 4 3610 21 LMatrix3d::compare_to 0 2 1511 1512 826
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix3d::compare_to(LMatrix3d const &other) const;
int LMatrix3d::compare_to(LMatrix3d const &other, double threshold) const;

3287 8 get_hash 0 4 3610 19 LMatrix3d::get_hash 0 2 1513 1514 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix3d::get_hash(void) const;
inline unsigned int LMatrix3d::get_hash(double threshold) const;

3288 8 add_hash 0 4 3610 19 LMatrix3d::add_hash 0 2 1515 1516 514
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix3d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix3d::add_hash(unsigned int hash, double threshold) const;

3289 5 xform 0 4 3610 16 LMatrix3d::xform 0 1 1517 256
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
62
inline LVecBase3d LMatrix3d::xform(LVecBase3d const &v) const;

3290 11 xform_point 0 4 3610 22 LMatrix3d::xform_point 0 1 1518 403
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase2d LMatrix3d::xform_point(LVecBase2d const &v) const;

3291 9 xform_vec 0 4 3610 20 LMatrix3d::xform_vec 0 2 1519 1520 849
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
133
inline LVecBase2d LMatrix3d::xform_vec(LVecBase2d const &v) const;
inline LVecBase3d LMatrix3d::xform_vec(LVecBase3d const &v) const;

3292 17 xform_vec_general 0 4 3610 28 LMatrix3d::xform_vec_general 0 1 1521 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix3d::xform_vec_general(LVecBase3d const &v) const;

3293 14 xform_in_place 0 4 3610 25 LMatrix3d::xform_in_place 0 1 1522 265
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix3d::xform_in_place(LVecBase3d &v) const;

3294 20 xform_point_in_place 0 4 3610 31 LMatrix3d::xform_point_in_place 0 1 1523 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix3d::xform_point_in_place(LVecBase2d &v) const;

3295 18 xform_vec_in_place 0 4 3610 29 LMatrix3d::xform_vec_in_place 0 2 1524 1525 804
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
////////////////////////////////////////////////////////////////////
127
inline void LMatrix3d::xform_vec_in_place(LVecBase2d &v) const;
inline void LMatrix3d::xform_vec_in_place(LVecBase3d &v) const;

3296 26 xform_vec_general_in_place 0 4 3610 37 LMatrix3d::xform_vec_general_in_place 0 1 1526 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix3d::xform_vec_general_in_place(LVecBase3d &v) const;

3297 8 multiply 0 4 3610 19 LMatrix3d::multiply 0 1 1527 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix3d::multiply(LMatrix3d const &other1, LMatrix3d const &other2);

3298 10 operator * 0 4 3610 21 LMatrix3d::operator * 0 2 1528 1529 0
130
inline LMatrix3d LMatrix3d::operator *(LMatrix3d const &other) const;
inline LMatrix3d LMatrix3d::operator *(double scalar) const;

3299 10 operator / 0 4 3610 21 LMatrix3d::operator / 0 1 1530 0
60
inline LMatrix3d LMatrix3d::operator /(double scalar) const;

3300 11 operator += 0 4 3610 22 LMatrix3d::operator += 0 1 1531 278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator +=(LMatrix3d const &other);

3301 11 operator -= 0 4 3610 22 LMatrix3d::operator -= 0 1 1532 281
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix3d &LMatrix3d::operator -=(LMatrix3d const &other);

3302 11 operator *= 0 4 3610 22 LMatrix3d::operator *= 0 2 1533 1534 481
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
122
inline LMatrix3d &LMatrix3d::operator *=(LMatrix3d const &other);
inline LMatrix3d &LMatrix3d::operator *=(double scalar);

3303 11 operator /= 0 4 3610 22 LMatrix3d::operator /= 0 1 1535 254
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
////////////////////////////////////////////////////////////////////
56
inline LMatrix3d &LMatrix3d::operator /=(double scalar);

3304 18 componentwise_mult 0 4 3610 29 LMatrix3d::componentwise_mult 0 1 1536 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::componentwise_mult(LMatrix3d const &other);

3305 11 determinant 0 4 3610 22 LMatrix3d::determinant 0 1 1537 259
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
////////////////////////////////////////////////////////////////////
49
inline double LMatrix3d::determinant(void) const;

3306 14 transpose_from 0 4 3610 25 LMatrix3d::transpose_from 0 1 1538 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix3d::transpose_from(LMatrix3d const &other);

3307 18 transpose_in_place 0 4 3610 29 LMatrix3d::transpose_in_place 0 1 1539 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix3d::transpose_in_place(void);

3308 11 invert_from 0 4 3610 22 LMatrix3d::invert_from 0 1 1540 808
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix3d::invert_from(LMatrix3d const &other);

3309 15 invert_in_place 0 4 3610 26 LMatrix3d::invert_in_place 0 1 1541 364
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix3d::invert_in_place(void);

3310 21 invert_transpose_from 0 4 3610 32 LMatrix3d::invert_transpose_from 0 2 1542 1543 698
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
////////////////////////////////////////////////////////////////////
139
inline bool LMatrix3d::invert_transpose_from(LMatrix3d const &other);
inline bool LMatrix3d::invert_transpose_from(LMatrix4d const &other);

3311 9 ident_mat 0 4 3610 20 LMatrix3d::ident_mat 0 1 1544 391
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix3d const &LMatrix3d::ident_mat(void);

3312 17 set_translate_mat 0 4 3610 28 LMatrix3d::set_translate_mat 0 1 1545 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix3d::set_translate_mat(LVecBase2d const &trans);

3313 14 set_rotate_mat 0 4 3610 25 LMatrix3d::set_rotate_mat 0 3 1546 1547 1548 694
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
149
inline void LMatrix3d::set_rotate_mat(double angle);
void LMatrix3d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3314 13 set_scale_mat 0 4 3610 24 LMatrix3d::set_scale_mat 0 2 1549 1550 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
125
inline void LMatrix3d::set_scale_mat(LVecBase2d const &scale);
inline void LMatrix3d::set_scale_mat(LVecBase3d const &scale);

3315 13 translate_mat 0 4 3610 24 LMatrix3d::translate_mat 0 2 1551 1552 608
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
146
static inline LMatrix3d LMatrix3d::translate_mat(LVecBase2d const &trans);
static inline LMatrix3d LMatrix3d::translate_mat(double tx, double ty);

3316 10 rotate_mat 0 4 3610 21 LMatrix3d::rotate_mat 0 3 1553 1554 1555 671
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
172
static inline LMatrix3d LMatrix3d::rotate_mat(double angle);
static inline LMatrix3d LMatrix3d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3317 9 scale_mat 0 4 3610 20 LMatrix3d::scale_mat 0 4 1556 1557 1558 1559 1278
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
288
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase2d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy);
static inline LMatrix3d LMatrix3d::scale_mat(LVecBase3d const &scale);
static inline LMatrix3d LMatrix3d::scale_mat(double sx, double sy, double sz);

3318 23 set_rotate_mat_normaxis 0 4 3610 34 LMatrix3d::set_rotate_mat_normaxis 0 2 1560 1561 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
105
void LMatrix3d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3319 19 rotate_mat_normaxis 0 4 3610 30 LMatrix3d::rotate_mat_normaxis 0 2 1562 1563 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix3d LMatrix3d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3320 13 set_shear_mat 0 4 3610 24 LMatrix3d::set_shear_mat 0 2 1564 1565 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix3d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));

3321 9 shear_mat 0 4 3610 20 LMatrix3d::shear_mat 0 4 1566 1567 1568 1569 644
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix3d LMatrix3d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix3d LMatrix3d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3322 19 set_scale_shear_mat 0 4 3610 30 LMatrix3d::set_scale_shear_mat 0 2 1570 1571 312
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
113
void LMatrix3d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));

3323 15 scale_shear_mat 0 4 3610 26 LMatrix3d::scale_shear_mat 0 4 1572 1573 1574 1575 620
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
279
static inline LMatrix3d LMatrix3d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix3d LMatrix3d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3324 11 convert_mat 0 4 3610 22 LMatrix3d::convert_mat 0 1 1576 350
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix3d const &LMatrix3d::convert_mat(CoordinateSystem from, CoordinateSystem to);

3325 12 almost_equal 0 4 3610 23 LMatrix3d::almost_equal 0 2 1577 1578 662
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
144
bool LMatrix3d::almost_equal(LMatrix3d const &other, double threshold) const;
inline bool LMatrix3d::almost_equal(LMatrix3d const &other) const;

3326 6 output 0 4 3610 17 LMatrix3d::output 0 1 1579 215
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix3d::output(ostream &out) const;

3327 5 write 0 4 3610 16 LMatrix3d::write 0 2 1580 1581 214
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write(ostream &out, int indent_level = (0)) const;

3328 11 python_repr 0 4 3610 22 LMatrix3d::python_repr 0 1 1582 0
95
inline void LMatrix3d::python_repr(ostream &out, basic_string< char > const &class_name) const;

3329 13 generate_hash 0 4 3610 24 LMatrix3d::generate_hash 0 2 1583 1584 544
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
162
inline void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix3d::generate_hash(ChecksumHashGenerator &hashgen, double threshold) const;

3330 20 write_datagram_fixed 0 4 3610 31 LMatrix3d::write_datagram_fixed 0 1 1585 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix3d::write_datagram_fixed(Datagram &destination) const;

3331 19 read_datagram_fixed 0 4 3610 30 LMatrix3d::read_datagram_fixed 0 1 1586 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::read_datagram_fixed(DatagramIterator &scan);

3332 14 write_datagram 0 4 3610 25 LMatrix3d::write_datagram 0 1 1587 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix3d::write_datagram(Datagram &destination) const;

3333 13 read_datagram 0 4 3610 24 LMatrix3d::read_datagram 0 1 1588 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix3d::read_datagram(DatagramIterator &source);

3334 14 get_class_type 0 4 3610 25 LMatrix3d::get_class_type 0 1 1589 0
50
static TypeHandle LMatrix3d::get_class_type(void);

3335 10 ~LMatrix3d 0 4 3610 21 LMatrix3d::~LMatrix3d 0 0 0
28
LMatrix3d::~LMatrix3d(void);

3336 11 operator [] 0 4 3614 27 LMatrix4d::Row::operator [] 0 2 1717 1718 225
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
106
inline double LMatrix4d::Row::operator [](int i) const;
inline double &LMatrix4d::Row::operator [](int i);

3337 11 __setitem__ 0 4 3614 27 LMatrix4d::Row::__setitem__ 0 1 1719 0
57
inline void LMatrix4d::Row::__setitem__(int i, double v);

3338 4 size 0 4 3614 20 LMatrix4d::Row::size 0 1 1720 271
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
45
static inline int LMatrix4d::Row::size(void);

3339 4 ~Row 0 4 3614 20 LMatrix4d::Row::~Row 0 0 0
27
LMatrix4d::Row::~Row(void);

3340 11 operator [] 0 4 3615 28 LMatrix4d::CRow::operator [] 0 1 1721 0
56
inline double LMatrix4d::CRow::operator [](int i) const;

3341 4 size 0 4 3615 21 LMatrix4d::CRow::size 0 1 1722 272
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
////////////////////////////////////////////////////////////////////
46
static inline int LMatrix4d::CRow::size(void);

3342 5 ~CRow 0 4 3615 22 LMatrix4d::CRow::~CRow 0 0 0
29
LMatrix4d::CRow::~CRow(void);

3343 9 LMatrix4d 0 4 3613 20 LMatrix4d::LMatrix4d 0 6 1596 1597 1598 1599 1600 1601 1469
// Construct a 4x4 matrix given a 3x3 rotation matrix and an optional
// translation component.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
503
inline LMatrix4d::LMatrix4d(void);
inline LMatrix4d::LMatrix4d(LMatrix4d const &other);
inline LMatrix4d::LMatrix4d(UnalignedLMatrix4d const &other);
inline LMatrix4d::LMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3);
inline LMatrix4d::LMatrix4d(LMatrix3d const &upper3, LVecBase3d const &trans);

3344 10 operator = 0 4 3613 21 LMatrix4d::operator = 0 3 1602 1603 1604 697
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
198
inline LMatrix4d &LMatrix4d::operator =(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(UnalignedLMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator =(double fill_value);

3345 12 operator new 0 4 3613 23 LMatrix4d::operator new 0 1 1605 0
124
inline void *LMatrix4d::operator new(unsigned int size);
inline void *LMatrix4d::operator new(unsigned int size, void *ptr);

3346 15 operator delete 0 4 3613 26 LMatrix4d::operator delete 0 0 0
106
inline void LMatrix4d::operator delete(void *ptr);
inline void LMatrix4d::operator delete(void *, void *);

3347 12 validate_ptr 0 4 3613 23 LMatrix4d::validate_ptr 0 0 0
60
static inline bool LMatrix4d::validate_ptr(void const *ptr);

3348 10 __reduce__ 0 4 3613 21 LMatrix4d::__reduce__ 0 1 1606 0
59
inline _object *LMatrix4d::__reduce__(_object *self) const;

3349 4 fill 0 4 3613 15 LMatrix4d::fill 0 1 1607 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
////////////////////////////////////////////////////////////////////
47
inline void LMatrix4d::fill(double fill_value);

3350 3 set 0 4 3613 14 LMatrix4d::set 0 1 1608 209
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
219
inline void LMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3351 11 set_upper_3 0 4 3613 22 LMatrix4d::set_upper_3 0 1 1609 294
// Get and set the upper 3x3 rotation matrix.

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
60
inline void LMatrix4d::set_upper_3(LMatrix3d const &upper3);

3352 11 get_upper_3 0 4 3613 22 LMatrix4d::get_upper_3 0 1 1610 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
////////////////////////////////////////////////////////////////////
52
inline LMatrix3d LMatrix4d::get_upper_3(void) const;

3353 7 set_row 0 4 3613 18 LMatrix4d::set_row 0 2 1611 1612 610
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_row(int row, LVecBase4d const &v);
inline void LMatrix4d::set_row(int row, LVecBase3d const &v);

3354 7 set_col 0 4 3613 18 LMatrix4d::set_col 0 2 1613 1614 613
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
////////////////////////////////////////////////////////////////////
123
inline void LMatrix4d::set_col(int col, LVecBase4d const &v);
inline void LMatrix4d::set_col(int col, LVecBase3d const &v);

3355 7 get_row 0 4 3613 18 LMatrix4d::get_row 0 2 1615 1616 626
// these versions inline better

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
123
inline LVecBase4d LMatrix4d::get_row(int row) const;
inline void LMatrix4d::get_row(LVecBase4d &result_vec, int row) const;

3356 7 get_col 0 4 3613 18 LMatrix4d::get_col 0 1 1617 300
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
////////////////////////////////////////////////////////////////////
52
inline LVecBase4d LMatrix4d::get_col(int col) const;

3357 8 get_row3 0 4 3613 19 LMatrix4d::get_row3 0 2 1618 1619 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
////////////////////////////////////////////////////////////////////
125
inline LVecBase3d LMatrix4d::get_row3(int row) const;
inline void LMatrix4d::get_row3(LVecBase3d &result_vec, int row) const;

3358 8 get_col3 0 4 3613 19 LMatrix4d::get_col3 0 1 1620 324
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
////////////////////////////////////////////////////////////////////
53
inline LVecBase3d LMatrix4d::get_col3(int col) const;

3359 11 operator () 0 4 3613 22 LMatrix4d::operator () 0 2 1621 1622 223
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
118
inline double &LMatrix4d::operator ()(int row, int col);
inline double LMatrix4d::operator ()(int row, int col) const;

3360 11 operator [] 0 4 3613 22 LMatrix4d::operator [] 0 2 1623 1624 0
112
inline LMatrix4d::CRow LMatrix4d::operator [](int i) const;
inline LMatrix4d::Row LMatrix4d::operator [](int i);

3361 4 size 0 4 3613 15 LMatrix4d::size 0 1 1625 263
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
////////////////////////////////////////////////////////////////////
40
static inline int LMatrix4d::size(void);

3362 6 is_nan 0 4 3613 17 LMatrix4d::is_nan 0 1 1626 307
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
////////////////////////////////////////////////////////////////////
42
inline bool LMatrix4d::is_nan(void) const;

3363 11 is_identity 0 4 3613 22 LMatrix4d::is_identity 0 1 1627 314
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
////////////////////////////////////////////////////////////////////
47
inline bool LMatrix4d::is_identity(void) const;

3364 8 get_cell 0 4 3613 19 LMatrix4d::get_cell 0 1 1628 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
////////////////////////////////////////////////////////////////////
58
inline double LMatrix4d::get_cell(int row, int col) const;

3365 8 set_cell 0 4 3613 19 LMatrix4d::set_cell 0 1 1629 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
////////////////////////////////////////////////////////////////////
64
inline void LMatrix4d::set_cell(int row, int col, double value);

3366 8 get_data 0 4 3613 19 LMatrix4d::get_data 0 1 1630 398
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
53
inline double const *LMatrix4d::get_data(void) const;

3367 18 get_num_components 0 4 3613 29 LMatrix4d::get_num_components 0 1 1631 274
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
////////////////////////////////////////////////////////////////////
53
inline int LMatrix4d::get_num_components(void) const;

3368 5 begin 0 4 3613 16 LMatrix4d::begin 0 2 1632 1633 634
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
95
inline double const *LMatrix4d::begin(void);
inline double const *LMatrix4d::begin(void) const;

3369 3 end 0 4 3613 14 LMatrix4d::end 0 2 1634 1635 630
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
////////////////////////////////////////////////////////////////////
91
inline double const *LMatrix4d::end(void);
inline double const *LMatrix4d::end(void) const;

3370 10 operator < 0 4 3613 21 LMatrix4d::operator < 0 1 1636 0
64
inline bool LMatrix4d::operator <(LMatrix4d const &other) const;

3371 11 operator == 0 4 3613 22 LMatrix4d::operator == 0 1 1637 0
65
inline bool LMatrix4d::operator ==(LMatrix4d const &other) const;

3372 11 operator != 0 4 3613 22 LMatrix4d::operator != 0 1 1638 0
65
inline bool LMatrix4d::operator !=(LMatrix4d const &other) const;

3373 10 compare_to 0 4 3613 21 LMatrix4d::compare_to 0 2 1639 1640 820
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
////////////////////////////////////////////////////////////////////
138
inline int LMatrix4d::compare_to(LMatrix4d const &other) const;
int LMatrix4d::compare_to(LMatrix4d const &other, double threshold) const;

3374 8 get_hash 0 4 3613 19 LMatrix4d::get_hash 0 2 1641 1642 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
////////////////////////////////////////////////////////////////////
117
inline unsigned int LMatrix4d::get_hash(void) const;
inline unsigned int LMatrix4d::get_hash(double threshold) const;

3375 8 add_hash 0 4 3613 19 LMatrix4d::add_hash 0 2 1643 1644 508
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
////////////////////////////////////////////////////////////////////
149
inline unsigned int LMatrix4d::add_hash(unsigned int hash) const;
inline unsigned int LMatrix4d::add_hash(unsigned int hash, double threshold) const;

3376 5 xform 0 4 3613 16 LMatrix4d::xform 0 1 1645 306
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
62
inline LVecBase4d LMatrix4d::xform(LVecBase4d const &v) const;

3377 11 xform_point 0 4 3613 22 LMatrix4d::xform_point 0 1 1646 400
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
////////////////////////////////////////////////////////////////////
68
inline LVecBase3d LMatrix4d::xform_point(LVecBase3d const &v) const;

3378 19 xform_point_general 0 4 3613 30 LMatrix4d::xform_point_general 0 1 1647 389
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
76
inline LVecBase3d LMatrix4d::xform_point_general(LVecBase3d const &v) const;

3379 9 xform_vec 0 4 3613 20 LMatrix4d::xform_vec 0 1 1648 402
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
////////////////////////////////////////////////////////////////////
66
inline LVecBase3d LMatrix4d::xform_vec(LVecBase3d const &v) const;

3380 17 xform_vec_general 0 4 3613 28 LMatrix4d::xform_vec_general 0 1 1649 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
////////////////////////////////////////////////////////////////////
74
inline LVecBase3d LMatrix4d::xform_vec_general(LVecBase3d const &v) const;

3381 14 xform_in_place 0 4 3613 25 LMatrix4d::xform_in_place 0 1 1650 315
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
////////////////////////////////////////////////////////////////////
59
inline void LMatrix4d::xform_in_place(LVecBase4d &v) const;

3382 20 xform_point_in_place 0 4 3613 31 LMatrix4d::xform_point_in_place 0 1 1651 386
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
////////////////////////////////////////////////////////////////////
65
inline void LMatrix4d::xform_point_in_place(LVecBase3d &v) const;

3383 28 xform_point_general_in_place 0 4 3613 39 LMatrix4d::xform_point_general_in_place 0 1 1652 358
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::xform_point_general_in_place(LVecBase3d &v) const;

3384 18 xform_vec_in_place 0 4 3613 29 LMatrix4d::xform_vec_in_place 0 1 1653 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
////////////////////////////////////////////////////////////////////
63
inline void LMatrix4d::xform_vec_in_place(LVecBase3d &v) const;

3385 26 xform_vec_general_in_place 0 4 3613 37 LMatrix4d::xform_vec_general_in_place 0 1 1654 355
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
////////////////////////////////////////////////////////////////////
71
inline void LMatrix4d::xform_vec_general_in_place(LVecBase3d &v) const;

3386 8 multiply 0 4 3613 19 LMatrix4d::multiply 0 1 1655 52
// this = other1 * other2

// this = other1 * other2
82
inline void LMatrix4d::multiply(LMatrix4d const &other1, LMatrix4d const &other2);

3387 10 operator * 0 4 3613 21 LMatrix4d::operator * 0 2 1656 1657 0
130
inline LMatrix4d LMatrix4d::operator *(LMatrix4d const &other) const;
inline LMatrix4d LMatrix4d::operator *(double scalar) const;

3388 10 operator / 0 4 3613 21 LMatrix4d::operator / 0 1 1658 0
60
inline LMatrix4d LMatrix4d::operator /(double scalar) const;

3389 11 operator += 0 4 3613 22 LMatrix4d::operator += 0 1 1659 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator +=(LMatrix4d const &other);

3390 11 operator -= 0 4 3613 22 LMatrix4d::operator -= 0 1 1660 275
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
////////////////////////////////////////////////////////////////////
65
inline LMatrix4d &LMatrix4d::operator -=(LMatrix4d const &other);

3391 11 operator *= 0 4 3613 22 LMatrix4d::operator *= 0 2 1661 1662 446
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline LMatrix4d &LMatrix4d::operator *=(LMatrix4d const &other);
inline LMatrix4d &LMatrix4d::operator *=(double scalar);

3392 11 operator /= 0 4 3613 22 LMatrix4d::operator /= 0 1 1663 222
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
56
inline LMatrix4d &LMatrix4d::operator /=(double scalar);

3393 18 componentwise_mult 0 4 3613 29 LMatrix4d::componentwise_mult 0 1 1664 227
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::componentwise_mult(LMatrix4d const &other);

3394 14 transpose_from 0 4 3613 25 LMatrix4d::transpose_from 0 1 1665 220
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::transpose_from(LMatrix4d const &other);

3395 18 transpose_in_place 0 4 3613 29 LMatrix4d::transpose_in_place 0 1 1666 224
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
inline void LMatrix4d::transpose_in_place(void);

3396 11 invert_from 0 4 3613 22 LMatrix4d::invert_from 0 1 1667 803
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
////////////////////////////////////////////////////////////////////
59
inline bool LMatrix4d::invert_from(LMatrix4d const &other);

3397 18 invert_affine_from 0 4 3613 29 LMatrix4d::invert_affine_from 0 1 1668 149
// bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component)
66
inline bool LMatrix4d::invert_affine_from(LMatrix4d const &other);

3398 15 invert_in_place 0 4 3613 26 LMatrix4d::invert_in_place 0 1 1669 361
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
////////////////////////////////////////////////////////////////////
45
inline bool LMatrix4d::invert_in_place(void);

3399 10 accumulate 0 4 3613 21 LMatrix4d::accumulate 0 1 1670 252
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
////////////////////////////////////////////////////////////////////
73
inline void LMatrix4d::accumulate(LMatrix4d const &other, double weight);

3400 9 ident_mat 0 4 3613 20 LMatrix4d::ident_mat 0 1 1671 388
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::ident_mat(void);

3401 8 ones_mat 0 4 3613 19 LMatrix4d::ones_mat 0 1 1672 258
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
////////////////////////////////////////////////////////////////////
57
static inline LMatrix4d const &LMatrix4d::ones_mat(void);

3402 9 zeros_mat 0 4 3613 20 LMatrix4d::zeros_mat 0 1 1673 260
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
////////////////////////////////////////////////////////////////////
58
static inline LMatrix4d const &LMatrix4d::zeros_mat(void);

3403 17 set_translate_mat 0 4 3613 28 LMatrix4d::set_translate_mat 0 1 1674 303
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
66
inline void LMatrix4d::set_translate_mat(LVecBase3d const &trans);

3404 14 set_rotate_mat 0 4 3613 25 LMatrix4d::set_rotate_mat 0 2 1675 1676 362
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
////////////////////////////////////////////////////////////////////
96
void LMatrix4d::set_rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3405 23 set_rotate_mat_normaxis 0 4 3613 34 LMatrix4d::set_rotate_mat_normaxis 0 2 1677 1678 412
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
105
void LMatrix4d::set_rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3406 13 set_scale_mat 0 4 3613 24 LMatrix4d::set_scale_mat 0 1 1679 319
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////
62
inline void LMatrix4d::set_scale_mat(LVecBase3d const &scale);

3407 13 set_shear_mat 0 4 3613 24 LMatrix4d::set_shear_mat 0 2 1680 1681 321
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
89
inline void LMatrix4d::set_shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));

3408 19 set_scale_shear_mat 0 4 3613 30 LMatrix4d::set_scale_shear_mat 0 2 1682 1683 317
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
120
inline void LMatrix4d::set_scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));

3409 13 translate_mat 0 4 3613 24 LMatrix4d::translate_mat 0 2 1684 1685 602
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
////////////////////////////////////////////////////////////////////
157
static inline LMatrix4d LMatrix4d::translate_mat(LVecBase3d const &trans);
static inline LMatrix4d LMatrix4d::translate_mat(double tx, double ty, double tz);

3410 10 rotate_mat 0 4 3613 21 LMatrix4d::rotate_mat 0 2 1686 1687 345
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
////////////////////////////////////////////////////////////////////
111
static inline LMatrix4d LMatrix4d::rotate_mat(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3411 19 rotate_mat_normaxis 0 4 3613 30 LMatrix4d::rotate_mat_normaxis 0 2 1688 1689 408
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
////////////////////////////////////////////////////////////////////
120
static inline LMatrix4d LMatrix4d::rotate_mat_normaxis(double angle, LVecBase3d const &axis, CoordinateSystem cs = (0));

3412 9 scale_mat 0 4 3613 20 LMatrix4d::scale_mat 0 3 1690 1691 1692 934
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::scale_mat(LVecBase3d const &scale);
static inline LMatrix4d LMatrix4d::scale_mat(double sx, double sy, double sz);
static inline LMatrix4d LMatrix4d::scale_mat(double scale);

3413 9 shear_mat 0 4 3613 20 LMatrix4d::shear_mat 0 4 1693 1694 1695 1696 638
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
////////////////////////////////////////////////////////////////////
209
static inline LMatrix4d LMatrix4d::shear_mat(LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix4d LMatrix4d::shear_mat(double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3414 15 scale_shear_mat 0 4 3613 26 LMatrix4d::scale_shear_mat 0 4 1697 1698 1699 1700 614
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
////////////////////////////////////////////////////////////////////
279
static inline LMatrix4d LMatrix4d::scale_shear_mat(LVecBase3d const &scale, LVecBase3d const &shear, CoordinateSystem cs = (0));
static inline LMatrix4d LMatrix4d::scale_shear_mat(double sx, double sy, double sz, double shxy, double shxz, double shyz, CoordinateSystem cs = (0));

3415 13 y_to_z_up_mat 0 4 3613 24 LMatrix4d::y_to_z_up_mat 0 1 1701 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::y_to_z_up_mat(void);

3416 13 z_to_y_up_mat 0 4 3613 24 LMatrix4d::z_to_y_up_mat 0 1 1702 339
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
////////////////////////////////////////////////////////////////////
62
static inline LMatrix4d const &LMatrix4d::z_to_y_up_mat(void);

3417 11 convert_mat 0 4 3613 22 LMatrix4d::convert_mat 0 1 1703 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
////////////////////////////////////////////////////////////////////
91
static LMatrix4d const &LMatrix4d::convert_mat(CoordinateSystem from, CoordinateSystem to);

3418 12 almost_equal 0 4 3613 23 LMatrix4d::almost_equal 0 2 1704 1705 793
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
////////////////////////////////////////////////////////////////////
144
bool LMatrix4d::almost_equal(LMatrix4d const &other, double threshold) const;
inline bool LMatrix4d::almost_equal(LMatrix4d const &other) const;

3419 6 output 0 4 3613 17 LMatrix4d::output 0 1 1706 212
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
43
void LMatrix4d::output(ostream &out) const;

3420 5 write 0 4 3613 16 LMatrix4d::write 0 2 1707 1708 211
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write(ostream &out, int indent_level = (0)) const;

3421 11 python_repr 0 4 3613 22 LMatrix4d::python_repr 0 1 1709 0
95
inline void LMatrix4d::python_repr(ostream &out, basic_string< char > const &class_name) const;

3422 13 generate_hash 0 4 3613 24 LMatrix4d::generate_hash 0 2 1710 1711 538
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
////////////////////////////////////////////////////////////////////
158
inline void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen) const;
void LMatrix4d::generate_hash(ChecksumHashGenerator &hashgen, double scale) const;

3423 20 write_datagram_fixed 0 4 3613 31 LMatrix4d::write_datagram_fixed 0 1 1712 641
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
66
void LMatrix4d::write_datagram_fixed(Datagram &destination) const;

3424 19 read_datagram_fixed 0 4 3613 30 LMatrix4d::read_datagram_fixed 0 1 1713 347
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::read_datagram_fixed(DatagramIterator &scan);

3425 14 write_datagram 0 4 3613 25 LMatrix4d::write_datagram 0 1 1714 463
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
60
void LMatrix4d::write_datagram(Datagram &destination) const;

3426 13 read_datagram 0 4 3613 24 LMatrix4d::read_datagram 0 1 1715 279
////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
56
void LMatrix4d::read_datagram(DatagramIterator &source);

3427 14 get_class_type 0 4 3613 25 LMatrix4d::get_class_type 0 1 1716 0
50
static TypeHandle LMatrix4d::get_class_type(void);

3428 10 ~LMatrix4d 0 4 3613 21 LMatrix4d::~LMatrix4d 0 0 0
28
LMatrix4d::~LMatrix4d(void);

3429 18 UnalignedLMatrix4d 0 4 3616 38 UnalignedLMatrix4d::UnalignedLMatrix4d 0 4 1723 1724 1725 1726 928
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
440
inline UnalignedLMatrix4d::UnalignedLMatrix4d(void);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(LMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(UnalignedLMatrix4d const &copy);
inline UnalignedLMatrix4d::UnalignedLMatrix4d(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3430 10 operator = 0 4 3616 30 UnalignedLMatrix4d::operator = 0 2 1727 1728 480
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
172
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(LMatrix4d const &copy);
inline UnalignedLMatrix4d &UnalignedLMatrix4d::operator =(UnalignedLMatrix4d const &copy);

3431 3 set 0 4 3616 23 UnalignedLMatrix4d::set 0 1 1729 221
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void UnalignedLMatrix4d::set(double e00, double e01, double e02, double e03, double e10, double e11, double e12, double e13, double e20, double e21, double e22, double e23, double e30, double e31, double e32, double e33);

3432 11 operator () 0 4 3616 31 UnalignedLMatrix4d::operator () 0 2 1730 1731 235
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
136
inline double &UnalignedLMatrix4d::operator ()(int row, int col);
inline double UnalignedLMatrix4d::operator ()(int row, int col) const;

3433 8 get_data 0 4 3616 28 UnalignedLMatrix4d::get_data 0 1 1732 410
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
////////////////////////////////////////////////////////////////////
62
inline double const *UnalignedLMatrix4d::get_data(void) const;

3434 18 get_num_components 0 4 3616 38 UnalignedLMatrix4d::get_num_components 0 1 1733 291
////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
////////////////////////////////////////////////////////////////////
62
inline int UnalignedLMatrix4d::get_num_components(void) const;

3435 14 get_class_type 0 4 3616 34 UnalignedLMatrix4d::get_class_type 0 1 1734 0
59
static TypeHandle UnalignedLMatrix4d::get_class_type(void);

3436 19 ~UnalignedLMatrix4d 0 4 3616 39 UnalignedLMatrix4d::~UnalignedLMatrix4d 0 0 0
46
UnalignedLMatrix4d::~UnalignedLMatrix4d(void);

3437 10 operator * 0 1 0 10 operator * 0 24 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 0
1659
inline LVecBase3f operator *(LVecBase3f const &v, LMatrix3f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix3f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix3f const &m);
inline LVector2f operator *(LVector2f const &v, LMatrix3f const &m);
inline LPoint2f operator *(LPoint2f const &v, LMatrix3f const &m);
inline LVecBase4f operator *(LVecBase4f const &v, LMatrix4f const &m);
inline LPoint4f operator *(LPoint4f const &v, LMatrix4f const &m);
inline LVector4f operator *(LVector4f const &v, LMatrix4f const &m);
inline LVector3f operator *(LVector3f const &v, LMatrix4f const &m);
inline LPoint3f operator *(LPoint3f const &v, LMatrix4f const &m);
inline LVecBase3d operator *(LVecBase3d const &v, LMatrix3d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix3d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix3d const &m);
inline LVector2d operator *(LVector2d const &v, LMatrix3d const &m);
inline LPoint2d operator *(LPoint2d const &v, LMatrix3d const &m);
inline LVecBase4d operator *(LVecBase4d const &v, LMatrix4d const &m);
inline LPoint4d operator *(LPoint4d const &v, LMatrix4d const &m);
inline LVector4d operator *(LVector4d const &v, LMatrix4d const &m);
inline LVector3d operator *(LVector3d const &v, LMatrix4d const &m);
inline LPoint3d operator *(LPoint3d const &v, LMatrix4d const &m);
inline LMatrix3f operator *(LMatrix3f const &m, LQuaternionf const &q);
inline LMatrix4f operator *(LMatrix4f const &m, LQuaternionf const &q);
inline LMatrix3d operator *(LMatrix3d const &m, LQuaterniond const &q);
inline LMatrix4d operator *(LMatrix4d const &m, LQuaterniond const &q);

3438 11 operator *= 0 1 0 11 operator *= 0 16 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 0
941
inline void operator *=(LVecBase3f &v, LMatrix3f const &m);
inline void operator *=(LVector3f &v, LMatrix3f const &m);
inline void operator *=(LPoint3f &v, LMatrix3f const &m);
inline void operator *=(LVector2f &v, LMatrix3f const &m);
inline void operator *=(LPoint2f &v, LMatrix3f const &m);
inline void operator *=(LVecBase4f &v, LMatrix4f const &m);
inline void operator *=(LVector3f &v, LMatrix4f const &m);
inline void operator *=(LPoint3f &v, LMatrix4f const &m);
inline void operator *=(LVecBase3d &v, LMatrix3d const &m);
inline void operator *=(LVector3d &v, LMatrix3d const &m);
inline void operator *=(LPoint3d &v, LMatrix3d const &m);
inline void operator *=(LVector2d &v, LMatrix3d const &m);
inline void operator *=(LPoint2d &v, LMatrix3d const &m);
inline void operator *=(LVecBase4d &v, LMatrix4d const &m);
inline void operator *=(LVector3d &v, LMatrix4d const &m);
inline void operator *=(LPoint3d &v, LMatrix4d const &m);

3439 22 generic_write_datagram 0 1 0 22 generic_write_datagram 0 4 1975 1976 1977 1978 0
303
inline void generic_write_datagram(Datagram &dest, LMatrix3f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4f const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix3d const &value);
inline void generic_write_datagram(Datagram &dest, LMatrix4d const &value);

3440 21 generic_read_datagram 0 1 0 21 generic_read_datagram 0 4 1979 1980 1981 1982 0
319
inline void generic_read_datagram(LMatrix3f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4f &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix3d &result, DatagramIterator &source);
inline void generic_read_datagram(LMatrix4d &result, DatagramIterator &source);

3441 14 compose_matrix 0 1 0 14 compose_matrix 0 16 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 0
1366
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4f &mat, float const components[12], CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4d &mat, double const components[12], CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));

3442 16 decompose_matrix 0 1 0 16 decompose_matrix 0 16 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 0
1290
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4f const &mat, float components[12], CoordinateSystem CS = (0));
inline bool decompose_matrix(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4d const &mat, double components[12], CoordinateSystem CS = (0));
inline bool decompose_matrix(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));

3443 22 compose_matrix_old_hpr 0 1 0 22 compose_matrix_old_hpr 0 8 2015 2016 2017 2018 2019 2020 2021 2022 0
866
void compose_matrix_old_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4f &mat, float const components[12], CoordinateSystem cs = (0));
void compose_matrix_old_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_old_hpr(LMatrix4d &mat, double const components[12], CoordinateSystem cs = (0));

3444 24 decompose_matrix_old_hpr 0 1 0 24 decompose_matrix_old_hpr 0 8 2023 2024 2025 2026 2027 2028 2029 2030 0
818
bool decompose_matrix_old_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4f const &mat, float components[12], CoordinateSystem CS = (0));
bool decompose_matrix_old_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_old_hpr(LMatrix4d const &mat, double components[12], CoordinateSystem CS = (0));

3445 22 compose_matrix_new_hpr 0 1 0 22 compose_matrix_new_hpr 0 8 2031 2032 2033 2034 2035 2036 2037 2038 0
866
void compose_matrix_new_hpr(LMatrix3f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4f &mat, LVecBase3f const &scale, LVecBase3f const &shear, LVecBase3f const &hpr, LVecBase3f const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4f &mat, float const components[12], CoordinateSystem cs = (0));
void compose_matrix_new_hpr(LMatrix3d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4d &mat, LVecBase3d const &scale, LVecBase3d const &shear, LVecBase3d const &hpr, LVecBase3d const &translate, CoordinateSystem cs = (0));
inline void compose_matrix_new_hpr(LMatrix4d &mat, double const components[12], CoordinateSystem cs = (0));

3446 24 decompose_matrix_new_hpr 0 1 0 24 decompose_matrix_new_hpr 0 8 2039 2040 2041 2042 2043 2044 2045 2046 0
818
bool decompose_matrix_new_hpr(LMatrix3f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, LVecBase3f &scale, LVecBase3f &shear, LVecBase3f &hpr, LVecBase3f &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4f const &mat, float components[12], CoordinateSystem CS = (0));
bool decompose_matrix_new_hpr(LMatrix3d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, LVecBase3d &scale, LVecBase3d &shear, LVecBase3d &hpr, LVecBase3d &translate, CoordinateSystem cs = (0));
inline bool decompose_matrix_new_hpr(LMatrix4d const &mat, double components[12], CoordinateSystem CS = (0));

3447 14 old_to_new_hpr 0 1 0 14 old_to_new_hpr 0 2 2047 2048 0
107
LVecBase3f old_to_new_hpr(LVecBase3f const &old_hpr);
LVecBase3d old_to_new_hpr(LVecBase3d const &old_hpr);

3448 14 new_to_old_hpr 0 1 0 14 new_to_old_hpr 0 2 2049 2050 0
107
LVecBase3f new_to_old_hpr(LVecBase3f const &new_hpr);
LVecBase3d new_to_old_hpr(LVecBase3d const &new_hpr);

3449 12 LQuaternionf 0 4 3617 26 LQuaternionf::LQuaternionf 0 4 1735 1736 1737 1738 904
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
233
inline LQuaternionf::LQuaternionf(void);
inline LQuaternionf::LQuaternionf(LVecBase4f const &copy);
inline LQuaternionf::LQuaternionf(float , LVecBase3f const &copy);
inline LQuaternionf::LQuaternionf(float , float , float , float );

3450 14 pure_imaginary 0 4 3617 28 LQuaternionf::pure_imaginary 0 1 1739 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaternionf LQuaternionf::pure_imaginary(LVector3f const &);

3451 9 conjugate 0 4 3617 23 LQuaternionf::conjugate 0 1 1740 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaternionf LQuaternionf::conjugate(void) const;

3452 5 xform 0 4 3617 19 LQuaternionf::xform 0 2 1741 1742 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3f LQuaternionf::xform(LVecBase3f const &v) const;
inline LVecBase4f LQuaternionf::xform(LVecBase4f const &v) const;

3453 8 multiply 0 4 3617 22 LQuaternionf::multiply 0 1 1743 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaternionf LQuaternionf::multiply(LQuaternionf const &rhs) const;

3454 10 operator - 0 68 3617 24 LQuaternionf::operator - 0 1 1744 0
57
inline LQuaternionf LQuaternionf::operator -(void) const;

3455 10 operator + 0 4 3617 24 LQuaternionf::operator + 0 1 1745 0
78
inline LQuaternionf LQuaternionf::operator +(LQuaternionf const &other) const;

3456 10 operator - 0 4 3617 24 LQuaternionf::operator - 0 1 1746 0
78
inline LQuaternionf LQuaternionf::operator -(LQuaternionf const &other) const;

3457 9 angle_rad 0 4 3617 23 LQuaternionf::angle_rad 0 1 1747 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_rad(LQuaternionf const &other) const;

3458 9 angle_deg 0 4 3617 23 LQuaternionf::angle_deg 0 1 1748 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
70
inline float LQuaternionf::angle_deg(LQuaternionf const &other) const;

3459 10 operator * 0 4 3617 24 LQuaternionf::operator * 0 4 1749 1750 1751 1752 0
263
inline LQuaternionf LQuaternionf::operator *(float scalar) const;
inline LQuaternionf LQuaternionf::operator *(LQuaternionf const &) const;
inline LMatrix3f LQuaternionf::operator *(LMatrix3f const &);
inline LMatrix4f LQuaternionf::operator *(LMatrix4f const &);

3460 10 operator / 0 4 3617 24 LQuaternionf::operator / 0 1 1753 0
65
inline LQuaternionf LQuaternionf::operator /(float scalar) const;

3461 11 operator *= 0 4 3617 25 LQuaternionf::operator *= 0 1 1754 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaternionf &LQuaternionf::operator *=(LQuaternionf const &);

3462 12 almost_equal 0 4 3617 26 LQuaternionf::almost_equal 0 2 1755 1756 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
162
inline bool LQuaternionf::almost_equal(LQuaternionf const &other) const;
inline bool LQuaternionf::almost_equal(LQuaternionf const &other, float threshold) const;

3463 17 is_same_direction 0 4 3617 31 LQuaternionf::is_same_direction 0 1 1757 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaternionf::is_same_direction(LQuaternionf const &other) const;

3464 21 almost_same_direction 0 4 3617 35 LQuaternionf::almost_same_direction 0 1 1758 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
98
inline bool LQuaternionf::almost_same_direction(LQuaternionf const &other, float threshold) const;

3465 6 output 0 4 3617 20 LQuaternionf::output 0 1 1759 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaternionf::output(ostream &) const;

3466 17 extract_to_matrix 0 4 3617 31 LQuaternionf::extract_to_matrix 0 2 1760 1761 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaternionf::extract_to_matrix(LMatrix3f &m) const;
void LQuaternionf::extract_to_matrix(LMatrix4f &m) const;

3467 15 set_from_matrix 0 4 3617 29 LQuaternionf::set_from_matrix 0 2 1762 1763 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaternionf::set_from_matrix(LMatrix3f const &m);
inline void LQuaternionf::set_from_matrix(LMatrix4f const &m);

3468 7 set_hpr 0 4 3617 21 LQuaternionf::set_hpr 0 2 1764 1765 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
77
void LQuaternionf::set_hpr(LVecBase3f const &hpr, CoordinateSystem cs = (0));

3469 7 get_hpr 0 4 3617 21 LQuaternionf::get_hpr 0 2 1766 1767 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
66
LVecBase3f LQuaternionf::get_hpr(CoordinateSystem cs = (0)) const;

3470 8 get_axis 0 4 3617 22 LQuaternionf::get_axis 0 1 1768 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3f LQuaternionf::get_axis(void) const;

3471 19 get_axis_normalized 0 4 3617 33 LQuaternionf::get_axis_normalized 0 1 1769 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3f LQuaternionf::get_axis_normalized(void) const;

3472 13 get_angle_rad 0 4 3617 27 LQuaternionf::get_angle_rad 0 1 1770 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
53
inline float LQuaternionf::get_angle_rad(void) const;

3473 9 get_angle 0 4 3617 23 LQuaternionf::get_angle 0 1 1771 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
49
inline float LQuaternionf::get_angle(void) const;

3474 23 set_from_axis_angle_rad 0 4 3617 37 LQuaternionf::set_from_axis_angle_rad 0 1 1772 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
90
inline void LQuaternionf::set_from_axis_angle_rad(float angle_rad, LVector3f const &axis);

3475 19 set_from_axis_angle 0 4 3617 33 LQuaternionf::set_from_axis_angle 0 1 1773 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
86
inline void LQuaternionf::set_from_axis_angle(float angle_deg, LVector3f const &axis);

3476 6 get_up 0 4 3617 20 LQuaternionf::get_up 0 2 1774 1775 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
71
inline LVector3f LQuaternionf::get_up(CoordinateSystem cs = (0)) const;

3477 9 get_right 0 4 3617 23 LQuaternionf::get_right 0 2 1776 1777 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
74
inline LVector3f LQuaternionf::get_right(CoordinateSystem cs = (0)) const;

3478 11 get_forward 0 4 3617 25 LQuaternionf::get_forward 0 2 1778 1779 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
76
inline LVector3f LQuaternionf::get_forward(CoordinateSystem cs = (0)) const;

3479 5 get_r 0 4 3617 19 LQuaternionf::get_r 0 1 1780 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_r(void) const;

3480 5 get_i 0 4 3617 19 LQuaternionf::get_i 0 1 1781 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_i(void) const;

3481 5 get_j 0 4 3617 19 LQuaternionf::get_j 0 1 1782 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_j(void) const;

3482 5 get_k 0 4 3617 19 LQuaternionf::get_k 0 1 1783 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
45
inline float LQuaternionf::get_k(void) const;

3483 5 set_r 0 4 3617 19 LQuaternionf::set_r 0 1 1784 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_r(float r);

3484 5 set_i 0 4 3617 19 LQuaternionf::set_i 0 1 1785 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_i(float i);

3485 5 set_j 0 4 3617 19 LQuaternionf::set_j 0 1 1786 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_j(float j);

3486 5 set_k 0 4 3617 19 LQuaternionf::set_k 0 1 1787 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
41
inline void LQuaternionf::set_k(float k);

3487 9 normalize 0 4 3617 23 LQuaternionf::normalize 0 1 1788 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaternionf::normalize(void);

3488 14 conjugate_from 0 4 3617 28 LQuaternionf::conjugate_from 0 1 1789 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::conjugate_from(LQuaternionf const &other);

3489 18 conjugate_in_place 0 4 3617 32 LQuaternionf::conjugate_in_place 0 1 1790 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaternionf::conjugate_in_place(void);

3490 11 invert_from 0 4 3617 25 LQuaternionf::invert_from 0 1 1791 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaternionf::invert_from(LQuaternionf const &other);

3491 15 invert_in_place 0 4 3617 29 LQuaternionf::invert_in_place 0 1 1792 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaternionf::invert_in_place(void);

3492 11 is_identity 0 4 3617 25 LQuaternionf::is_identity 0 1 1793 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaternionf::is_identity(void) const;

3493 18 is_almost_identity 0 4 3617 32 LQuaternionf::is_almost_identity 0 1 1794 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaternionf::is_almost_identity(float tolerance) const;

3494 10 ident_quat 0 4 3617 24 LQuaternionf::ident_quat 0 1 1795 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaternionf const &LQuaternionf::ident_quat(void);

3495 14 get_class_type 0 4 3617 28 LQuaternionf::get_class_type 0 1 1796 0
53
static TypeHandle LQuaternionf::get_class_type(void);

3496 13 ~LQuaternionf 0 4 3617 27 LQuaternionf::~LQuaternionf 0 0 0
34
LQuaternionf::~LQuaternionf(void);

3497 12 LQuaterniond 0 4 3618 26 LQuaterniond::LQuaterniond 0 4 1797 1798 1799 1800 904
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
238
inline LQuaterniond::LQuaterniond(void);
inline LQuaterniond::LQuaterniond(LVecBase4d const &copy);
inline LQuaterniond::LQuaterniond(double , LVecBase3d const &copy);
inline LQuaterniond::LQuaterniond(double , double , double , double );

3498 14 pure_imaginary 0 4 3618 28 LQuaterniond::pure_imaginary 0 1 1801 228
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
68
static LQuaterniond LQuaterniond::pure_imaginary(LVector3d const &);

3499 9 conjugate 0 4 3618 23 LQuaterniond::conjugate 0 1 1802 265
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
////////////////////////////////////////////////////////////////////
56
inline LQuaterniond LQuaterniond::conjugate(void) const;

3500 5 xform 0 4 3618 19 LQuaterniond::xform 0 2 1803 1804 536
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
////////////////////////////////////////////////////////////////////
131
inline LVecBase3d LQuaterniond::xform(LVecBase3d const &v) const;
inline LVecBase4d LQuaterniond::xform(LVecBase4d const &v) const;

3501 8 multiply 0 4 3618 22 LQuaterniond::multiply 0 1 1805 255
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
////////////////////////////////////////////////////////////////////
74
inline LQuaterniond LQuaterniond::multiply(LQuaterniond const &rhs) const;

3502 10 operator - 0 68 3618 24 LQuaterniond::operator - 0 1 1806 0
57
inline LQuaterniond LQuaterniond::operator -(void) const;

3503 10 operator + 0 4 3618 24 LQuaterniond::operator + 0 1 1807 0
78
inline LQuaterniond LQuaterniond::operator +(LQuaterniond const &other) const;

3504 10 operator - 0 4 3618 24 LQuaterniond::operator - 0 1 1808 0
78
inline LQuaterniond LQuaterniond::operator -(LQuaterniond const &other) const;

3505 9 angle_rad 0 4 3618 23 LQuaterniond::angle_rad 0 1 1809 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_rad(LQuaterniond const &other) const;

3506 9 angle_deg 0 4 3618 23 LQuaterniond::angle_deg 0 1 1810 369
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
////////////////////////////////////////////////////////////////////
71
inline double LQuaterniond::angle_deg(LQuaterniond const &other) const;

3507 10 operator * 0 4 3618 24 LQuaterniond::operator * 0 4 1811 1812 1813 1814 0
264
inline LQuaterniond LQuaterniond::operator *(double scalar) const;
inline LQuaterniond LQuaterniond::operator *(LQuaterniond const &) const;
inline LMatrix3d LQuaterniond::operator *(LMatrix3d const &);
inline LMatrix4d LQuaterniond::operator *(LMatrix4d const &);

3508 10 operator / 0 4 3618 24 LQuaterniond::operator / 0 1 1815 0
66
inline LQuaterniond LQuaterniond::operator /(double scalar) const;

3509 11 operator *= 0 4 3618 25 LQuaterniond::operator *= 0 1 1816 237
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
69
inline LQuaterniond &LQuaterniond::operator *=(LQuaterniond const &);

3510 12 almost_equal 0 4 3618 26 LQuaterniond::almost_equal 0 2 1817 1818 668
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
////////////////////////////////////////////////////////////////////
163
inline bool LQuaterniond::almost_equal(LQuaterniond const &other) const;
inline bool LQuaterniond::almost_equal(LQuaterniond const &other, double threshold) const;

3511 17 is_same_direction 0 4 3618 31 LQuaterniond::is_same_direction 0 1 1819 374
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
////////////////////////////////////////////////////////////////////
77
inline bool LQuaterniond::is_same_direction(LQuaterniond const &other) const;

3512 21 almost_same_direction 0 4 3618 35 LQuaterniond::almost_same_direction 0 1 1820 337
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
////////////////////////////////////////////////////////////////////
99
inline bool LQuaterniond::almost_same_direction(LQuaterniond const &other, double threshold) const;

3513 6 output 0 4 3618 20 LQuaterniond::output 0 1 1821 215
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void LQuaterniond::output(ostream &) const;

3514 17 extract_to_matrix 0 4 3618 31 LQuaterniond::extract_to_matrix 0 2 1822 1823 542
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
////////////////////////////////////////////////////////////////////
115
void LQuaterniond::extract_to_matrix(LMatrix3d &m) const;
void LQuaterniond::extract_to_matrix(LMatrix4d &m) const;

3515 15 set_from_matrix 0 4 3618 29 LQuaterniond::set_from_matrix 0 2 1824 1825 729
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
////////////////////////////////////////////////////////////////////
118
void LQuaterniond::set_from_matrix(LMatrix3d const &m);
inline void LQuaterniond::set_from_matrix(LMatrix4d const &m);

3516 7 set_hpr 0 4 3618 21 LQuaterniond::set_hpr 0 2 1826 1827 368
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
////////////////////////////////////////////////////////////////////
77
void LQuaterniond::set_hpr(LVecBase3d const &hpr, CoordinateSystem cs = (0));

3517 7 get_hpr 0 4 3618 21 LQuaterniond::get_hpr 0 2 1828 1829 296
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
////////////////////////////////////////////////////////////////////
66
LVecBase3d LQuaterniond::get_hpr(CoordinateSystem cs = (0)) const;

3518 8 get_axis 0 4 3618 22 LQuaterniond::get_axis 0 1 1830 432
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
////////////////////////////////////////////////////////////////////
52
inline LVector3d LQuaterniond::get_axis(void) const;

3519 19 get_axis_normalized 0 4 3618 33 LQuaterniond::get_axis_normalized 0 1 1831 415
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
////////////////////////////////////////////////////////////////////
63
inline LVector3d LQuaterniond::get_axis_normalized(void) const;

3520 13 get_angle_rad 0 4 3618 27 LQuaterniond::get_angle_rad 0 1 1832 645
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
54
inline double LQuaterniond::get_angle_rad(void) const;

3521 9 get_angle 0 4 3618 23 LQuaterniond::get_angle 0 1 1833 641
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
////////////////////////////////////////////////////////////////////
50
inline double LQuaterniond::get_angle(void) const;

3522 23 set_from_axis_angle_rad 0 4 3618 37 LQuaterniond::set_from_axis_angle_rad 0 1 1834 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
91
inline void LQuaterniond::set_from_axis_angle_rad(double angle_rad, LVector3d const &axis);

3523 19 set_from_axis_angle 0 4 3618 33 LQuaterniond::set_from_axis_angle 0 1 1835 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
////////////////////////////////////////////////////////////////////
87
inline void LQuaterniond::set_from_axis_angle(double angle_deg, LVector3d const &axis);

3524 6 get_up 0 4 3618 20 LQuaterniond::get_up 0 2 1836 1837 315
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
////////////////////////////////////////////////////////////////////
71
inline LVector3d LQuaterniond::get_up(CoordinateSystem cs = (0)) const;

3525 9 get_right 0 4 3618 23 LQuaterniond::get_right 0 2 1838 1839 320
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
////////////////////////////////////////////////////////////////////
74
inline LVector3d LQuaterniond::get_right(CoordinateSystem cs = (0)) const;

3526 11 get_forward 0 4 3618 25 LQuaterniond::get_forward 0 2 1840 1841 324
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
////////////////////////////////////////////////////////////////////
76
inline LVector3d LQuaterniond::get_forward(CoordinateSystem cs = (0)) const;

3527 5 get_r 0 4 3618 19 LQuaterniond::get_r 0 1 1842 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_r(void) const;

3528 5 get_i 0 4 3618 19 LQuaterniond::get_i 0 1 1843 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_i(void) const;

3529 5 get_j 0 4 3618 19 LQuaterniond::get_j 0 1 1844 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_j(void) const;

3530 5 get_k 0 4 3618 19 LQuaterniond::get_k 0 1 1845 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
46
inline double LQuaterniond::get_k(void) const;

3531 5 set_r 0 4 3618 19 LQuaterniond::set_r 0 1 1846 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_r(double r);

3532 5 set_i 0 4 3618 19 LQuaterniond::set_i 0 1 1847 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_i(double i);

3533 5 set_j 0 4 3618 19 LQuaterniond::set_j 0 1 1848 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_j(double j);

3534 5 set_k 0 4 3618 19 LQuaterniond::set_k 0 1 1849 214
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline void LQuaterniond::set_k(double k);

3535 9 normalize 0 4 3618 23 LQuaterniond::normalize 0 1 1850 218
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline bool LQuaterniond::normalize(void);

3536 14 conjugate_from 0 4 3618 28 LQuaterniond::conjugate_from 0 1 1851 817
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
68
inline bool LQuaterniond::conjugate_from(LQuaterniond const &other);

3537 18 conjugate_in_place 0 4 3618 32 LQuaterniond::conjugate_in_place 0 1 1852 379
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
////////////////////////////////////////////////////////////////////
51
inline bool LQuaterniond::conjugate_in_place(void);

3538 11 invert_from 0 4 3618 25 LQuaterniond::invert_from 0 1 1853 794
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
////////////////////////////////////////////////////////////////////
65
inline bool LQuaterniond::invert_from(LQuaterniond const &other);

3539 15 invert_in_place 0 4 3618 29 LQuaterniond::invert_in_place 0 1 1854 360
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
////////////////////////////////////////////////////////////////////
48
inline bool LQuaterniond::invert_in_place(void);

3540 11 is_identity 0 4 3618 25 LQuaterniond::is_identity 0 1 1855 322
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
////////////////////////////////////////////////////////////////////
50
inline bool LQuaterniond::is_identity(void) const;

3541 18 is_almost_identity 0 4 3618 32 LQuaterniond::is_almost_identity 0 1 1856 341
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
////////////////////////////////////////////////////////////////////
69
inline bool LQuaterniond::is_almost_identity(double tolerance) const;

3542 10 ident_quat 0 4 3618 24 LQuaterniond::ident_quat 0 1 1857 259
////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
////////////////////////////////////////////////////////////////////
65
static inline LQuaterniond const &LQuaterniond::ident_quat(void);

3543 14 get_class_type 0 4 3618 28 LQuaterniond::get_class_type 0 1 1858 0
53
static TypeHandle LQuaterniond::get_class_type(void);

3544 13 ~LQuaterniond 0 4 3618 27 LQuaterniond::~LQuaterniond 0 0 0
34
LQuaterniond::~LQuaterniond(void);

3545 10 LRotationf 0 4 3619 22 LRotationf::LRotationf 0 8 1859 1860 1861 1862 1863 1864 1865 1866 1867
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
420
inline LRotationf::LRotationf(void);
inline LRotationf::LRotationf(LQuaternionf const &);
inline LRotationf::LRotationf(LVecBase4f const &copy);
inline LRotationf::LRotationf(float , float , float , float );
inline LRotationf::LRotationf(LVector3f const &, float );
inline LRotationf::LRotationf(LMatrix3f const &);
inline LRotationf::LRotationf(LMatrix4f const &);
inline LRotationf::LRotationf(float , float , float );

3546 10 operator * 0 4 3619 22 LRotationf::operator * 0 3 1867 1868 1869 0
211
inline LRotationf LRotationf::operator *(float scalar) const;
inline LRotationf LRotationf::operator *(LRotationf const &other) const;
inline LQuaternionf LRotationf::operator *(LQuaternionf const &other) const;

3547 10 operator / 0 4 3619 22 LRotationf::operator / 0 1 1870 0
61
inline LRotationf LRotationf::operator /(float scalar) const;

3548 14 get_class_type 0 4 3619 26 LRotationf::get_class_type 0 1 1871 0
51
static TypeHandle LRotationf::get_class_type(void);

3549 11 ~LRotationf 0 4 3619 23 LRotationf::~LRotationf 0 0 0
30
LRotationf::~LRotationf(void);

3550 10 LRotationd 0 4 3620 22 LRotationd::LRotationd 0 8 1872 1873 1874 1875 1876 1877 1878 1879 1867
////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
////////////////////////////////////////////////////////////////////
428
inline LRotationd::LRotationd(void);
inline LRotationd::LRotationd(LQuaterniond const &);
inline LRotationd::LRotationd(LVecBase4d const &copy);
inline LRotationd::LRotationd(double , double , double , double );
inline LRotationd::LRotationd(LVector3d const &, double );
inline LRotationd::LRotationd(LMatrix3d const &);
inline LRotationd::LRotationd(LMatrix4d const &);
inline LRotationd::LRotationd(double , double , double );

3551 10 operator * 0 4 3620 22 LRotationd::operator * 0 3 1880 1881 1882 0
212
inline LRotationd LRotationd::operator *(double scalar) const;
inline LRotationd LRotationd::operator *(LRotationd const &other) const;
inline LQuaterniond LRotationd::operator *(LQuaterniond const &other) const;

3552 10 operator / 0 4 3620 22 LRotationd::operator / 0 1 1883 0
62
inline LRotationd LRotationd::operator /(double scalar) const;

3553 14 get_class_type 0 4 3620 26 LRotationd::get_class_type 0 1 1884 0
51
static TypeHandle LRotationd::get_class_type(void);

3554 11 ~LRotationd 0 4 3620 23 LRotationd::~LRotationd 0 0 0
30
LRotationd::~LRotationd(void);

3555 13 LOrientationf 0 4 3621 28 LOrientationf::LOrientationf 0 6 1885 1886 1887 1888 1889 1890 1380
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
346
inline LOrientationf::LOrientationf(void);
inline LOrientationf::LOrientationf(LQuaternionf const &);
inline LOrientationf::LOrientationf(float , float , float , float );
inline LOrientationf::LOrientationf(LVector3f const &, float );
inline LOrientationf::LOrientationf(LMatrix3f const &);
inline LOrientationf::LOrientationf(LMatrix4f const &);

3556 10 operator * 0 4 3621 25 LOrientationf::operator * 0 2 1891 1892 0
159
inline LOrientationf LOrientationf::operator *(LRotationf const &other) const;
inline LOrientationf LOrientationf::operator *(LQuaternionf const &other) const;

3557 14 get_class_type 0 4 3621 29 LOrientationf::get_class_type 0 1 1893 0
54
static TypeHandle LOrientationf::get_class_type(void);

3558 14 ~LOrientationf 0 4 3621 29 LOrientationf::~LOrientationf 0 0 0
36
LOrientationf::~LOrientationf(void);

3559 13 LOrientationd 0 4 3622 28 LOrientationd::LOrientationd 0 6 1894 1895 1896 1897 1898 1899 1380
////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
////////////////////////////////////////////////////////////////////
350
inline LOrientationd::LOrientationd(void);
inline LOrientationd::LOrientationd(LQuaterniond const &);
inline LOrientationd::LOrientationd(double , double , double , double );
inline LOrientationd::LOrientationd(LVector3d const &, float );
inline LOrientationd::LOrientationd(LMatrix3d const &);
inline LOrientationd::LOrientationd(LMatrix4d const &);

3560 10 operator * 0 4 3622 25 LOrientationd::operator * 0 2 1900 1901 0
159
inline LOrientationd LOrientationd::operator *(LRotationd const &other) const;
inline LOrientationd LOrientationd::operator *(LQuaterniond const &other) const;

3561 14 get_class_type 0 4 3622 29 LOrientationd::get_class_type 0 1 1902 0
54
static TypeHandle LOrientationd::get_class_type(void);

3562 14 ~LOrientationd 0 4 3622 29 LOrientationd::~LOrientationd 0 0 0
36
LOrientationd::~LOrientationd(void);

3563 19 ConfigVariableColor 0 4 3623 40 ConfigVariableColor::ConfigVariableColor 0 7 1903 1904 1905 1906 1907 1908 1909 697
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
470
inline ConfigVariableColor::ConfigVariableColor(basic_string< char > const &name);
inline ConfigVariableColor::ConfigVariableColor(basic_string< char > const &name, LVecBase4f const &default_value, basic_string< char > const &description = ((string())), int flags = (0));
inline ConfigVariableColor::ConfigVariableColor(basic_string< char > const &name, basic_string< char > const &default_value, basic_string< char > const &description = ((string())), int flags = (0));

3564 10 operator = 0 4 3623 31 ConfigVariableColor::operator = 0 1 1910 0
69
inline void ConfigVariableColor::operator =(LVecBase4f const &value);

3565 17 operator typecast 0 132 3623 38 ConfigVariableColor::operator typecast 0 1 1915 0
76
inline LVecBase4f const &ConfigVariableColor::operator typecast(void) const;

3566 11 operator [] 0 4 3623 32 ConfigVariableColor::operator [] 0 1 1911 0
59
inline float ConfigVariableColor::operator [](int n) const;

3567 9 set_value 0 4 3623 30 ConfigVariableColor::set_value 0 1 1912 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
68
inline void ConfigVariableColor::set_value(LVecBase4f const &value);

3568 9 get_value 0 4 3623 30 ConfigVariableColor::get_value 0 1 1913 259
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
68
inline LVecBase4f const &ConfigVariableColor::get_value(void) const;

3569 17 get_default_value 0 4 3623 38 ConfigVariableColor::get_default_value 0 1 1914 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
69
inline LVecBase4f ConfigVariableColor::get_default_value(void) const;

3570 20 ~ConfigVariableColor 0 4 3623 41 ConfigVariableColor::~ConfigVariableColor 0 0 0
48
ConfigVariableColor::~ConfigVariableColor(void);

2050
1 14 Dtool_Ns0bgaIU 0 7 6 3625 2062 14 Dtool_Ns0bgaIU 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
2 14 Dtool_Ns0bVQfL 0 7 6 3625 2062 14 Dtool_Ns0bVQfL 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3626  
3 14 Dtool_Ns0blRq3 0 7 6 3625 2062 14 Dtool_Ns0blRq3 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
4 14 Dtool_Ns0boQsK 0 7 6 3625 2062 14 Dtool_Ns0boQsK 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3628  1 y 1 3628  
5 14 Dtool_Ns0b_ub0 0 6 7 3625 0 14 Dtool_Ns0b_ub0 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  4 copy 1 3626  
6 14 Dtool_Ns0b_fng 0 6 7 3625 0 14 Dtool_Ns0b_fng 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  10 fill_value 1 3628  
7 14 Dtool_Ns0bxPnZ 0 4 8 3630 0 14 Dtool_Ns0bxPnZ 0 2 4 this 3 3625  4 size 1 3629  
8 14 Dtool_Ns0bfGvP 0 6 11 3626 0 14 Dtool_Ns0bfGvP 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
9 14 Dtool_Ns0baClz 0 6 12 3626 0 14 Dtool_Ns0baClz 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
10 14 Dtool_Ns0bVCzP 0 6 13 3626 0 14 Dtool_Ns0bVCzP 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
11 14 Dtool_Ns0bspV9 0 6 15 3631 0 14 Dtool_Ns0bspV9 0 1 4 this 3 3626  
12 14 Dtool_Ns0bHRz6 0 6 16 3631 0 14 Dtool_Ns0bHRz6 0 2 4 this 3 3626  9 attr_name 1 3633  
13 14 Dtool_Ns0bnHly 0 6 17 3634 0 14 Dtool_Ns0bnHly 0 3 4 this 3 3625  9 attr_name 1 3633  6 assign 1 3631  
14 14 Dtool_Ns0bY1X1 0 4 18 3630 0 14 Dtool_Ns0bY1X1 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  1 i 1 3634  
15 14 Dtool_Ns0b6qLS 0 6 18 3628 0 14 Dtool_Ns0b6qLS 0 2 4 this 3 3626  1 i 1 3634  
16 14 Dtool_Ns0bxNZF 0 4 19 3630 0 14 Dtool_Ns0bxNZF 0 3 4 this 3 3625  1 i 1 3634  1 v 1 3628  
17 14 Dtool_Ns0boYf5 0 6 20 3634 0 14 Dtool_Ns0boYf5 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
18 14 Dtool_Ns0bI5WA 0 6 21 3635 0 14 Dtool_Ns0bI5WA 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
19 14 Dtool_Ns0by_vl 0 6 22 3628 0 14 Dtool_Ns0by_vl 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  1 i 1 3634  
20 14 Dtool_Ns0buYPR 0 6 23 3628 0 14 Dtool_Ns0buYPR 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
21 14 Dtool_Ns0bu8IW 0 6 24 3628 0 14 Dtool_Ns0bu8IW 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
22 14 Dtool_Ns0bnQnT 0 4 25 3630 0 14 Dtool_Ns0bnQnT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3625  1 i 1 3634  5 value 1 3628  
23 14 Dtool_Ns0bgvpl 0 4 26 3630 0 14 Dtool_Ns0bgvpl 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  5 value 1 3628  
24 14 Dtool_Ns0bgLiq 0 4 27 3630 0 14 Dtool_Ns0bgLiq 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  5 value 1 3628  
25 14 Dtool_Ns0bqznS 0 4 28 3630 0 14 Dtool_Ns0bqznS 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3625  1 i 1 3634  5 value 1 3628  
26 14 Dtool_Ns0bBpGk 0 4 29 3630 0 14 Dtool_Ns0bBpGk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  5 value 1 3628  
27 14 Dtool_Ns0bBN_o 0 4 30 3630 0 14 Dtool_Ns0bBN_o 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  5 value 1 3628  
28 14 Dtool_Ns0bMuTE 0 4 31 3630 0 14 Dtool_Ns0bMuTE 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
29 14 Dtool_Ns0bdEX3 0 6 32 3634 0 14 Dtool_Ns0bdEX3 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
30 14 Dtool_Ns0b91nF 0 4 33 3630 0 14 Dtool_Ns0b91nF 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  10 fill_value 1 3628  
31 14 Dtool_Ns0bmT_9 0 4 34 3630 0 14 Dtool_Ns0bmT_9 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3625  1 x 1 3628  1 y 1 3628  
32 14 Dtool_Ns0b9RXz 0 6 35 3628 0 14 Dtool_Ns0b9RXz 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
33 14 Dtool_Ns0bIV8b 0 6 36 3628 0 14 Dtool_Ns0bIV8b 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
34 14 Dtool_Ns0bvbI8 0 6 37 3628 0 14 Dtool_Ns0bvbI8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
35 14 Dtool_Ns0b7siR 0 6 38 3635 0 14 Dtool_Ns0b7siR 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3625  
36 14 Dtool_Ns0bkm2c 0 7 39 3625 2062 14 Dtool_Ns0bkm2c 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  4 onto 1 3626  
37 14 Dtool_Ns0bJkIg 0 6 40 3635 0 14 Dtool_Ns0bJkIg 0 2 4 this 3 3626  5 other 1 3626  
38 14 Dtool_Ns0bssYs 0 6 41 3635 0 14 Dtool_Ns0bssYs 0 2 4 this 3 3626  5 other 1 3626  
39 14 Dtool_Ns0boMAb 0 6 42 3635 0 14 Dtool_Ns0boMAb 0 2 4 this 3 3626  5 other 1 3626  
40 14 Dtool_Ns0bVWAg 0 6 43 3634 0 14 Dtool_Ns0bVWAg 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
41 14 Dtool_Ns0bgmxE 0 6 43 3634 0 14 Dtool_Ns0bgmxE 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3626  5 other 1 3626  9 threshold 1 3628  
42 14 Dtool_Ns0bit5w 0 6 44 3629 0 14 Dtool_Ns0bit5w 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3626  
43 14 Dtool_Ns0bcmf3 0 6 44 3629 0 14 Dtool_Ns0bcmf3 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  9 threshold 1 3628  
44 14 Dtool_Ns0bT3v_ 0 6 45 3629 0 14 Dtool_Ns0bT3v_ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  4 hash 1 3629  
45 14 Dtool_Ns0bkEhk 0 6 45 3629 0 14 Dtool_Ns0bkEhk 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3626  4 hash 1 3629  9 threshold 1 3628  
46 14 Dtool_Ns0bsW5B 0 4 46 3630 0 14 Dtool_Ns0bsW5B 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  7 hashgen 1 3636  
47 14 Dtool_Ns0biO1N 0 4 46 3630 0 14 Dtool_Ns0biO1N 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3626  7 hashgen 1 3636  9 threshold 1 3628  
48 14 Dtool_Ns0bWPOu 0 7 47 3625 2062 14 Dtool_Ns0bWPOu 0 1 4 this 3 3626  
49 14 Dtool_Ns0bKsJ6 0 7 48 3625 2062 14 Dtool_Ns0bKsJ6 0 2 4 this 3 3626  5 other 1 3626  
50 14 Dtool_Ns0bLcrN 0 7 49 3625 2062 14 Dtool_Ns0bLcrN 0 2 4 this 3 3626  5 other 1 3626  
51 14 Dtool_Ns0b0d1B 0 7 50 3625 2062 14 Dtool_Ns0b0d1B 0 2 4 this 3 3626  6 scalar 1 3628  
52 14 Dtool_Ns0b01py 0 7 51 3625 2062 14 Dtool_Ns0b01py 0 2 4 this 3 3626  6 scalar 1 3628  
53 14 Dtool_Ns0b_q3M 0 6 52 3625 0 14 Dtool_Ns0b_q3M 0 2 4 this 3 3625  5 other 1 3626  
54 14 Dtool_Ns0b_aZg 0 6 53 3625 0 14 Dtool_Ns0b_aZg 0 2 4 this 3 3625  5 other 1 3626  
55 14 Dtool_Ns0biYvI 0 6 54 3625 0 14 Dtool_Ns0biYvI 0 2 4 this 3 3625  6 scalar 1 3628  
56 14 Dtool_Ns0bigj5 0 6 55 3625 0 14 Dtool_Ns0bigj5 0 2 4 this 3 3625  6 scalar 1 3628  
57 14 Dtool_Ns0bMnKH 0 4 56 3630 0 14 Dtool_Ns0bMnKH 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  5 other 1 3626  
58 14 Dtool_Ns0b_JpK 0 7 57 3625 2062 14 Dtool_Ns0b_JpK 0 2 4 this 3 3626  8 exponent 1 3628  
59 14 Dtool_Ns0bjlfD 0 6 58 3631 0 14 Dtool_Ns0bjlfD 0 2 4 this 3 3625  8 exponent 1 3628  
60 14 Dtool_Ns0bljgh 0 7 59 3625 2062 14 Dtool_Ns0bljgh 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
61 14 Dtool_Ns0bLXBg 0 7 60 3625 2062 14 Dtool_Ns0bLXBg 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
62 14 Dtool_Ns0bNeTt 0 6 61 3635 0 14 Dtool_Ns0bNeTt 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  5 other 1 3626  
63 14 Dtool_Ns0bnTFd 0 6 61 3635 0 14 Dtool_Ns0bnTFd 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3626  5 other 1 3626  9 threshold 1 3628  
64 14 Dtool_Ns0bpO8G 0 4 62 3630 0 14 Dtool_Ns0bpO8G 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  3 out 1 3638  
65 14 Dtool_Ns0biNXa 0 4 63 3630 0 14 Dtool_Ns0biNXa 0 3 4 this 3 3626  3 out 1 3638  10 class_name 1 3633  
66 14 Dtool_Ns0bO_h0 0 4 64 3630 0 14 Dtool_Ns0bO_h0 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  11 destination 1 3640  
67 14 Dtool_Ns0bOJCx 0 4 65 3630 0 14 Dtool_Ns0bOJCx 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  6 source 1 3642  
68 14 Dtool_Ns0b2Mbx 0 4 66 3630 0 14 Dtool_Ns0b2Mbx 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3626  11 destination 1 3640  
69 14 Dtool_Ns0b3ccD 0 4 67 3630 0 14 Dtool_Ns0b3ccD 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3625  6 source 1 3642  
70 14 Dtool_Ns0bKNOA 0 7 68 3645 0 14 Dtool_Ns0bKNOA 0 0 
71 14 Dtool_Ns0bGdnQ 0 7 70 3646 2125 14 Dtool_Ns0bGdnQ 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
72 14 Dtool_Ns0bCUdE 0 7 70 3646 2125 14 Dtool_Ns0bCUdE 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3647  
73 14 Dtool_Ns0bi9B6 0 7 70 3646 2125 14 Dtool_Ns0bi9B6 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
74 14 Dtool_Ns0bCY0M 0 7 70 3646 2125 14 Dtool_Ns0bCY0M 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3649  1 y 1 3649  
75 14 Dtool_Ns0bG77A 0 6 71 3646 0 14 Dtool_Ns0bG77A 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  4 copy 1 3647  
76 14 Dtool_Ns0bjNf2 0 6 71 3646 0 14 Dtool_Ns0bjNf2 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  10 fill_value 1 3649  
77 14 Dtool_Ns0bv7np 0 4 72 3630 0 14 Dtool_Ns0bv7np 0 2 4 this 3 3646  4 size 1 3629  
78 14 Dtool_Ns0bxrvf 0 6 75 3647 0 14 Dtool_Ns0bxrvf 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
79 14 Dtool_Ns0b52lD 0 6 76 3647 0 14 Dtool_Ns0b52lD 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
80 14 Dtool_Ns0b72zf 0 6 77 3647 0 14 Dtool_Ns0b72zf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
81 14 Dtool_Ns0bGkUN 0 6 79 3631 0 14 Dtool_Ns0bGkUN 0 1 4 this 3 3647  
82 14 Dtool_Ns0b5eyK 0 6 80 3631 0 14 Dtool_Ns0b5eyK 0 2 4 this 3 3647  9 attr_name 1 3633  
83 14 Dtool_Ns0bISlC 0 6 81 3634 0 14 Dtool_Ns0bISlC 0 3 4 this 3 3646  9 attr_name 1 3633  6 assign 1 3631  
84 14 Dtool_Ns0b5ZXF 0 4 82 3630 0 14 Dtool_Ns0b5ZXF 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  1 i 1 3634  
85 14 Dtool_Ns0bcHLi 0 6 82 3649 0 14 Dtool_Ns0bcHLi 0 2 4 this 3 3647  1 i 1 3634  
86 14 Dtool_Ns0bJisN 0 4 83 3630 0 14 Dtool_Ns0bJisN 0 3 4 this 3 3646  1 i 1 3634  1 v 1 3649  
87 14 Dtool_Ns0bP1fJ 0 6 84 3634 0 14 Dtool_Ns0bP1fJ 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
88 14 Dtool_Ns0bmuWQ 0 6 85 3635 0 14 Dtool_Ns0bmuWQ 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
89 14 Dtool_Ns0bUrv1 0 6 86 3649 0 14 Dtool_Ns0bUrv1 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  1 i 1 3634  
90 14 Dtool_Ns0bQsPh 0 6 87 3649 0 14 Dtool_Ns0bQsPh 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
91 14 Dtool_Ns0bQIIm 0 6 88 3649 0 14 Dtool_Ns0bQIIm 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
92 14 Dtool_Ns0b3_g8 0 4 89 3630 0 14 Dtool_Ns0b3_g8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3646  1 i 1 3634  5 value 1 3649  
93 14 Dtool_Ns0bKZlY 0 4 90 3630 0 14 Dtool_Ns0bKZlY 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3649  
94 14 Dtool_Ns0bK9dd 0 4 91 3630 0 14 Dtool_Ns0bK9dd 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3649  
95 14 Dtool_Ns0b0P6a 0 4 92 3630 0 14 Dtool_Ns0b0P6a 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3646  1 i 1 3634  5 value 1 3649  
96 14 Dtool_Ns0brQCX 0 4 93 3630 0 14 Dtool_Ns0brQCX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3649  
97 14 Dtool_Ns0br06b 0 4 94 3630 0 14 Dtool_Ns0br06b 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 value 1 3649  
98 14 Dtool_Ns0bu9TU 0 4 95 3630 0 14 Dtool_Ns0bu9TU 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
99 14 Dtool_Ns0b8xWH 0 6 96 3634 0 14 Dtool_Ns0b8xWH 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
100 14 Dtool_Ns0bsasc 0 4 97 3630 0 14 Dtool_Ns0bsasc 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  10 fill_value 1 3649  
101 14 Dtool_Ns0bbAy_ 0 4 98 3630 0 14 Dtool_Ns0bbAy_ 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3646  1 x 1 3649  1 y 1 3649  
102 14 Dtool_Ns0bcCJC 0 6 99 3649 0 14 Dtool_Ns0bcCJC 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
103 14 Dtool_Ns0bqI8r 0 6 100 3649 0 14 Dtool_Ns0bqI8r 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
104 14 Dtool_Ns0bMHIM 0 6 101 3649 0 14 Dtool_Ns0bMHIM 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
105 14 Dtool_Ns0bZAih 0 6 102 3635 0 14 Dtool_Ns0bZAih 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3646  
106 14 Dtool_Ns0bmCxs 0 7 103 3646 2125 14 Dtool_Ns0bmCxs 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  4 onto 1 3647  
107 14 Dtool_Ns0bLeos 0 6 104 3635 0 14 Dtool_Ns0bLeos 0 2 4 this 3 3647  5 other 1 3647  
108 14 Dtool_Ns0bgLYM 0 6 105 3635 0 14 Dtool_Ns0bgLYM 0 2 4 this 3 3647  5 other 1 3647  
109 14 Dtool_Ns0btrA7 0 6 106 3635 0 14 Dtool_Ns0btrA7 0 2 4 this 3 3647  5 other 1 3647  
110 14 Dtool_Ns0bcKgs 0 6 107 3634 0 14 Dtool_Ns0bcKgs 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
111 14 Dtool_Ns0be1W3 0 6 107 3634 0 14 Dtool_Ns0be1W3 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3647  5 other 1 3647  9 threshold 1 3649  
112 14 Dtool_Ns0bF_5A 0 6 108 3629 0 14 Dtool_Ns0bF_5A 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3647  
113 14 Dtool_Ns0b1_3f 0 6 108 3629 0 14 Dtool_Ns0b1_3f 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  9 threshold 1 3649  
114 14 Dtool_Ns0bwrvP 0 6 109 3629 0 14 Dtool_Ns0bwrvP 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  4 hash 1 3629  
115 14 Dtool_Ns0b_Zma 0 6 109 3629 0 14 Dtool_Ns0b_Zma 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3647  4 hash 1 3629  9 threshold 1 3649  
116 14 Dtool_Ns0bC65R 0 4 110 3630 0 14 Dtool_Ns0bC65R 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  7 hashgen 1 3636  
117 14 Dtool_Ns0b1h_1 0 4 110 3630 0 14 Dtool_Ns0b1h_1 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3647  7 hashgen 1 3636  9 threshold 1 3649  
118 14 Dtool_Ns0b4yP_ 0 7 111 3646 2125 14 Dtool_Ns0b4yP_ 0 1 4 this 3 3647  
119 14 Dtool_Ns0bFWpG 0 7 112 3646 2125 14 Dtool_Ns0bFWpG 0 2 4 this 3 3647  5 other 1 3647  
120 14 Dtool_Ns0bFmLa 0 7 113 3646 2125 14 Dtool_Ns0bFmLa 0 2 4 this 3 3647  5 other 1 3647  
121 14 Dtool_Ns0bP52U 0 7 114 3646 2125 14 Dtool_Ns0bP52U 0 2 4 this 3 3647  6 scalar 1 3649  
122 14 Dtool_Ns0bIRtF 0 7 115 3646 2125 14 Dtool_Ns0bIRtF 0 2 4 this 3 3647  6 scalar 1 3649  
123 14 Dtool_Ns0bzz2s 0 6 116 3646 0 14 Dtool_Ns0bzz2s 0 2 4 this 3 3646  5 other 1 3647  
124 14 Dtool_Ns0b8DYA 0 6 117 3646 0 14 Dtool_Ns0b8DYA 0 2 4 this 3 3646  5 other 1 3647  
125 14 Dtool_Ns0bWC3U 0 6 118 3646 0 14 Dtool_Ns0bWC3U 0 2 4 this 3 3646  6 scalar 1 3649  
126 14 Dtool_Ns0bX6rF 0 6 119 3646 0 14 Dtool_Ns0bX6rF 0 2 4 this 3 3646  6 scalar 1 3649  
127 14 Dtool_Ns0bqaaN 0 4 120 3630 0 14 Dtool_Ns0bqaaN 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  5 other 1 3647  
128 14 Dtool_Ns0boOZv 0 7 121 3646 2125 14 Dtool_Ns0boOZv 0 2 4 this 3 3647  8 exponent 1 3649  
129 14 Dtool_Ns0bCSMM 0 6 122 3631 0 14 Dtool_Ns0bCSMM 0 2 4 this 3 3646  8 exponent 1 3649  
130 14 Dtool_Ns0b48dK 0 7 123 3646 2125 14 Dtool_Ns0b48dK 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
131 14 Dtool_Ns0bWI9I 0 7 124 3646 2125 14 Dtool_Ns0bWI9I 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
132 14 Dtool_Ns0bnTK9 0 6 125 3635 0 14 Dtool_Ns0bnTK9 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  5 other 1 3647  
133 14 Dtool_Ns0b_OqN 0 6 125 3635 0 14 Dtool_Ns0b_OqN 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3647  5 other 1 3647  9 threshold 1 3649  
134 14 Dtool_Ns0bSB9W 0 4 126 3630 0 14 Dtool_Ns0bSB9W 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  3 out 1 3638  
135 14 Dtool_Ns0bHCWq 0 4 127 3630 0 14 Dtool_Ns0bHCWq 0 3 4 this 3 3647  3 out 1 3638  10 class_name 1 3633  
136 14 Dtool_Ns0bvThE 0 4 128 3630 0 14 Dtool_Ns0bvThE 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  11 destination 1 3640  
137 14 Dtool_Ns0bvkCB 0 4 129 3630 0 14 Dtool_Ns0bvkCB 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  6 source 1 3642  
138 14 Dtool_Ns0bYKaB 0 4 130 3630 0 14 Dtool_Ns0bYKaB 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3647  11 destination 1 3640  
139 14 Dtool_Ns0bYCdT 0 4 131 3630 0 14 Dtool_Ns0bYCdT 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3646  6 source 1 3642  
140 14 Dtool_Ns0bvAPQ 0 7 132 3645 0 14 Dtool_Ns0bvAPQ 0 0 
141 14 Dtool_Ns0btBdZ 0 7 134 3650 2188 14 Dtool_Ns0btBdZ 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
142 14 Dtool_Ns0baaD2 0 7 134 3650 2188 14 Dtool_Ns0baaD2 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3651  
143 14 Dtool_Ns0bjSAD 0 7 134 3650 2188 14 Dtool_Ns0bjSAD 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
144 14 Dtool_Ns0bFeso 0 7 134 3650 2188 14 Dtool_Ns0bFeso 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3634  1 y 1 3634  
145 14 Dtool_Ns0bL5tB 0 6 135 3650 0 14 Dtool_Ns0bL5tB 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  4 copy 1 3651  
146 14 Dtool_Ns0bjjoO 0 6 135 3650 0 14 Dtool_Ns0bjjoO 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  10 fill_value 1 3634  
147 14 Dtool_Ns0bjkpB 0 4 136 3630 0 14 Dtool_Ns0bjkpB 0 2 4 this 3 3650  4 size 1 3629  
148 14 Dtool_Ns0bGJw3 0 6 139 3651 0 14 Dtool_Ns0bGJw3 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
149 14 Dtool_Ns0b63nb 0 6 140 3651 0 14 Dtool_Ns0b63nb 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
150 14 Dtool_Ns0b4313 0 6 141 3651 0 14 Dtool_Ns0b4313 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
151 14 Dtool_Ns0bgYWl 0 6 143 3631 0 14 Dtool_Ns0bgYWl 0 1 4 this 3 3651  
152 14 Dtool_Ns0bxB0i 0 6 144 3631 0 14 Dtool_Ns0bxB0i 0 2 4 this 3 3651  9 attr_name 1 3633  
153 14 Dtool_Ns0biCna 0 6 145 3634 0 14 Dtool_Ns0biCna 0 3 4 this 3 3650  9 attr_name 1 3633  6 assign 1 3631  
154 14 Dtool_Ns0blWYd 0 4 146 3630 0 14 Dtool_Ns0blWYd 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  1 i 1 3634  
155 14 Dtool_Ns0bRlN6 0 6 146 3634 0 14 Dtool_Ns0bRlN6 0 2 4 this 3 3651  1 i 1 3634  
156 14 Dtool_Ns0bon2t 0 4 147 3630 0 14 Dtool_Ns0bon2t 0 3 4 this 3 3650  1 i 1 3634  1 v 1 3634  
157 14 Dtool_Ns0bT6gh 0 6 148 3634 0 14 Dtool_Ns0bT6gh 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::size
//       Access: Published, Static
//  Description: Returns 2: the number of components of a LVecBase2.
//////////////////////////////////////////////////////////////////// 0 
158 14 Dtool_Ns0bceXo 0 6 149 3635 0 14 Dtool_Ns0bceXo 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
159 14 Dtool_Ns0bNawN 0 6 150 3634 0 14 Dtool_Ns0bNawN 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  1 i 1 3634  
160 14 Dtool_Ns0bnKQ5 0 6 151 3634 0 14 Dtool_Ns0bnKQ5 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
161 14 Dtool_Ns0bnmI_ 0 6 152 3634 0 14 Dtool_Ns0bnmI_ 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
162 14 Dtool_Ns0bK9CT 0 4 153 3630 0 14 Dtool_Ns0bK9CT 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3650  1 i 1 3634  5 value 1 3634  
163 14 Dtool_Ns0b5Urw 0 4 154 3630 0 14 Dtool_Ns0b5Urw 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 value 1 3634  
164 14 Dtool_Ns0b5wj1 0 4 155 3630 0 14 Dtool_Ns0b5wj1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 value 1 3634  
165 14 Dtool_Ns0bjSE7 0 4 156 3630 0 14 Dtool_Ns0bjSE7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3650  1 i 1 3634  5 value 1 3634  
166 14 Dtool_Ns0bIsIv 0 4 157 3630 0 14 Dtool_Ns0bIsIv 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 value 1 3634  
167 14 Dtool_Ns0bIIB0 0 4 158 3630 0 14 Dtool_Ns0bIIB0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 value 1 3634  
168 14 Dtool_Ns0bwQUs 0 4 159 3630 0 14 Dtool_Ns0bwQUs 395 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_data
//       Access: Published
//  Description: Returns the address of the first of the two data
//               elements in the vector.  The next element
//               occupies the next position consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
169 14 Dtool_Ns0bKdXf 0 6 160 3634 0 14 Dtool_Ns0bKdXf 279 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
170 14 Dtool_Ns0bBZvo 0 4 161 3630 0 14 Dtool_Ns0bBZvo 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  10 fill_value 1 3634  
171 14 Dtool_Ns0bbE9S 0 4 162 3630 0 14 Dtool_Ns0bbE9S 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3650  1 x 1 3634  1 y 1 3634  
172 14 Dtool_Ns0b7TNd 0 6 163 3634 0 14 Dtool_Ns0b7TNd 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  5 other 1 3651  
173 14 Dtool_Ns0bsl9D 0 6 164 3634 0 14 Dtool_Ns0bsl9D 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
174 14 Dtool_Ns0bRsZt 0 6 165 3635 0 14 Dtool_Ns0bRsZt 0 2 4 this 3 3651  5 other 1 3651  
175 14 Dtool_Ns0b9Ta8 0 6 166 3635 0 14 Dtool_Ns0b9Ta8 0 2 4 this 3 3651  5 other 1 3651  
176 14 Dtool_Ns0bxzDr 0 6 167 3635 0 14 Dtool_Ns0bxzDr 0 2 4 this 3 3651  5 other 1 3651  
177 14 Dtool_Ns0b9jRt 0 6 168 3634 0 14 Dtool_Ns0b9jRt 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  5 other 1 3651  
178 14 Dtool_Ns0bq87Y 0 6 169 3629 0 14 Dtool_Ns0bq87Y 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3651  
179 14 Dtool_Ns0b9Kwn 0 6 170 3629 0 14 Dtool_Ns0b9Kwn 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  4 hash 1 3629  
180 14 Dtool_Ns0bXD6p 0 4 171 3630 0 14 Dtool_Ns0bXD6p 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  7 hashgen 1 3636  
181 14 Dtool_Ns0bzJQW 0 7 172 3650 2188 14 Dtool_Ns0bzJQW 0 1 4 this 3 3651  
182 14 Dtool_Ns0bfkaH 0 7 173 3650 2188 14 Dtool_Ns0bfkaH 0 2 4 this 3 3651  5 other 1 3651  
183 14 Dtool_Ns0bf08a 0 7 174 3650 2188 14 Dtool_Ns0bf08a 0 2 4 this 3 3651  5 other 1 3651  
184 14 Dtool_Ns0buEBm 0 7 175 3650 2188 14 Dtool_Ns0buEBm 0 2 4 this 3 3651  6 scalar 1 3634  
185 14 Dtool_Ns0bh82W 0 7 176 3650 2188 14 Dtool_Ns0bh82W 0 2 4 this 3 3651  6 scalar 1 3634  
186 14 Dtool_Ns0brr5c 0 6 177 3650 0 14 Dtool_Ns0brr5c 0 2 4 this 3 3650  5 other 1 3651  
187 14 Dtool_Ns0brbaw 0 6 178 3650 0 14 Dtool_Ns0brbaw 0 2 4 this 3 3650  5 other 1 3651  
188 14 Dtool_Ns0bJc9w 0 6 179 3650 0 14 Dtool_Ns0bJc9w 0 2 4 this 3 3650  6 scalar 1 3634  
189 14 Dtool_Ns0bK0xh 0 6 180 3650 0 14 Dtool_Ns0bK0xh 0 2 4 this 3 3650  6 scalar 1 3634  
190 14 Dtool_Ns0bwV29 0 4 181 3630 0 14 Dtool_Ns0bwV29 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  5 other 1 3651  
191 14 Dtool_Ns0b5a3E 0 7 182 3650 2188 14 Dtool_Ns0b5a3E 0 2 4 this 3 3651  8 exponent 1 3634  
192 14 Dtool_Ns0bSrQE 0 6 183 3631 0 14 Dtool_Ns0bSrQE 0 2 4 this 3 3650  8 exponent 1 3634  
193 14 Dtool_Ns0bwfHE 0 7 184 3650 2188 14 Dtool_Ns0bwfHE 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  5 other 1 3651  
194 14 Dtool_Ns0busnC 0 7 185 3650 2188 14 Dtool_Ns0busnC 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  5 other 1 3651  
195 14 Dtool_Ns0bfkiV 0 6 186 3635 0 14 Dtool_Ns0bfkiV 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  5 other 1 3651  
196 14 Dtool_Ns0b_gWE 0 6 186 3635 0 14 Dtool_Ns0b_gWE 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3651  5 other 1 3651  9 threshold 1 3634  
197 14 Dtool_Ns0b019u 0 4 187 3630 0 14 Dtool_Ns0b019u 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  3 out 1 3638  
198 14 Dtool_Ns0bq9YC 0 4 188 3630 0 14 Dtool_Ns0bq9YC 0 3 4 this 3 3651  3 out 1 3638  10 class_name 1 3633  
199 14 Dtool_Ns0bTYic 0 4 189 3630 0 14 Dtool_Ns0bTYic 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  11 destination 1 3640  
200 14 Dtool_Ns0bbIEZ 0 4 190 3630 0 14 Dtool_Ns0bbIEZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  6 source 1 3642  
201 14 Dtool_Ns0bu9cZ 0 4 191 3630 0 14 Dtool_Ns0bu9cZ 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3651  11 destination 1 3640  
202 14 Dtool_Ns0bOtdr 0 4 192 3630 0 14 Dtool_Ns0bOtdr 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase2::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3650  6 source 1 3642  
203 14 Dtool_Ns0bb8Po 0 7 193 3645 0 14 Dtool_Ns0bb8Po 0 0 
204 14 Dtool_Ns0bQv_8 0 7 195 3653 2257 14 Dtool_Ns0bQv_8 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
205 14 Dtool_Ns0b_wFf 0 7 195 3653 2257 14 Dtool_Ns0b_wFf 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3626  
206 14 Dtool_Ns0btvIb 0 7 195 3653 2257 14 Dtool_Ns0btvIb 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
207 14 Dtool_Ns0bOs00 0 7 195 3653 2257 14 Dtool_Ns0bOs00 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3628  1 y 1 3628  
208 14 Dtool_Ns0brg1b 0 6 196 3653 0 14 Dtool_Ns0brg1b 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  4 copy 1 3626  
209 14 Dtool_Ns0bOfPd 0 6 196 3653 0 14 Dtool_Ns0bOfPd 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3653  10 fill_value 1 3628  
210 14 Dtool_Ns0bs393 0 6 197 3631 0 14 Dtool_Ns0bs393 0 2 4 this 3 3654  9 attr_name 1 3633  
211 14 Dtool_Ns0bSIrv 0 6 198 3634 0 14 Dtool_Ns0bSIrv 0 3 4 this 3 3653  9 attr_name 1 3633  6 assign 1 3631  
212 14 Dtool_Ns0bMCtA 0 6 199 3654 0 14 Dtool_Ns0bMCtA 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
213 14 Dtool_Ns0byI1V 0 6 200 3654 0 14 Dtool_Ns0byI1V 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
214 14 Dtool_Ns0bykua 0 6 201 3654 0 14 Dtool_Ns0bykua 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
215 14 Dtool_Ns0bVMph 0 7 202 3653 2257 14 Dtool_Ns0bVMph 0 1 4 this 3 3654  
216 14 Dtool_Ns0bJC_P 0 7 203 3625 2062 14 Dtool_Ns0bJC_P 0 2 4 this 3 3654  5 other 1 3626  
217 14 Dtool_Ns0bjfKg 0 7 203 3653 2257 14 Dtool_Ns0bjfKg 0 2 4 this 3 3654  5 other 1 3654  
218 14 Dtool_Ns0bpPmQ 0 7 204 3625 2062 14 Dtool_Ns0bpPmQ 0 2 4 this 3 3654  5 other 1 3626  
219 14 Dtool_Ns0bDbxg 0 7 204 3653 2257 14 Dtool_Ns0bDbxg 0 2 4 this 3 3654  5 other 1 3654  
220 14 Dtool_Ns0bdPP0 0 7 205 3653 2257 14 Dtool_Ns0bdPP0 0 2 4 this 3 3654  6 scalar 1 3628  
221 14 Dtool_Ns0btnx1 0 7 206 3653 2257 14 Dtool_Ns0btnx1 0 2 4 this 3 3654  6 scalar 1 3628  
222 14 Dtool_Ns0bpiFZ 0 7 207 3653 2257 14 Dtool_Ns0bpiFZ 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  4 onto 1 3626  
223 14 Dtool_Ns0be9_x 0 6 208 3628 0 14 Dtool_Ns0be9_x 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 other 1 3654  
224 14 Dtool_Ns0b_avu 0 6 209 3628 0 14 Dtool_Ns0b_avu 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3654  5 other 1 3654  
225 14 Dtool_Ns0bfA9I 0 4 210 3630 0 14 Dtool_Ns0bfA9I 0 3 4 this 3 3654  3 out 1 3638  10 class_name 1 3633  
226 14 Dtool_Ns0bhYMy 0 7 211 3645 0 14 Dtool_Ns0bhYMy 0 0 
227 14 Dtool_Ns0bwcd5 0 7 214 3656 2275 14 Dtool_Ns0bwcd5 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
228 14 Dtool_Ns0bqdIZ 0 7 214 3656 2275 14 Dtool_Ns0bqdIZ 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3647  
229 14 Dtool_Ns0beGDk 0 7 214 3656 2275 14 Dtool_Ns0beGDk 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
230 14 Dtool_Ns0bAy7S 0 7 214 3656 2275 14 Dtool_Ns0bAy7S 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3649  1 y 1 3649  
231 14 Dtool_Ns0bzhOK 0 6 215 3656 0 14 Dtool_Ns0bzhOK 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3656  4 copy 1 3647  
232 14 Dtool_Ns0b2_5n 0 6 215 3656 0 14 Dtool_Ns0b2_5n 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3656  10 fill_value 1 3649  
233 14 Dtool_Ns0bH0d0 0 6 216 3631 0 14 Dtool_Ns0bH0d0 0 2 4 this 3 3657  9 attr_name 1 3633  
234 14 Dtool_Ns0bNLLs 0 6 217 3634 0 14 Dtool_Ns0bNLLs 0 3 4 this 3 3656  9 attr_name 1 3633  6 assign 1 3631  
235 14 Dtool_Ns0b0FN9 0 6 218 3657 0 14 Dtool_Ns0b0FN9 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
236 14 Dtool_Ns0bpXVS 0 6 219 3657 0 14 Dtool_Ns0bpXVS 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
237 14 Dtool_Ns0bp7OX 0 6 220 3657 0 14 Dtool_Ns0bp7OX 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
238 14 Dtool_Ns0bONJe 0 7 221 3656 2275 14 Dtool_Ns0bONJe 0 1 4 this 3 3657  
239 14 Dtool_Ns0bgDY_ 0 7 222 3646 2125 14 Dtool_Ns0bgDY_ 0 2 4 this 3 3657  5 other 1 3647  
240 14 Dtool_Ns0bKsOa 0 7 222 3656 2275 14 Dtool_Ns0bKsOa 0 2 4 this 3 3657  5 other 1 3657  
241 14 Dtool_Ns0bAO__ 0 7 223 3646 2125 14 Dtool_Ns0bAO__ 0 2 4 this 3 3657  5 other 1 3647  
242 14 Dtool_Ns0bqo1a 0 7 223 3656 2275 14 Dtool_Ns0bqo1a 0 2 4 this 3 3657  5 other 1 3657  
243 14 Dtool_Ns0b_Z18 0 7 224 3656 2275 14 Dtool_Ns0b_Z18 0 2 4 this 3 3657  6 scalar 1 3649  
244 14 Dtool_Ns0bvwW_ 0 7 225 3656 2275 14 Dtool_Ns0bvwW_ 0 2 4 this 3 3657  6 scalar 1 3649  
245 14 Dtool_Ns0bYmkd 0 7 226 3656 2275 14 Dtool_Ns0bYmkd 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  4 onto 1 3647  
246 14 Dtool_Ns0bH_RS 0 6 227 3649 0 14 Dtool_Ns0bH_RS 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_rad
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3657  
247 14 Dtool_Ns0boZBP 0 6 228 3649 0 14 Dtool_Ns0boZBP 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::signed_angle_deg
//       Access: Published
//  Description: returns the signed angled between two vectors. 
//               normalization is NOT necessary
//////////////////////////////////////////////////////////////////// 2 4 this 3 3657  5 other 1 3657  
248 14 Dtool_Ns0b2DdF 0 4 229 3630 0 14 Dtool_Ns0b2DdF 0 3 4 this 3 3657  3 out 1 3638  10 class_name 1 3633  
249 14 Dtool_Ns0b4Zsu 0 7 230 3645 0 14 Dtool_Ns0b4Zsu 0 0 
250 14 Dtool_Ns0bBXQC 0 7 233 3659 2290 14 Dtool_Ns0bBXQC 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
251 14 Dtool_Ns0bF0Bo 0 7 233 3659 2290 14 Dtool_Ns0bF0Bo 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3651  
252 14 Dtool_Ns0bk5GM 0 7 233 3659 2290 14 Dtool_Ns0bk5GM 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
253 14 Dtool_Ns0bVk_T 0 7 233 3659 2290 14 Dtool_Ns0bVk_T 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3634  1 y 1 3634  
254 14 Dtool_Ns0bXAP2 0 6 234 3659 0 14 Dtool_Ns0bXAP2 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  4 copy 1 3651  
255 14 Dtool_Ns0b4eq4 0 6 234 3659 0 14 Dtool_Ns0b4eq4 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3659  10 fill_value 1 3634  
256 14 Dtool_Ns0bp2Nd 0 6 235 3631 0 14 Dtool_Ns0bp2Nd 0 2 4 this 3 3660  9 attr_name 1 3633  
257 14 Dtool_Ns0bvI7U 0 6 236 3634 0 14 Dtool_Ns0bvI7U 0 3 4 this 3 3659  9 attr_name 1 3633  6 assign 1 3631  
258 14 Dtool_Ns0bWD9l 0 6 237 3660 0 14 Dtool_Ns0bWD9l 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
259 14 Dtool_Ns0bIIF7 0 6 238 3660 0 14 Dtool_Ns0bIIF7 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
260 14 Dtool_Ns0bIk__ 0 6 239 3660 0 14 Dtool_Ns0bIk__ 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
261 14 Dtool_Ns0bQP5G 0 7 240 3659 2290 14 Dtool_Ns0bQP5G 0 1 4 this 3 3660  
262 14 Dtool_Ns0bNtaq 0 7 241 3650 2188 14 Dtool_Ns0bNtaq 0 2 4 this 3 3660  5 other 1 3651  
263 14 Dtool_Ns0bs1FJ 0 7 241 3659 2290 14 Dtool_Ns0bs1FJ 0 2 4 this 3 3660  5 other 1 3660  
264 14 Dtool_Ns0btgBr 0 7 242 3650 2188 14 Dtool_Ns0btgBr 0 2 4 this 3 3660  5 other 1 3651  
265 14 Dtool_Ns0bM5qJ 0 7 242 3659 2290 14 Dtool_Ns0bM5qJ 0 2 4 this 3 3660  5 other 1 3660  
266 14 Dtool_Ns0b_wWx 0 7 243 3659 2290 14 Dtool_Ns0b_wWx 0 2 4 this 3 3660  6 scalar 1 3634  
267 14 Dtool_Ns0bPo4y 0 7 244 3659 2290 14 Dtool_Ns0bPo4y 0 2 4 this 3 3660  6 scalar 1 3634  
268 14 Dtool_Ns0bRBNu 0 4 245 3630 0 14 Dtool_Ns0bRBNu 0 3 4 this 3 3660  3 out 1 3638  10 class_name 1 3633  
269 14 Dtool_Ns0bmfcX 0 7 246 3645 0 14 Dtool_Ns0bmfcX 0 0 
270 14 Dtool_Ns0bzKKY 0 7 249 3662 2306 14 Dtool_Ns0bzKKY 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
271 14 Dtool_Ns0btY8N 0 7 249 3662 2306 14 Dtool_Ns0btY8N 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3626  
272 14 Dtool_Ns0bCtvQ 0 7 249 3662 2306 14 Dtool_Ns0bCtvQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
273 14 Dtool_Ns0bqlQB 0 7 249 3662 2306 14 Dtool_Ns0bqlQB 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3628  1 y 1 3628  
274 14 Dtool_Ns0b_egO 0 6 250 3662 0 14 Dtool_Ns0b_egO 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3662  4 copy 1 3626  
275 14 Dtool_Ns0bqvjK 0 6 250 3662 0 14 Dtool_Ns0bqvjK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3662  10 fill_value 1 3628  
276 14 Dtool_Ns0bP_UN 0 6 251 3631 0 14 Dtool_Ns0bP_UN 0 2 4 this 3 3663  9 attr_name 1 3633  
277 14 Dtool_Ns0bB4B1 0 6 252 3634 0 14 Dtool_Ns0bB4B1 0 3 4 this 3 3662  9 attr_name 1 3633  6 assign 1 3631  
278 14 Dtool_Ns0bqnt3 0 6 253 3663 0 14 Dtool_Ns0bqnt3 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
279 14 Dtool_Ns0bCGWE 0 6 254 3663 0 14 Dtool_Ns0bCGWE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
280 14 Dtool_Ns0baRgE 0 6 255 3663 0 14 Dtool_Ns0baRgE 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
281 14 Dtool_Ns0b01sU 0 7 256 3662 2306 14 Dtool_Ns0b01sU 0 1 4 this 3 3663  
282 14 Dtool_Ns0bsVHw 0 7 257 3625 2062 14 Dtool_Ns0bsVHw 0 2 4 this 3 3663  5 other 1 3626  
283 14 Dtool_Ns0bf_os 0 7 257 3662 2306 14 Dtool_Ns0bf_os 0 2 4 this 3 3663  5 other 1 3654  
284 14 Dtool_Ns0bYCqi 0 7 258 3653 2257 14 Dtool_Ns0bYCqi 0 2 4 this 3 3663  5 other 1 3663  
285 14 Dtool_Ns0b3nIw 0 7 258 3625 2062 14 Dtool_Ns0b3nIw 0 2 4 this 3 3663  5 other 1 3626  
286 14 Dtool_Ns0bggps 0 7 258 3662 2306 14 Dtool_Ns0bggps 0 2 4 this 3 3663  5 other 1 3654  
287 14 Dtool_Ns0bULR7 0 7 259 3662 2306 14 Dtool_Ns0bULR7 0 2 4 this 3 3663  6 scalar 1 3628  
288 14 Dtool_Ns0brFUb 0 7 260 3662 2306 14 Dtool_Ns0brFUb 0 2 4 this 3 3663  6 scalar 1 3628  
289 14 Dtool_Ns0bP_bo 0 7 261 3662 2306 14 Dtool_Ns0bP_bo 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3663  4 onto 1 3626  
290 14 Dtool_Ns0bFi0t 0 4 262 3630 0 14 Dtool_Ns0bFi0t 0 3 4 this 3 3663  3 out 1 3638  10 class_name 1 3633  
291 14 Dtool_Ns0bntNT 0 7 263 3645 0 14 Dtool_Ns0bntNT 0 0 
292 14 Dtool_Ns0btKnR 0 7 266 3665 2322 14 Dtool_Ns0btKnR 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
293 14 Dtool_Ns0bkCZP 0 7 266 3665 2322 14 Dtool_Ns0bkCZP 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3647  
294 14 Dtool_Ns0b38Ro 0 7 266 3665 2322 14 Dtool_Ns0b38Ro 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
295 14 Dtool_Ns0bVLaV 0 7 266 3665 2322 14 Dtool_Ns0bVLaV 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3649  1 y 1 3649  
296 14 Dtool_Ns0b9M99 0 6 267 3665 0 14 Dtool_Ns0b9M99 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  4 copy 1 3647  
297 14 Dtool_Ns0bMH4I 0 6 267 3665 0 14 Dtool_Ns0bMH4I 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3665  10 fill_value 1 3649  
298 14 Dtool_Ns0bx_N_ 0 6 268 3631 0 14 Dtool_Ns0bx_N_ 0 2 4 this 3 3666  9 attr_name 1 3633  
299 14 Dtool_Ns0be46m 0 6 269 3634 0 14 Dtool_Ns0be46m 0 3 4 this 3 3665  9 attr_name 1 3633  6 assign 1 3631  
300 14 Dtool_Ns0brnmp 0 6 270 3666 0 14 Dtool_Ns0brnmp 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
301 14 Dtool_Ns0bAGP2 0 6 271 3666 0 14 Dtool_Ns0bAGP2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
302 14 Dtool_Ns0bYRZ2 0 6 272 3666 0 14 Dtool_Ns0bYRZ2 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
303 14 Dtool_Ns0b11lG 0 7 273 3665 2322 14 Dtool_Ns0b11lG 0 1 4 this 3 3666  
304 14 Dtool_Ns0bvLkf 0 7 274 3646 2125 14 Dtool_Ns0bvLkf 0 2 4 this 3 3666  5 other 1 3647  
305 14 Dtool_Ns0bCmce 0 7 274 3665 2322 14 Dtool_Ns0bCmce 0 2 4 this 3 3666  5 other 1 3657  
306 14 Dtool_Ns0bNGic 0 7 275 3656 2275 14 Dtool_Ns0bNGic 0 2 4 this 3 3666  5 other 1 3666  
307 14 Dtool_Ns0b0Vlf 0 7 275 3646 2125 14 Dtool_Ns0b0Vlf 0 2 4 this 3 3666  5 other 1 3647  
308 14 Dtool_Ns0bFode 0 7 275 3665 2322 14 Dtool_Ns0bFode 0 2 4 this 3 3666  5 other 1 3657  
309 14 Dtool_Ns0brAiF 0 7 276 3665 2322 14 Dtool_Ns0brAiF 0 2 4 this 3 3666  6 scalar 1 3649  
310 14 Dtool_Ns0b6Vkl 0 7 277 3665 2322 14 Dtool_Ns0b6Vkl 0 2 4 this 3 3666  6 scalar 1 3649  
311 14 Dtool_Ns0bi_k4 0 7 278 3665 2322 14 Dtool_Ns0bi_k4 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3666  4 onto 1 3647  
312 14 Dtool_Ns0bEitf 0 4 279 3630 0 14 Dtool_Ns0bEitf 0 3 4 this 3 3666  3 out 1 3638  10 class_name 1 3633  
313 14 Dtool_Ns0bmtGF 0 7 280 3645 0 14 Dtool_Ns0bmtGF 0 0 
314 14 Dtool_Ns0b8q_h 0 7 283 3668 2337 14 Dtool_Ns0b8q_h 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
315 14 Dtool_Ns0bzLwr 0 7 283 3668 2337 14 Dtool_Ns0bzLwr 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3651  
316 14 Dtool_Ns0bWar6 0 7 283 3668 2337 14 Dtool_Ns0bWar6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
317 14 Dtool_Ns0b87LW 0 7 283 3668 2337 14 Dtool_Ns0b87LW 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 1 x 1 3634  1 y 1 3634  
318 14 Dtool_Ns0b5LVH 0 6 284 3668 0 14 Dtool_Ns0b5LVH 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  4 copy 1 3651  
319 14 Dtool_Ns0bP0ar 0 6 284 3668 0 14 Dtool_Ns0bP0ar 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3668  10 fill_value 1 3634  
320 14 Dtool_Ns0bNffC 0 6 285 3631 0 14 Dtool_Ns0bNffC 0 2 4 this 3 3669  9 attr_name 1 3633  
321 14 Dtool_Ns0bDYMq 0 6 286 3634 0 14 Dtool_Ns0bDYMq 0 3 4 this 3 3668  9 attr_name 1 3633  6 assign 1 3631  
322 14 Dtool_Ns0bkH3s 0 6 287 3669 0 14 Dtool_Ns0bkH3s 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
323 14 Dtool_Ns0bDmg5 0 6 288 3669 0 14 Dtool_Ns0bDmg5 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
324 14 Dtool_Ns0bbxq5 0 6 289 3669 0 14 Dtool_Ns0bbxq5 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint2::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
325 14 Dtool_Ns0bKV3J 0 7 290 3668 2337 14 Dtool_Ns0bKV3J 0 1 4 this 3 3669  
326 14 Dtool_Ns0bqO8o 0 7 291 3650 2188 14 Dtool_Ns0bqO8o 0 2 4 this 3 3669  5 other 1 3651  
327 14 Dtool_Ns0bDL5h 0 7 291 3668 2337 14 Dtool_Ns0bDL5h 0 2 4 this 3 3669  5 other 1 3660  
328 14 Dtool_Ns0bzw0r 0 7 292 3659 2290 14 Dtool_Ns0bzw0r 0 2 4 this 3 3669  5 other 1 3669  
329 14 Dtool_Ns0bxY9o 0 7 292 3650 2188 14 Dtool_Ns0bxY9o 0 2 4 this 3 3669  5 other 1 3651  
330 14 Dtool_Ns0bI97h 0 7 292 3668 2337 14 Dtool_Ns0bI97h 0 2 4 this 3 3669  5 other 1 3660  
331 14 Dtool_Ns0bwGL3 0 7 293 3668 2337 14 Dtool_Ns0bwGL3 0 2 4 this 3 3669  6 scalar 1 3634  
332 14 Dtool_Ns0beZNX 0 7 294 3668 2337 14 Dtool_Ns0beZNX 0 2 4 this 3 3669  6 scalar 1 3634  
333 14 Dtool_Ns0bDC_i 0 4 295 3630 0 14 Dtool_Ns0bDC_i 0 3 4 this 3 3669  3 out 1 3638  10 class_name 1 3633  
334 14 Dtool_Ns0bpNXI 0 7 296 3645 0 14 Dtool_Ns0bpNXI 0 0 
335 14 Dtool_Ns0b9GM2 0 7 299 3671 2347 14 Dtool_Ns0b9GM2 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
336 14 Dtool_Ns0b5NlT 0 7 299 3671 2347 14 Dtool_Ns0b5NlT 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3626  1 z 1 3628  
337 14 Dtool_Ns0bRRmU 0 7 299 3671 2347 14 Dtool_Ns0bRRmU 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
338 14 Dtool_Ns0bBPuZ 0 7 299 3671 2347 14 Dtool_Ns0bBPuZ 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
339 14 Dtool_Ns0bnj6v 0 7 299 3671 2347 14 Dtool_Ns0bnj6v 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3628  1 y 1 3628  1 z 1 3628  
340 14 Dtool_Ns0bqOP9 0 6 300 3671 0 14 Dtool_Ns0bqOP9 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  4 copy 1 3672  
341 14 Dtool_Ns0brfXC 0 6 300 3671 0 14 Dtool_Ns0brfXC 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  10 fill_value 1 3628  
342 14 Dtool_Ns0bkPX7 0 4 301 3630 0 14 Dtool_Ns0bkPX7 0 2 4 this 3 3671  4 size 1 3629  
343 14 Dtool_Ns0bKGfx 0 6 304 3672 0 14 Dtool_Ns0bKGfx 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
344 14 Dtool_Ns0bmCVV 0 6 305 3672 0 14 Dtool_Ns0bmCVV 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
345 14 Dtool_Ns0bgCjx 0 6 306 3672 0 14 Dtool_Ns0bgCjx 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
346 14 Dtool_Ns0bjCxN 0 6 307 3672 0 14 Dtool_Ns0bjCxN 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
347 14 Dtool_Ns0b4pFf 0 6 309 3631 0 14 Dtool_Ns0b4pFf 0 1 4 this 3 3672  
348 14 Dtool_Ns0brQjc 0 6 310 3631 0 14 Dtool_Ns0brQjc 0 2 4 this 3 3672  9 attr_name 1 3633  
349 14 Dtool_Ns0bzHVU 0 6 311 3634 0 14 Dtool_Ns0bzHVU 0 3 4 this 3 3671  9 attr_name 1 3633  6 assign 1 3631  
350 14 Dtool_Ns0b01HX 0 4 312 3630 0 14 Dtool_Ns0b01HX 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  1 i 1 3634  
351 14 Dtool_Ns0bnq7z 0 6 312 3628 0 14 Dtool_Ns0bnq7z 0 2 4 this 3 3672  1 i 1 3634  
352 14 Dtool_Ns0bCMJn 0 4 313 3630 0 14 Dtool_Ns0bCMJn 0 3 4 this 3 3671  1 i 1 3634  1 v 1 3628  
353 14 Dtool_Ns0bEZPb 0 6 314 3634 0 14 Dtool_Ns0bEZPb 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
354 14 Dtool_Ns0bd5Gi 0 6 315 3635 0 14 Dtool_Ns0bd5Gi 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
355 14 Dtool_Ns0bO_fH 0 6 316 3628 0 14 Dtool_Ns0bO_fH 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  1 i 1 3634  
356 14 Dtool_Ns0bdY_y 0 6 317 3628 0 14 Dtool_Ns0bdY_y 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
357 14 Dtool_Ns0bd843 0 6 318 3628 0 14 Dtool_Ns0bd843 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
358 14 Dtool_Ns0bdQw8 0 6 319 3628 0 14 Dtool_Ns0bdQw8 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
359 14 Dtool_Ns0bUQX1 0 4 320 3630 0 14 Dtool_Ns0bUQX1 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3671  1 i 1 3634  5 value 1 3628  
360 14 Dtool_Ns0bcuZH 0 4 321 3630 0 14 Dtool_Ns0bcuZH 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3628  
361 14 Dtool_Ns0bcKSM 0 4 322 3630 0 14 Dtool_Ns0bcKSM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3628  
362 14 Dtool_Ns0bcWKR 0 4 323 3630 0 14 Dtool_Ns0bcWKR 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3628  
363 14 Dtool_Ns0bWJYp 0 7 324 3625 2062 14 Dtool_Ns0bWJYp 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
364 14 Dtool_Ns0bbJmF 0 7 325 3625 2062 14 Dtool_Ns0bbJmF 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
365 14 Dtool_Ns0bbleK 0 7 326 3625 2062 14 Dtool_Ns0bbleK 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
366 14 Dtool_Ns0bHyX0 0 4 327 3630 0 14 Dtool_Ns0bHyX0 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3671  1 i 1 3634  5 value 1 3628  
367 14 Dtool_Ns0b1m2F 0 4 328 3630 0 14 Dtool_Ns0b1m2F 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3628  
368 14 Dtool_Ns0b1CvK 0 4 329 3630 0 14 Dtool_Ns0b1CvK 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3628  
369 14 Dtool_Ns0b1unP 0 4 330 3630 0 14 Dtool_Ns0b1unP 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 value 1 3628  
370 14 Dtool_Ns0bjRCm 0 4 331 3630 0 14 Dtool_Ns0bjRCm 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
371 14 Dtool_Ns0bpFHZ 0 6 332 3634 0 14 Dtool_Ns0bpFHZ 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
372 14 Dtool_Ns0bq1Xn 0 4 333 3630 0 14 Dtool_Ns0bq1Xn 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  10 fill_value 1 3628  
373 14 Dtool_Ns0bOavy 0 4 334 3630 0 14 Dtool_Ns0bOavy 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3671  1 x 1 3628  1 y 1 3628  1 z 1 3628  
374 14 Dtool_Ns0baDIV 0 6 335 3628 0 14 Dtool_Ns0baDIV 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
375 14 Dtool_Ns0blUs9 0 6 336 3628 0 14 Dtool_Ns0blUs9 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
376 14 Dtool_Ns0bbb4d 0 6 337 3628 0 14 Dtool_Ns0bbb4d 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
377 14 Dtool_Ns0bOsSz 0 6 338 3635 0 14 Dtool_Ns0bOsSz 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3671  
378 14 Dtool_Ns0bQhma 0 7 339 3671 2347 14 Dtool_Ns0bQhma 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  4 onto 1 3672  
379 14 Dtool_Ns0baJ6l 0 7 340 3671 2347 14 Dtool_Ns0baJ6l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
380 14 Dtool_Ns0bdE8o 0 6 341 3635 0 14 Dtool_Ns0bdE8o 0 2 4 this 3 3672  5 other 1 3672  
381 14 Dtool_Ns0bFt4v 0 6 342 3635 0 14 Dtool_Ns0bFt4v 0 2 4 this 3 3672  5 other 1 3672  
382 14 Dtool_Ns0bBNge 0 6 343 3635 0 14 Dtool_Ns0bBNge 0 2 4 this 3 3672  5 other 1 3672  
383 14 Dtool_Ns0bW_5p 0 7 344 3671 2347 14 Dtool_Ns0bW_5p 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
384 14 Dtool_Ns0b53zo 0 6 345 3634 0 14 Dtool_Ns0b53zo 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
385 14 Dtool_Ns0b8GlN 0 6 345 3634 0 14 Dtool_Ns0b8GlN 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3672  5 other 1 3672  9 threshold 1 3628  
386 14 Dtool_Ns0bOipS 0 6 346 3629 0 14 Dtool_Ns0bOipS 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3672  
387 14 Dtool_Ns0bgnPZ 0 6 346 3629 0 14 Dtool_Ns0bgnPZ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  9 threshold 1 3628  
388 14 Dtool_Ns0bH3fh 0 6 347 3629 0 14 Dtool_Ns0bH3fh 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  4 hash 1 3629  
389 14 Dtool_Ns0bwERG 0 6 347 3629 0 14 Dtool_Ns0bwERG 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3672  4 hash 1 3629  9 threshold 1 3628  
390 14 Dtool_Ns0bZWpj 0 4 348 3630 0 14 Dtool_Ns0bZWpj 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  7 hashgen 1 3636  
391 14 Dtool_Ns0bRJlv 0 4 348 3630 0 14 Dtool_Ns0bRJlv 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3672  7 hashgen 1 3636  9 threshold 1 3628  
392 14 Dtool_Ns0biO_P 0 7 349 3671 2347 14 Dtool_Ns0biO_P 0 1 4 this 3 3672  
393 14 Dtool_Ns0bfM9C 0 7 350 3671 2347 14 Dtool_Ns0bfM9C 0 2 4 this 3 3672  5 other 1 3672  
394 14 Dtool_Ns0bf8eW 0 7 351 3671 2347 14 Dtool_Ns0bf8eW 0 2 4 this 3 3672  5 other 1 3672  
395 14 Dtool_Ns0bHdlj 0 7 352 3671 2347 14 Dtool_Ns0bHdlj 0 2 4 this 3 3672  6 scalar 1 3628  
396 14 Dtool_Ns0bY1ZU 0 7 353 3671 2347 14 Dtool_Ns0bY1ZU 0 2 4 this 3 3672  6 scalar 1 3628  
397 14 Dtool_Ns0bGqXQ 0 6 354 3671 0 14 Dtool_Ns0bGqXQ 0 2 4 this 3 3671  5 other 1 3672  
398 14 Dtool_Ns0bGa5j 0 6 355 3671 0 14 Dtool_Ns0bGa5j 0 2 4 this 3 3671  5 other 1 3672  
399 14 Dtool_Ns0bPZfq 0 6 356 3671 0 14 Dtool_Ns0bPZfq 0 2 4 this 3 3671  6 scalar 1 3628  
400 14 Dtool_Ns0bOhTb 0 6 357 3671 0 14 Dtool_Ns0bOhTb 0 2 4 this 3 3671  6 scalar 1 3628  
401 14 Dtool_Ns0bnVEp 0 4 358 3630 0 14 Dtool_Ns0bnVEp 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 other 1 3672  
402 14 Dtool_Ns0bhJZs 0 7 359 3671 2347 14 Dtool_Ns0bhJZs 0 2 4 this 3 3672  8 exponent 1 3628  
403 14 Dtool_Ns0b_lPl 0 6 360 3631 0 14 Dtool_Ns0b_lPl 0 2 4 this 3 3671  8 exponent 1 3628  
404 14 Dtool_Ns0bpn3D 0 7 361 3671 2347 14 Dtool_Ns0bpn3D 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
405 14 Dtool_Ns0bHaYC 0 7 362 3671 2347 14 Dtool_Ns0bHaYC 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
406 14 Dtool_Ns0bvCKa 0 4 363 3630 0 14 Dtool_Ns0bvCKa 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  5 other 1 3672  
407 14 Dtool_Ns0b2ADH 0 6 364 3635 0 14 Dtool_Ns0b2ADH 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  5 other 1 3672  
408 14 Dtool_Ns0bjJ12 0 6 364 3635 0 14 Dtool_Ns0bjJ12 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3672  5 other 1 3672  9 threshold 1 3628  
409 14 Dtool_Ns0b8Oso 0 4 365 3630 0 14 Dtool_Ns0b8Oso 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  3 out 1 3638  
410 14 Dtool_Ns0bRMH8 0 4 366 3630 0 14 Dtool_Ns0bRMH8 0 3 4 this 3 3672  3 out 1 3638  10 class_name 1 3633  
411 14 Dtool_Ns0bi_RW 0 4 367 3630 0 14 Dtool_Ns0bi_RW 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  11 destination 1 3640  
412 14 Dtool_Ns0baJyS 0 4 368 3630 0 14 Dtool_Ns0baJyS 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  6 source 1 3642  
413 14 Dtool_Ns0bqMLT 0 4 369 3630 0 14 Dtool_Ns0bqMLT 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3672  11 destination 1 3640  
414 14 Dtool_Ns0bKcMl 0 4 370 3630 0 14 Dtool_Ns0bKcMl 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3671  6 source 1 3642  
415 14 Dtool_Ns0bdN_h 0 7 371 3645 0 14 Dtool_Ns0bdN_h 0 0 
416 14 Dtool_Ns0bjiry 0 7 373 3674 2420 14 Dtool_Ns0bjiry 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
417 14 Dtool_Ns0bOLqf 0 7 373 3674 2420 14 Dtool_Ns0bOLqf 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3647  1 z 1 3649  
418 14 Dtool_Ns0buakN 0 7 373 3674 2420 14 Dtool_Ns0buakN 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3675  
419 14 Dtool_Ns0b_fFc 0 7 373 3674 2420 14 Dtool_Ns0b_fFc 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
420 14 Dtool_Ns0bpccq 0 7 373 3674 2420 14 Dtool_Ns0bpccq 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3649  1 y 1 3649  1 z 1 3649  
421 14 Dtool_Ns0byavJ 0 6 374 3674 0 14 Dtool_Ns0byavJ 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  4 copy 1 3675  
422 14 Dtool_Ns0b_NPY 0 6 374 3674 0 14 Dtool_Ns0b_NPY 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  10 fill_value 1 3649  
423 14 Dtool_Ns0bD6XL 0 4 375 3630 0 14 Dtool_Ns0bD6XL 0 2 4 this 3 3674  4 size 1 3629  
424 14 Dtool_Ns0btrfB 0 6 378 3675 0 14 Dtool_Ns0btrfB 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
425 14 Dtool_Ns0bExVl 0 6 379 3675 0 14 Dtool_Ns0bExVl 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
426 14 Dtool_Ns0bHxjB 0 6 380 3675 0 14 Dtool_Ns0bHxjB 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
427 14 Dtool_Ns0bBxxd 0 6 381 3675 0 14 Dtool_Ns0bBxxd 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
428 14 Dtool_Ns0bTkEv 0 6 383 3631 0 14 Dtool_Ns0bTkEv 0 1 4 this 3 3675  
429 14 Dtool_Ns0bMeis 0 6 384 3631 0 14 Dtool_Ns0bMeis 0 2 4 this 3 3675  9 attr_name 1 3633  
430 14 Dtool_Ns0bVSVk 0 6 385 3634 0 14 Dtool_Ns0bVSVk 0 3 4 this 3 3674  9 attr_name 1 3633  6 assign 1 3631  
431 14 Dtool_Ns0bKmHn 0 4 386 3630 0 14 Dtool_Ns0bKmHn 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  1 i 1 3634  
432 14 Dtool_Ns0bIH7D 0 6 386 3649 0 14 Dtool_Ns0bIH7D 0 2 4 this 3 3675  1 i 1 3634  
433 14 Dtool_Ns0bUicv 0 4 387 3630 0 14 Dtool_Ns0bUicv 0 3 4 this 3 3674  1 i 1 3634  1 v 1 3649  
434 14 Dtool_Ns0b61Pr 0 6 388 3634 0 14 Dtool_Ns0b61Pr 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
435 14 Dtool_Ns0b7uGy 0 6 389 3635 0 14 Dtool_Ns0b7uGy 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
436 14 Dtool_Ns0bgqfX 0 6 390 3649 0 14 Dtool_Ns0bgqfX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  1 i 1 3634  
437 14 Dtool_Ns0b8t_C 0 6 391 3649 0 14 Dtool_Ns0b8t_C 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
438 14 Dtool_Ns0b8J4H 0 6 392 3649 0 14 Dtool_Ns0b8J4H 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
439 14 Dtool_Ns0b8lwM 0 6 393 3649 0 14 Dtool_Ns0b8lwM 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
440 14 Dtool_Ns0bj_Qe 0 4 394 3630 0 14 Dtool_Ns0bj_Qe 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3674  1 i 1 3634  5 value 1 3649  
441 14 Dtool_Ns0bfZV6 0 4 395 3630 0 14 Dtool_Ns0bfZV6 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 value 1 3649  
442 14 Dtool_Ns0bf9N_ 0 4 396 3630 0 14 Dtool_Ns0bf9N_ 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 value 1 3649  
443 14 Dtool_Ns0beBGE 0 4 397 3630 0 14 Dtool_Ns0beBGE 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 value 1 3649  
444 14 Dtool_Ns0bwlZ5 0 7 398 3646 2125 14 Dtool_Ns0bwlZ5 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
445 14 Dtool_Ns0b1lnV 0 7 399 3646 2125 14 Dtool_Ns0b1lnV 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
446 14 Dtool_Ns0b1Jfa 0 7 400 3646 2125 14 Dtool_Ns0b1Jfa 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
447 14 Dtool_Ns0bLMq8 0 4 401 3630 0 14 Dtool_Ns0bLMq8 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3674  1 i 1 3634  5 value 1 3649  
448 14 Dtool_Ns0b0Qy4 0 4 402 3630 0 14 Dtool_Ns0b0Qy4 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 value 1 3649  
449 14 Dtool_Ns0b00q9 0 4 403 3630 0 14 Dtool_Ns0b00q9 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 value 1 3649  
450 14 Dtool_Ns0b3YjC 0 4 404 3630 0 14 Dtool_Ns0b3YjC 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 value 1 3649  
451 14 Dtool_Ns0bd9D2 0 4 405 3630 0 14 Dtool_Ns0bd9D2 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
452 14 Dtool_Ns0bLxGp 0 6 406 3634 0 14 Dtool_Ns0bLxGp 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
453 14 Dtool_Ns0bxac_ 0 4 407 3630 0 14 Dtool_Ns0bxac_ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  10 fill_value 1 3649  
454 14 Dtool_Ns0bL816 0 4 408 3630 0 14 Dtool_Ns0bL816 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3674  1 x 1 3649  1 y 1 3649  1 z 1 3649  
455 14 Dtool_Ns0b4N6j 0 6 409 3649 0 14 Dtool_Ns0b4N6j 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  5 other 1 3675  
456 14 Dtool_Ns0bGIsN 0 6 410 3649 0 14 Dtool_Ns0bGIsN 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
457 14 Dtool_Ns0b5E4t 0 6 411 3649 0 14 Dtool_Ns0b5E4t 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
458 14 Dtool_Ns0btBSD 0 6 412 3635 0 14 Dtool_Ns0btBSD 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3674  
459 14 Dtool_Ns0ba8hq 0 7 413 3674 2420 14 Dtool_Ns0ba8hq 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  4 onto 1 3675  
460 14 Dtool_Ns0bvmLU 0 7 414 3674 2420 14 Dtool_Ns0bvmLU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  5 other 1 3675  
461 14 Dtool_Ns0bf_c1 0 6 415 3635 0 14 Dtool_Ns0bf_c1 0 2 4 this 3 3675  5 other 1 3675  
462 14 Dtool_Ns0b5E4P 0 6 416 3635 0 14 Dtool_Ns0b5E4P 0 2 4 this 3 3675  5 other 1 3675  
463 14 Dtool_Ns0bCkg_ 0 6 417 3635 0 14 Dtool_Ns0bCkg_ 0 2 4 this 3 3675  5 other 1 3675  
464 14 Dtool_Ns0bwK45 0 7 418 3674 2420 14 Dtool_Ns0bwK45 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
465 14 Dtool_Ns0bAqT1 0 6 419 3634 0 14 Dtool_Ns0bAqT1 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  5 other 1 3675  
466 14 Dtool_Ns0bDVKA 0 6 419 3634 0 14 Dtool_Ns0bDVKA 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3675  5 other 1 3675  9 threshold 1 3649  
467 14 Dtool_Ns0bQ_pi 0 6 420 3629 0 14 Dtool_Ns0bQ_pi 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3675  
468 14 Dtool_Ns0bBwnB 0 6 420 3629 0 14 Dtool_Ns0bBwnB 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  9 threshold 1 3649  
469 14 Dtool_Ns0blrfx 0 6 421 3629 0 14 Dtool_Ns0blrfx 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  4 hash 1 3629  
470 14 Dtool_Ns0bjZW8 0 6 421 3629 0 14 Dtool_Ns0bjZW8 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3675  4 hash 1 3629  9 threshold 1 3649  
471 14 Dtool_Ns0b_lpz 0 4 422 3630 0 14 Dtool_Ns0b_lpz 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  7 hashgen 1 3636  
472 14 Dtool_Ns0bhhvX 0 4 422 3630 0 14 Dtool_Ns0bhhvX 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3675  7 hashgen 1 3636  9 threshold 1 3649  
473 14 Dtool_Ns0bEy_f 0 7 423 3674 2420 14 Dtool_Ns0bEy_f 0 1 4 this 3 3675  
474 14 Dtool_Ns0bZ2dP 0 7 424 3674 2420 14 Dtool_Ns0bZ2dP 0 2 4 this 3 3675  5 other 1 3675  
475 14 Dtool_Ns0bZG_i 0 7 425 3674 2420 14 Dtool_Ns0bZG_i 0 2 4 this 3 3675  5 other 1 3675  
476 14 Dtool_Ns0b6_m2 0 7 426 3674 2420 14 Dtool_Ns0b6_m2 0 2 4 this 3 3675  6 scalar 1 3649  
477 14 Dtool_Ns0b7Wdn 0 7 427 3674 2420 14 Dtool_Ns0b7Wdn 0 2 4 this 3 3675  6 scalar 1 3649  
478 14 Dtool_Ns0bazWw 0 6 428 3674 0 14 Dtool_Ns0bazWw 0 2 4 this 3 3674  5 other 1 3675  
479 14 Dtool_Ns0bbD4D 0 6 429 3674 0 14 Dtool_Ns0bbD4D 0 2 4 this 3 3674  5 other 1 3675  
480 14 Dtool_Ns0bFCn2 0 6 430 3674 0 14 Dtool_Ns0bFCn2 0 2 4 this 3 3674  6 scalar 1 3649  
481 14 Dtool_Ns0bK6bn 0 6 431 3674 0 14 Dtool_Ns0bK6bn 0 2 4 this 3 3674  6 scalar 1 3649  
482 14 Dtool_Ns0bFpUv 0 4 432 3630 0 14 Dtool_Ns0bFpUv 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3675  
483 14 Dtool_Ns0b0OJR 0 7 433 3674 2420 14 Dtool_Ns0b0OJR 0 2 4 this 3 3675  8 exponent 1 3649  
484 14 Dtool_Ns0bxS8t 0 6 434 3631 0 14 Dtool_Ns0bxS8t 0 2 4 this 3 3674  8 exponent 1 3649  
485 14 Dtool_Ns0bN40s 0 7 435 3674 2420 14 Dtool_Ns0bN40s 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  5 other 1 3675  
486 14 Dtool_Ns0bjFUr 0 7 436 3674 2420 14 Dtool_Ns0bjFUr 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  5 other 1 3675  
487 14 Dtool_Ns0bmWqm 0 4 437 3630 0 14 Dtool_Ns0bmWqm 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  5 other 1 3675  
488 14 Dtool_Ns0bgl6W 0 6 438 3635 0 14 Dtool_Ns0bgl6W 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  5 other 1 3675  
489 14 Dtool_Ns0b6Cbn 0 6 438 3635 0 14 Dtool_Ns0b6Cbn 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3675  5 other 1 3675  9 threshold 1 3649  
490 14 Dtool_Ns0bhBt4 0 4 439 3630 0 14 Dtool_Ns0bhBt4 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  3 out 1 3638  
491 14 Dtool_Ns0brCGM 0 4 440 3630 0 14 Dtool_Ns0brCGM 0 3 4 this 3 3675  3 out 1 3638  10 class_name 1 3633  
492 14 Dtool_Ns0b8TRm 0 4 441 3630 0 14 Dtool_Ns0b8TRm 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  11 destination 1 3640  
493 14 Dtool_Ns0b4kyi 0 4 442 3630 0 14 Dtool_Ns0b4kyi 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  6 source 1 3642  
494 14 Dtool_Ns0bPKKj 0 4 443 3630 0 14 Dtool_Ns0bPKKj 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3675  11 destination 1 3640  
495 14 Dtool_Ns0bkPM1 0 4 444 3630 0 14 Dtool_Ns0bkPM1 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3674  6 source 1 3642  
496 14 Dtool_Ns0byA_x 0 7 445 3645 0 14 Dtool_Ns0byA_x 0 0 
497 14 Dtool_Ns0bIig7 0 7 447 3677 2493 14 Dtool_Ns0bIig7 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
498 14 Dtool_Ns0bWrEZ 0 7 447 3677 2493 14 Dtool_Ns0bWrEZ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3651  1 z 1 3634  
499 14 Dtool_Ns0bWXK_ 0 7 447 3677 2493 14 Dtool_Ns0bWXK_ 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3678  
500 14 Dtool_Ns0bO8Dl 0 7 447 3677 2493 14 Dtool_Ns0bO8Dl 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
501 14 Dtool_Ns0bblMW 0 7 447 3677 2493 14 Dtool_Ns0bblMW 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3634  1 y 1 3634  1 z 1 3634  
502 14 Dtool_Ns0bnZgK 0 6 448 3677 0 14 Dtool_Ns0bnZgK 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  4 copy 1 3678  
503 14 Dtool_Ns0bMjYw 0 6 448 3677 0 14 Dtool_Ns0bMjYw 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  10 fill_value 1 3634  
504 14 Dtool_Ns0bQjZj 0 4 449 3630 0 14 Dtool_Ns0bQjZj 0 2 4 this 3 3677  4 size 1 3629  
505 14 Dtool_Ns0b1EhZ 0 6 452 3678 0 14 Dtool_Ns0b1EhZ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
506 14 Dtool_Ns0bv3X9 0 6 453 3678 0 14 Dtool_Ns0bv3X9 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
507 14 Dtool_Ns0bs3lZ 0 6 454 3678 0 14 Dtool_Ns0bs3lZ 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
508 14 Dtool_Ns0bS2z1 0 6 455 3678 0 14 Dtool_Ns0bS2z1 256 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
509 14 Dtool_Ns0bcZGH 0 6 457 3631 0 14 Dtool_Ns0bcZGH 0 1 4 this 3 3678  
510 14 Dtool_Ns0blBkE 0 6 458 3631 0 14 Dtool_Ns0blBkE 0 2 4 this 3 3678  9 attr_name 1 3633  
511 14 Dtool_Ns0bRFX8 0 6 459 3634 0 14 Dtool_Ns0bRFX8 0 3 4 this 3 3677  9 attr_name 1 3633  6 assign 1 3631  
512 14 Dtool_Ns0bwWI_ 0 4 460 3630 0 14 Dtool_Ns0bwWI_ 224 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  1 i 1 3634  
513 14 Dtool_Ns0bio8b 0 6 460 3634 0 14 Dtool_Ns0bio8b 0 2 4 this 3 3678  1 i 1 3634  
514 14 Dtool_Ns0bEgmP 0 4 461 3630 0 14 Dtool_Ns0bEgmP 0 3 4 this 3 3677  1 i 1 3634  1 v 1 3634  
515 14 Dtool_Ns0bH6QD 0 6 462 3634 0 14 Dtool_Ns0bH6QD 271 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::size
//       Access: Public, Static
//  Description: Returns 3: the number of components of a LVecBase3.
//////////////////////////////////////////////////////////////////// 0 
516 14 Dtool_Ns0bgfHK 0 6 463 3635 0 14 Dtool_Ns0bgfHK 308 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::is_nan
//       Access: Public
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
517 14 Dtool_Ns0beagv 0 6 464 3634 0 14 Dtool_Ns0beagv 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  1 i 1 3634  
518 14 Dtool_Ns0bzKAb 0 6 465 3634 0 14 Dtool_Ns0bzKAb 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
519 14 Dtool_Ns0bzm4f 0 6 466 3634 0 14 Dtool_Ns0bzm4f 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
520 14 Dtool_Ns0bzCzk 0 6 467 3634 0 14 Dtool_Ns0bzCzk 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
521 14 Dtool_Ns0b38y0 0 4 468 3630 0 14 Dtool_Ns0b38y0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3677  1 i 1 3634  5 value 1 3634  
522 14 Dtool_Ns0bFVbS 0 4 469 3630 0 14 Dtool_Ns0bFVbS 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 value 1 3634  
523 14 Dtool_Ns0bFxTX 0 4 470 3630 0 14 Dtool_Ns0bFxTX 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 value 1 3634  
524 14 Dtool_Ns0bFdMc 0 4 471 3630 0 14 Dtool_Ns0bFdMc 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 value 1 3634  
525 14 Dtool_Ns0brGaR 0 7 472 3650 2188 14 Dtool_Ns0brGaR 317 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
526 14 Dtool_Ns0bpGot 0 7 473 3650 2188 14 Dtool_Ns0bpGot 322 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
527 14 Dtool_Ns0bpigy 0 7 474 3650 2188 14 Dtool_Ns0bpigy 316 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
528 14 Dtool_Ns0b3S0c 0 4 475 3630 0 14 Dtool_Ns0b3S0c 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_to_cell
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3677  1 i 1 3634  5 value 1 3634  
529 14 Dtool_Ns0b8v4Q 0 4 476 3630 0 14 Dtool_Ns0b8v4Q 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_x
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 value 1 3634  
530 14 Dtool_Ns0b8LxV 0 4 477 3630 0 14 Dtool_Ns0b8LxV 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_y
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 value 1 3634  
531 14 Dtool_Ns0b8Xpa 0 4 478 3630 0 14 Dtool_Ns0b8Xpa 212 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_z
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 value 1 3634  
532 14 Dtool_Ns0bkQEO 0 4 479 3630 0 14 Dtool_Ns0bkQEO 399 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
533 14 Dtool_Ns0bmaHB 0 6 480 3634 0 14 Dtool_Ns0bmaHB 278 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, three.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
534 14 Dtool_Ns0b1ZfK 0 4 481 3630 0 14 Dtool_Ns0b1ZfK 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  10 fill_value 1 3634  
535 14 Dtool_Ns0bEfm8 0 4 482 3630 0 14 Dtool_Ns0bEfm8 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 this 3 3677  1 x 1 3634  1 y 1 3634  1 z 1 3634  
536 14 Dtool_Ns0bVa__ 0 6 483 3634 0 14 Dtool_Ns0bVa__ 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  5 other 1 3678  
537 14 Dtool_Ns0b7ltl 0 6 484 3634 0 14 Dtool_Ns0b7ltl 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
538 14 Dtool_Ns0bUHkg 0 7 485 3677 2493 14 Dtool_Ns0bUHkg 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  5 other 1 3678  
539 14 Dtool_Ns0blNN2 0 6 486 3635 0 14 Dtool_Ns0blNN2 0 2 4 this 3 3678  5 other 1 3678  
540 14 Dtool_Ns0bmU6_ 0 6 487 3635 0 14 Dtool_Ns0bmU6_ 0 2 4 this 3 3678  5 other 1 3678  
541 14 Dtool_Ns0bazju 0 6 488 3635 0 14 Dtool_Ns0bazju 0 2 4 this 3 3678  5 other 1 3678  
542 14 Dtool_Ns0bLd6R 0 7 489 3677 2493 14 Dtool_Ns0bLd6R 1030 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_standardized_hpr
//       Access: Published
//  Description: Try to un-spin the hpr to a standard form.  Like
//               all standards, someone decides between many
//               arbitrary possible standards.  This function assumes
//               that 0 and 360 are the same, as is 720 and
//               -360.  Also 180 and -180 are the same.  Another
//               example is -90 and 270.
//               Each element will be in the range -180.0 to 179.99999.
//               The original usage of this function is for human
//               readable output.
//
//               It doesn't work so well for asserting that foo_hpr 
//               is roughly equal to bar_hpr.  Try using
//               LQuaternionf::is_same_direction() for that.
//     See Also: get_standardized_rotation,
//               LQuaternion::is_same_direction
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
543 14 Dtool_Ns0bRCE2 0 6 490 3634 0 14 Dtool_Ns0bRCE2 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  5 other 1 3678  
544 14 Dtool_Ns0bH9r6 0 6 491 3629 0 14 Dtool_Ns0bH9r6 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3678  
545 14 Dtool_Ns0bRKgJ 0 6 492 3629 0 14 Dtool_Ns0bRKgJ 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  4 hash 1 3629  
546 14 Dtool_Ns0bDDqL 0 4 493 3630 0 14 Dtool_Ns0bDDqL 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  7 hashgen 1 3636  
547 14 Dtool_Ns0buJA4 0 7 494 3677 2493 14 Dtool_Ns0buJA4 0 1 4 this 3 3678  
548 14 Dtool_Ns0bjFOQ 0 7 495 3677 2493 14 Dtool_Ns0bjFOQ 0 2 4 this 3 3678  5 other 1 3678  
549 14 Dtool_Ns0bjVwj 0 7 496 3677 2493 14 Dtool_Ns0bjVwj 0 2 4 this 3 3678  5 other 1 3678  
550 14 Dtool_Ns0bSExH 0 7 497 3677 2493 14 Dtool_Ns0bSExH 0 2 4 this 3 3678  6 scalar 1 3634  
551 14 Dtool_Ns0bS8m4 0 7 498 3677 2493 14 Dtool_Ns0bS8m4 0 2 4 this 3 3678  6 scalar 1 3634  
552 14 Dtool_Ns0bSqZg 0 6 499 3677 0 14 Dtool_Ns0bSqZg 0 2 4 this 3 3677  5 other 1 3678  
553 14 Dtool_Ns0bSa6z 0 6 500 3677 0 14 Dtool_Ns0bSa6z 0 2 4 this 3 3677  5 other 1 3678  
554 14 Dtool_Ns0bVctS 0 6 501 3677 0 14 Dtool_Ns0bVctS 0 2 4 this 3 3677  6 scalar 1 3634  
555 14 Dtool_Ns0bW0hD 0 6 502 3677 0 14 Dtool_Ns0bW0hD 0 2 4 this 3 3677  6 scalar 1 3634  
556 14 Dtool_Ns0b0ivf 0 4 503 3630 0 14 Dtool_Ns0b0ivf 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 other 1 3678  
557 14 Dtool_Ns0bsanm 0 7 504 3677 2493 14 Dtool_Ns0bsanm 0 2 4 this 3 3678  8 exponent 1 3634  
558 14 Dtool_Ns0bPrAm 0 6 505 3631 0 14 Dtool_Ns0bPrAm 0 2 4 this 3 3677  8 exponent 1 3634  
559 14 Dtool_Ns0bjjem 0 7 506 3677 2493 14 Dtool_Ns0bjjem 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmax
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  5 other 1 3678  
560 14 Dtool_Ns0b9W_k 0 7 507 3677 2493 14 Dtool_Ns0b9W_k 211 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::fmin
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  5 other 1 3678  
561 14 Dtool_Ns0biAcn 0 4 508 3630 0 14 Dtool_Ns0biAcn 241 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::cross product (with assignment)
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  5 other 1 3678  
562 14 Dtool_Ns0baoTv 0 6 509 3635 0 14 Dtool_Ns0baoTv 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  5 other 1 3678  
563 14 Dtool_Ns0byuGe 0 6 509 3635 0 14 Dtool_Ns0byuGe 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3678  5 other 1 3678  9 threshold 1 3634  
564 14 Dtool_Ns0bY6tQ 0 4 510 3630 0 14 Dtool_Ns0bY6tQ 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  3 out 1 3638  
565 14 Dtool_Ns0b_9Ik 0 4 511 3630 0 14 Dtool_Ns0b_9Ik 0 3 4 this 3 3678  3 out 1 3638  10 class_name 1 3633  
566 14 Dtool_Ns0bmYS_ 0 4 512 3630 0 14 Dtool_Ns0bmYS_ 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  11 destination 1 3640  
567 14 Dtool_Ns0bmL06 0 4 513 3630 0 14 Dtool_Ns0bmL06 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  6 source 1 3642  
568 14 Dtool_Ns0bT9M7 0 4 514 3630 0 14 Dtool_Ns0bT9M7 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3678  11 destination 1 3640  
569 14 Dtool_Ns0bStNN 0 4 515 3630 0 14 Dtool_Ns0bStNN 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase3::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3677  6 source 1 3642  
570 14 Dtool_Ns0bn9_J 0 7 516 3645 0 14 Dtool_Ns0bn9_J 0 0 
571 14 Dtool_Ns0bhACr 0 7 523 3680 2591 14 Dtool_Ns0bhACr 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
572 14 Dtool_Ns0bMjgA 0 7 523 3680 2591 14 Dtool_Ns0bMjgA 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3626  1 z 1 3628  
573 14 Dtool_Ns0bZ8LN 0 7 523 3680 2591 14 Dtool_Ns0bZ8LN 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
574 14 Dtool_Ns0b6OMJ 0 7 523 3680 2591 14 Dtool_Ns0b6OMJ 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
575 14 Dtool_Ns0bhp6I 0 7 523 3680 2591 14 Dtool_Ns0bhp6I 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3628  1 y 1 3628  1 z 1 3628  
576 14 Dtool_Ns0bqZGE 0 6 524 3680 0 14 Dtool_Ns0bqZGE 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  4 copy 1 3672  
577 14 Dtool_Ns0bR_QE 0 6 524 3680 0 14 Dtool_Ns0bR_QE 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3680  10 fill_value 1 3628  
578 14 Dtool_Ns0bvXBf 0 6 525 3631 0 14 Dtool_Ns0bvXBf 0 2 4 this 3 3681  9 attr_name 1 3633  
579 14 Dtool_Ns0bVouW 0 6 526 3634 0 14 Dtool_Ns0bVouW 0 3 4 this 3 3680  9 attr_name 1 3633  6 assign 1 3631  
580 14 Dtool_Ns0bMixn 0 6 527 3681 0 14 Dtool_Ns0bMixn 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
581 14 Dtool_Ns0byo58 0 6 528 3681 0 14 Dtool_Ns0byo58 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
582 14 Dtool_Ns0bxExB 0 6 529 3681 0 14 Dtool_Ns0bxExB 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
583 14 Dtool_Ns0bxgqG 0 6 530 3681 0 14 Dtool_Ns0bxgqG 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
584 14 Dtool_Ns0b8jfB 0 7 531 3653 2257 14 Dtool_Ns0b8jfB 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3681  
585 14 Dtool_Ns0b8PYG 0 7 532 3653 2257 14 Dtool_Ns0b8PYG 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3681  
586 14 Dtool_Ns0bE_hG 0 7 533 3653 2257 14 Dtool_Ns0bE_hG 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3681  
587 14 Dtool_Ns0bWstI 0 7 534 3680 2591 14 Dtool_Ns0bWstI 0 1 4 this 3 3681  
588 14 Dtool_Ns0bJrR4 0 7 535 3671 2347 14 Dtool_Ns0bJrR4 0 2 4 this 3 3681  5 other 1 3672  
589 14 Dtool_Ns0bciQH 0 7 535 3680 2591 14 Dtool_Ns0bciQH 0 2 4 this 3 3681  5 other 1 3681  
590 14 Dtool_Ns0bpo44 0 7 536 3671 2347 14 Dtool_Ns0bpo44 0 2 4 this 3 3681  5 other 1 3672  
591 14 Dtool_Ns0b8f3H 0 7 536 3680 2591 14 Dtool_Ns0b8f3H 0 2 4 this 3 3681  5 other 1 3681  
592 14 Dtool_Ns0bXSXn 0 7 537 3680 2591 14 Dtool_Ns0bXSXn 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  5 other 1 3672  
593 14 Dtool_Ns0bzCBx 0 7 538 3680 2591 14 Dtool_Ns0bzCBx 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  4 onto 1 3672  
594 14 Dtool_Ns0bi1_1 0 6 539 3628 0 14 Dtool_Ns0bi1_1 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  5 other 1 3681  
595 14 Dtool_Ns0bSe7m 0 6 540 3628 0 14 Dtool_Ns0bSe7m 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  5 other 1 3681  
596 14 Dtool_Ns0bqxe0 0 6 541 3628 0 14 Dtool_Ns0bqxe0 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3681  5 other 1 3681  3 ref 1 3681  
597 14 Dtool_Ns0bDYOx 0 6 542 3628 0 14 Dtool_Ns0bDYOx 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3681  5 other 1 3681  3 ref 1 3681  
598 14 Dtool_Ns0b_dvn 0 6 543 3628 0 14 Dtool_Ns0b_dvn 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  5 other 1 3681  
599 14 Dtool_Ns0bzM2t 0 6 544 3628 0 14 Dtool_Ns0bzM2t 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3681  5 other 1 3681  
600 14 Dtool_Ns0bcvTb 0 7 545 3680 2591 14 Dtool_Ns0bcvTb 0 2 4 this 3 3681  6 scalar 1 3628  
601 14 Dtool_Ns0bsH0c 0 7 546 3680 2591 14 Dtool_Ns0bsH0c 0 2 4 this 3 3681  6 scalar 1 3628  
602 14 Dtool_Ns0blOZo 0 7 547 3680 2591 14 Dtool_Ns0blOZo 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
603 14 Dtool_Ns0bz_MF 0 7 547 3680 2591 14 Dtool_Ns0bz_MF 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
604 14 Dtool_Ns0b3sup 0 7 548 3680 2591 14 Dtool_Ns0b3sup 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
605 14 Dtool_Ns0bYM3h 0 7 548 3680 2591 14 Dtool_Ns0bYM3h 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
606 14 Dtool_Ns0bn621 0 7 549 3680 2591 14 Dtool_Ns0bn621 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
607 14 Dtool_Ns0boQbv 0 7 549 3680 2591 14 Dtool_Ns0boQbv 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
608 14 Dtool_Ns0b5s4e 0 7 550 3680 2591 14 Dtool_Ns0b5s4e 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
609 14 Dtool_Ns0bjBqg 0 7 550 3680 2591 14 Dtool_Ns0bjBqg 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
610 14 Dtool_Ns0bvT2J 0 7 551 3680 2591 14 Dtool_Ns0bvT2J 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
611 14 Dtool_Ns0b1_pL 0 7 551 3680 2591 14 Dtool_Ns0b1_pL 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
612 14 Dtool_Ns0bxPd_ 0 7 552 3680 2591 14 Dtool_Ns0bxPd_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
613 14 Dtool_Ns0bUzPA 0 7 552 3680 2591 14 Dtool_Ns0bUzPA 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
614 14 Dtool_Ns0bhSqR 0 7 553 3680 2591 14 Dtool_Ns0bhSqR 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3628  3 fwd 1 3628  2 up 1 3628  2 cs 1 3584  
615 14 Dtool_Ns0bUW9c 0 7 553 3680 2591 14 Dtool_Ns0bUW9c 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 3 5 right 1 3628  3 fwd 1 3628  2 up 1 3628  
616 14 Dtool_Ns0bfg_v 0 4 554 3630 0 14 Dtool_Ns0bfg_v 0 3 4 this 3 3681  3 out 1 3638  10 class_name 1 3633  
617 14 Dtool_Ns0bg4QZ 0 7 555 3645 0 14 Dtool_Ns0bg4QZ 0 0 
618 14 Dtool_Ns0bDyhn 0 7 558 3683 2625 14 Dtool_Ns0bDyhn 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
619 14 Dtool_Ns0b_LFS 0 7 558 3683 2625 14 Dtool_Ns0b_LFS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3647  1 z 1 3649  
620 14 Dtool_Ns0bvfOH 0 7 558 3683 2625 14 Dtool_Ns0bvfOH 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3675  
621 14 Dtool_Ns0bvhGS 0 7 558 3683 2625 14 Dtool_Ns0bvhGS 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
622 14 Dtool_Ns0b_Wm1 0 7 558 3683 2625 14 Dtool_Ns0b_Wm1 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3649  1 y 1 3649  1 z 1 3649  
623 14 Dtool_Ns0bzYfy 0 6 559 3683 0 14 Dtool_Ns0bzYfy 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3683  4 copy 1 3675  
624 14 Dtool_Ns0bpe8O 0 6 559 3683 0 14 Dtool_Ns0bpe8O 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3683  10 fill_value 1 3649  
625 14 Dtool_Ns0bGUhb 0 6 560 3631 0 14 Dtool_Ns0bGUhb 0 2 4 this 3 3684  9 attr_name 1 3633  
626 14 Dtool_Ns0bMrOT 0 6 561 3634 0 14 Dtool_Ns0bMrOT 0 3 4 this 3 3683  9 attr_name 1 3633  6 assign 1 3631  
627 14 Dtool_Ns0b3lRk 0 6 562 3684 0 14 Dtool_Ns0b3lRk 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
628 14 Dtool_Ns0bp3Z5 0 6 563 3684 0 14 Dtool_Ns0bp3Z5 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
629 14 Dtool_Ns0bpbR_ 0 6 564 3684 0 14 Dtool_Ns0bpbR_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
630 14 Dtool_Ns0bo_KD 0 6 565 3684 0 14 Dtool_Ns0bo_KD 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
631 14 Dtool_Ns0bUj_9 0 7 566 3656 2275 14 Dtool_Ns0bUj_9 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3684  
632 14 Dtool_Ns0bVP4C 0 7 567 3656 2275 14 Dtool_Ns0bVP4C 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3684  
633 14 Dtool_Ns0bt_BD 0 7 568 3656 2275 14 Dtool_Ns0bt_BD 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3684  
634 14 Dtool_Ns0bPtNF 0 7 569 3683 2625 14 Dtool_Ns0bPtNF 0 1 4 this 3 3684  
635 14 Dtool_Ns0bhqqm 0 7 570 3674 2420 14 Dtool_Ns0bhqqm 0 2 4 this 3 3684  5 other 1 3675  
636 14 Dtool_Ns0bzxUB 0 7 570 3683 2625 14 Dtool_Ns0bzxUB 0 2 4 this 3 3684  5 other 1 3684  
637 14 Dtool_Ns0bBpRn 0 7 571 3674 2420 14 Dtool_Ns0bBpRn 0 2 4 this 3 3684  5 other 1 3675  
638 14 Dtool_Ns0bTs7B 0 7 571 3683 2625 14 Dtool_Ns0bTs7B 0 2 4 this 3 3684  5 other 1 3684  
639 14 Dtool_Ns0bPzz8 0 7 572 3683 2625 14 Dtool_Ns0bPzz8 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  5 other 1 3675  
640 14 Dtool_Ns0biGg1 0 7 573 3683 2625 14 Dtool_Ns0biGg1 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  4 onto 1 3675  
641 14 Dtool_Ns0b_6Zy 0 6 574 3649 0 14 Dtool_Ns0b_6Zy 385 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_rad
//       Access: Published
//  Description: Returns the unsigned angle between this vector and
//               the other one, expressed in radians.  Both vectors
//               should be initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  5 other 1 3684  
642 14 Dtool_Ns0blnWj 0 6 575 3649 0 14 Dtool_Ns0blnWj 376 ////////////////////////////////////////////////////////////////////
//     Function: LVector::angle_deg
//       Access: Published
//  Description: Returns the angle between this vector and the other
//               one, expressed in degrees.  Both vectors should be
//               initially normalized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  5 other 1 3684  
643 14 Dtool_Ns0bI_w4 0 6 576 3649 0 14 Dtool_Ns0bI_w4 548 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_rad
//       Access: Published
//  Description: returns the signed angle between two vectors.
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3684  5 other 1 3684  3 ref 1 3684  
644 14 Dtool_Ns0blWg1 0 6 577 3649 0 14 Dtool_Ns0blWg1 549 ////////////////////////////////////////////////////////////////////
//     Function: LVector::signed_angle_deg
//       Access: Published
//  Description: Returns the signed angle between two vectors. 
//               The angle is positive if the rotation from this
//               vector to other is clockwise when looking in the
//               direction of the ref vector.
//
//               Vectors (except the ref vector) should be initially
//               normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3684  5 other 1 3684  3 ref 1 3684  
645 14 Dtool_Ns0bl1PE 0 6 578 3649 0 14 Dtool_Ns0bl1PE 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_rad
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  5 other 1 3684  
646 14 Dtool_Ns0bZkXK 0 6 579 3649 0 14 Dtool_Ns0bZkXK 266 ////////////////////////////////////////////////////////////////////
//     Function: LVector::relative_angle_deg
//       Access: Published
//  Description: This method is deprecated.  Do not use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3684  5 other 1 3684  
647 14 Dtool_Ns0b_54j 0 7 580 3683 2625 14 Dtool_Ns0b_54j 0 2 4 this 3 3684  6 scalar 1 3649  
648 14 Dtool_Ns0buQal 0 7 581 3683 2625 14 Dtool_Ns0buQal 0 2 4 this 3 3684  6 scalar 1 3649  
649 14 Dtool_Ns0b8N5k 0 7 582 3683 2625 14 Dtool_Ns0b8N5k 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
650 14 Dtool_Ns0bI8sB 0 7 582 3683 2625 14 Dtool_Ns0bI8sB 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
651 14 Dtool_Ns0bQtOm 0 7 583 3683 2625 14 Dtool_Ns0bQtOm 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
652 14 Dtool_Ns0bxMXe 0 7 583 3683 2625 14 Dtool_Ns0bxMXe 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
653 14 Dtool_Ns0b8FXy 0 7 584 3683 2625 14 Dtool_Ns0b8FXy 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
654 14 Dtool_Ns0bPT7r 0 7 584 3683 2625 14 Dtool_Ns0bPT7r 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
655 14 Dtool_Ns0bgtYb 0 7 585 3683 2625 14 Dtool_Ns0bgtYb 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
656 14 Dtool_Ns0bKBKd 0 7 585 3683 2625 14 Dtool_Ns0bKBKd 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
657 14 Dtool_Ns0b2UWG 0 7 586 3683 2625 14 Dtool_Ns0b2UWG 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
658 14 Dtool_Ns0bcxJI 0 7 586 3683 2625 14 Dtool_Ns0bcxJI 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
659 14 Dtool_Ns0bWP96 0 7 587 3683 2625 14 Dtool_Ns0bWP96 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
660 14 Dtool_Ns0bMyv8 0 7 587 3683 2625 14 Dtool_Ns0bMyv8 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
661 14 Dtool_Ns0buPAa 0 7 588 3683 2625 14 Dtool_Ns0buPAa 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3649  3 fwd 1 3649  2 up 1 3649  2 cs 1 3584  
662 14 Dtool_Ns0bnVMh 0 7 588 3683 2625 14 Dtool_Ns0bnVMh 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 3 5 right 1 3649  3 fwd 1 3649  2 up 1 3649  
663 14 Dtool_Ns0b2jes 0 4 589 3630 0 14 Dtool_Ns0b2jes 0 3 4 this 3 3684  3 out 1 3638  10 class_name 1 3633  
664 14 Dtool_Ns0bH5wV 0 7 590 3645 0 14 Dtool_Ns0bH5wV 0 0 
665 14 Dtool_Ns0b30Tw 0 7 593 3686 2652 14 Dtool_Ns0b30Tw 228 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
666 14 Dtool_Ns0bEcgh 0 7 593 3686 2652 14 Dtool_Ns0bEcgh 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3651  1 z 1 3634  
667 14 Dtool_Ns0bCHGW 0 7 593 3686 2652 14 Dtool_Ns0bCHGW 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3678  
668 14 Dtool_Ns0byYJ6 0 7 593 3686 2652 14 Dtool_Ns0byYJ6 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
669 14 Dtool_Ns0bd32R 0 7 593 3686 2652 14 Dtool_Ns0bd32R 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3634  1 y 1 3634  1 z 1 3634  
670 14 Dtool_Ns0bW5he 0 6 594 3686 0 14 Dtool_Ns0bW5he 233 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3686  4 copy 1 3678  
671 14 Dtool_Ns0b5_uf 0 6 594 3686 0 14 Dtool_Ns0b5_uf 227 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::Copy Fill Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3686  10 fill_value 1 3634  
672 14 Dtool_Ns0boWRE 0 6 595 3631 0 14 Dtool_Ns0boWRE 0 2 4 this 3 3687  9 attr_name 1 3633  
673 14 Dtool_Ns0bvo_7 0 6 596 3634 0 14 Dtool_Ns0bvo_7 0 3 4 this 3 3686  9 attr_name 1 3633  6 assign 1 3631  
674 14 Dtool_Ns0bRjBN 0 6 597 3687 0 14 Dtool_Ns0bRjBN 261 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
675 14 Dtool_Ns0bPoJi 0 6 598 3687 0 14 Dtool_Ns0bPoJi 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
676 14 Dtool_Ns0bPEBn 0 6 599 3687 0 14 Dtool_Ns0bPEBn 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
677 14 Dtool_Ns0bPg6r 0 6 600 3687 0 14 Dtool_Ns0bPg6r 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
678 14 Dtool_Ns0b6kvm 0 7 601 3659 2290 14 Dtool_Ns0b6kvm 316 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3687  
679 14 Dtool_Ns0b6Ior 0 7 602 3659 2290 14 Dtool_Ns0b6Ior 321 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3687  
680 14 Dtool_Ns0bC4xr 0 7 603 3659 2290 14 Dtool_Ns0bC4xr 315 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3687  
681 14 Dtool_Ns0bQv9t 0 7 604 3686 2652 14 Dtool_Ns0bQv9t 0 1 4 this 3 3687  
682 14 Dtool_Ns0bKErS 0 7 605 3677 2493 14 Dtool_Ns0bKErS 0 2 4 this 3 3687  5 other 1 3678  
683 14 Dtool_Ns0bSyLw 0 7 605 3686 2652 14 Dtool_Ns0bSyLw 0 2 4 this 3 3687  5 other 1 3687  
684 14 Dtool_Ns0bqHST 0 7 606 3677 2493 14 Dtool_Ns0bqHST 0 2 4 this 3 3687  5 other 1 3678  
685 14 Dtool_Ns0by1ww 0 7 606 3686 2652 14 Dtool_Ns0by1ww 0 2 4 this 3 3687  5 other 1 3687  
686 14 Dtool_Ns0bTBMH 0 7 607 3686 2652 14 Dtool_Ns0bTBMH 214 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::cross
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3687  5 other 1 3678  
687 14 Dtool_Ns0b8QaY 0 7 608 3686 2652 14 Dtool_Ns0b8QaY 0 2 4 this 3 3687  6 scalar 1 3634  
688 14 Dtool_Ns0bMI8Z 0 7 609 3686 2652 14 Dtool_Ns0bMI8Z 0 2 4 this 3 3687  6 scalar 1 3634  
689 14 Dtool_Ns0bePpN 0 7 610 3686 2652 14 Dtool_Ns0bePpN 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
690 14 Dtool_Ns0bp_cq 0 7 610 3686 2652 14 Dtool_Ns0bp_cq 291 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::up
//       Access: Published, Static
//  Description: Returns the up vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
691 14 Dtool_Ns0byr_O 0 7 611 3686 2652 14 Dtool_Ns0byr_O 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
692 14 Dtool_Ns0bfNHH 0 7 611 3686 2652 14 Dtool_Ns0bfNHH 297 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::right
//       Access: Published, Static
//  Description: Returns the right vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
693 14 Dtool_Ns0bi7Gb 0 7 612 3686 2652 14 Dtool_Ns0bi7Gb 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
694 14 Dtool_Ns0btRrU 0 7 612 3686 2652 14 Dtool_Ns0btRrU 301 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::forward
//       Access: Published, Static
//  Description: Returns the forward vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
695 14 Dtool_Ns0bCjIE 0 7 613 3686 2652 14 Dtool_Ns0bCjIE 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
696 14 Dtool_Ns0bkG6F 0 7 613 3686 2652 14 Dtool_Ns0bkG6F 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::down
//       Access: Published, Static
//  Description: Returns the down vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
697 14 Dtool_Ns0bVTGv 0 7 614 3686 2652 14 Dtool_Ns0bVTGv 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
698 14 Dtool_Ns0bz_5w 0 7 614 3686 2652 14 Dtool_Ns0bz_5w 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::left
//       Access: Published, Static
//  Description: Returns the left vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
699 14 Dtool_Ns0b0Otj 0 7 615 3686 2652 14 Dtool_Ns0b0Otj 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
700 14 Dtool_Ns0bqzfl 0 7 615 3686 2652 14 Dtool_Ns0bqzfl 295 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::back
//       Access: Published, Static
//  Description: Returns the back vector for the given coordinate
//               system.
//////////////////////////////////////////////////////////////////// 0 
701 14 Dtool_Ns0b9XC0 0 7 616 3686 2652 14 Dtool_Ns0b9XC0 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 4 5 right 1 3634  3 fwd 1 3634  2 up 1 3634  2 cs 1 3584  
702 14 Dtool_Ns0bS9Qt 0 7 616 3686 2652 14 Dtool_Ns0bS9Qt 453 ////////////////////////////////////////////////////////////////////
//     Function: LVector3::rfu
//       Access: Published, Static
//  Description: Returns a vector that is described by its right,
//               forward, and up components, in whatever way the
//               coordinate system represents that vector.
////////////////////////////////////////////////////////////////////
//INLINE_LINMATH FLOATNAME(LVector3) &FLOATNAME(LVector3):: 3 5 right 1 3634  3 fwd 1 3634  2 up 1 3634  
703 14 Dtool_Ns0bQhOV 0 4 617 3630 0 14 Dtool_Ns0bQhOV 0 3 4 this 3 3687  3 out 1 3638  10 class_name 1 3633  
704 14 Dtool_Ns0bm_g_ 0 7 618 3645 0 14 Dtool_Ns0bm_g_ 0 0 
705 14 Dtool_Ns0bz3Qe 0 7 621 3689 2675 14 Dtool_Ns0bz3Qe 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
706 14 Dtool_Ns0bL4E1 0 7 621 3689 2675 14 Dtool_Ns0bL4E1 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3626  1 z 1 3628  
707 14 Dtool_Ns0bb_6E 0 7 621 3689 2675 14 Dtool_Ns0bb_6E 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3672  
708 14 Dtool_Ns0bCO2W 0 7 621 3689 2675 14 Dtool_Ns0bCO2W 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
709 14 Dtool_Ns0bMxu6 0 7 621 3689 2675 14 Dtool_Ns0bMxu6 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3628  1 y 1 3628  1 z 1 3628  
710 14 Dtool_Ns0bJ6xP 0 6 622 3689 0 14 Dtool_Ns0bJ6xP 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  4 copy 1 3672  
711 14 Dtool_Ns0bqkxL 0 6 622 3689 0 14 Dtool_Ns0bqkxL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3689  10 fill_value 1 3628  
712 14 Dtool_Ns0bPEjO 0 6 623 3631 0 14 Dtool_Ns0bPEjO 0 2 4 this 3 3690  9 attr_name 1 3633  
713 14 Dtool_Ns0bBBQ2 0 6 624 3634 0 14 Dtool_Ns0bBBQ2 0 3 4 this 3 3689  9 attr_name 1 3633  6 assign 1 3631  
714 14 Dtool_Ns0bqu74 0 6 625 3690 0 14 Dtool_Ns0bqu74 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
715 14 Dtool_Ns0bCPkF 0 6 626 3690 0 14 Dtool_Ns0bCPkF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
716 14 Dtool_Ns0baeuF 0 6 627 3690 0 14 Dtool_Ns0baeuF 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
717 14 Dtool_Ns0bSp3F 0 6 628 3690 0 14 Dtool_Ns0bSp3F 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
718 14 Dtool_Ns0bxis3 0 7 629 3662 2306 14 Dtool_Ns0bxis3 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3690  
719 14 Dtool_Ns0bpT23 0 7 630 3662 2306 14 Dtool_Ns0bpT23 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3690  
720 14 Dtool_Ns0bLH2n 0 7 631 3662 2306 14 Dtool_Ns0bLH2n 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3690  
721 14 Dtool_Ns0b0M7V 0 7 632 3689 2675 14 Dtool_Ns0b0M7V 0 1 4 this 3 3690  
722 14 Dtool_Ns0b_4Xx 0 7 633 3671 2347 14 Dtool_Ns0b_4Xx 0 2 4 this 3 3690  5 other 1 3672  
723 14 Dtool_Ns0bg12J 0 7 633 3689 2675 14 Dtool_Ns0bg12J 0 2 4 this 3 3690  5 other 1 3681  
724 14 Dtool_Ns0bSFwU 0 7 634 3680 2591 14 Dtool_Ns0bSFwU 0 2 4 this 3 3690  5 other 1 3690  
725 14 Dtool_Ns0bBLZx 0 7 634 3671 2347 14 Dtool_Ns0bBLZx 0 2 4 this 3 3690  5 other 1 3672  
726 14 Dtool_Ns0bfn3J 0 7 634 3689 2675 14 Dtool_Ns0bfn3J 0 2 4 this 3 3690  5 other 1 3681  
727 14 Dtool_Ns0b3m20 0 7 635 3689 2675 14 Dtool_Ns0b3m20 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3690  5 other 1 3672  
728 14 Dtool_Ns0bPmL9 0 7 636 3689 2675 14 Dtool_Ns0bPmL9 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3690  4 onto 1 3672  
729 14 Dtool_Ns0bUCf8 0 7 637 3689 2675 14 Dtool_Ns0bUCf8 0 2 4 this 3 3690  6 scalar 1 3628  
730 14 Dtool_Ns0brOic 0 7 638 3689 2675 14 Dtool_Ns0brOic 0 2 4 this 3 3690  6 scalar 1 3628  
731 14 Dtool_Ns0bVRyH 0 6 639 3690 0 14 Dtool_Ns0bVRyH 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
732 14 Dtool_Ns0bM16_ 0 6 639 3690 0 14 Dtool_Ns0bM16_ 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
733 14 Dtool_Ns0bkaIy 0 7 640 3689 2675 14 Dtool_Ns0bkaIy 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3628  3 fwd 1 3628  2 up 1 3628  2 cs 1 3584  
734 14 Dtool_Ns0b2tjk 0 7 640 3689 2675 14 Dtool_Ns0b2tjk 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 3628  3 fwd 1 3628  2 up 1 3628  
735 14 Dtool_Ns0bFpCv 0 4 641 3630 0 14 Dtool_Ns0bFpCv 0 3 4 this 3 3690  3 out 1 3638  10 class_name 1 3633  
736 14 Dtool_Ns0bnkbU 0 7 642 3645 0 14 Dtool_Ns0bnkbU 0 0 
737 14 Dtool_Ns0bt3tX 0 7 645 3692 2698 14 Dtool_Ns0bt3tX 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
738 14 Dtool_Ns0b9DSo 0 7 645 3692 2698 14 Dtool_Ns0b9DSo 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3647  1 z 1 3649  
739 14 Dtool_Ns0bSkXG 0 7 645 3692 2698 14 Dtool_Ns0bSkXG 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3675  
740 14 Dtool_Ns0b3ZYu 0 7 645 3692 2698 14 Dtool_Ns0b3ZYu 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
741 14 Dtool_Ns0bk1qU 0 7 645 3692 2698 14 Dtool_Ns0bk1qU 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3649  1 y 1 3649  1 z 1 3649  
742 14 Dtool_Ns0bLoO_ 0 6 646 3692 0 14 Dtool_Ns0bLoO_ 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3692  4 copy 1 3675  
743 14 Dtool_Ns0bMIGK 0 6 646 3692 0 14 Dtool_Ns0bMIGK 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3692  10 fill_value 1 3649  
744 14 Dtool_Ns0bOEcA 0 6 647 3631 0 14 Dtool_Ns0bOEcA 0 2 4 this 3 3693  9 attr_name 1 3633  
745 14 Dtool_Ns0beBJo 0 6 648 3634 0 14 Dtool_Ns0beBJo 0 3 4 this 3 3692  9 attr_name 1 3633  6 assign 1 3631  
746 14 Dtool_Ns0bru0q 0 6 649 3693 0 14 Dtool_Ns0bru0q 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
747 14 Dtool_Ns0bAPd3 0 6 650 3693 0 14 Dtool_Ns0bAPd3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
748 14 Dtool_Ns0bYen3 0 6 651 3693 0 14 Dtool_Ns0bYen3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
749 14 Dtool_Ns0bQpw3 0 6 652 3693 0 14 Dtool_Ns0bQpw3 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
750 14 Dtool_Ns0bOilp 0 7 653 3665 2322 14 Dtool_Ns0bOilp 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3693  
751 14 Dtool_Ns0bWTvp 0 7 654 3665 2322 14 Dtool_Ns0bWTvp 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3693  
752 14 Dtool_Ns0bIHvZ 0 7 655 3665 2322 14 Dtool_Ns0bIHvZ 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3693  
753 14 Dtool_Ns0b1M0H 0 7 656 3692 2698 14 Dtool_Ns0b1M0H 0 1 4 this 3 3693  
754 14 Dtool_Ns0b9u0g 0 7 657 3674 2420 14 Dtool_Ns0b9u0g 0 2 4 this 3 3693  5 other 1 3675  
755 14 Dtool_Ns0b6tq7 0 7 657 3692 2698 14 Dtool_Ns0b6tq7 0 2 4 this 3 3693  5 other 1 3684  
756 14 Dtool_Ns0bHBoO 0 7 658 3683 2625 14 Dtool_Ns0bHBoO 0 2 4 this 3 3693  5 other 1 3693  
757 14 Dtool_Ns0bC51g 0 7 658 3674 2420 14 Dtool_Ns0bC51g 0 2 4 this 3 3693  5 other 1 3675  
758 14 Dtool_Ns0b9fr7 0 7 658 3692 2698 14 Dtool_Ns0b9fr7 0 2 4 this 3 3693  5 other 1 3684  
759 14 Dtool_Ns0bwvhl 0 7 659 3692 2698 14 Dtool_Ns0bwvhl 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3693  5 other 1 3675  
760 14 Dtool_Ns0bjmUN 0 7 660 3692 2698 14 Dtool_Ns0bjmUN 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3693  4 onto 1 3675  
761 14 Dtool_Ns0brZwG 0 7 661 3692 2698 14 Dtool_Ns0brZwG 0 2 4 this 3 3693  6 scalar 1 3649  
762 14 Dtool_Ns0b6cym 0 7 662 3692 2698 14 Dtool_Ns0b6cym 0 2 4 this 3 3693  6 scalar 1 3649  
763 14 Dtool_Ns0bXRr5 0 6 663 3693 0 14 Dtool_Ns0bXRr5 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
764 14 Dtool_Ns0bN1zx 0 6 663 3693 0 14 Dtool_Ns0bN1zx 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
765 14 Dtool_Ns0bx8Y0 0 7 664 3692 2698 14 Dtool_Ns0bx8Y0 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3649  3 fwd 1 3649  2 up 1 3649  2 cs 1 3584  
766 14 Dtool_Ns0bs_qG 0 7 664 3692 2698 14 Dtool_Ns0bs_qG 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 3649  3 fwd 1 3649  2 up 1 3649  
767 14 Dtool_Ns0bEp7g 0 4 665 3630 0 14 Dtool_Ns0bEp7g 0 3 4 this 3 3693  3 out 1 3638  10 class_name 1 3633  
768 14 Dtool_Ns0bmkUG 0 7 666 3645 0 14 Dtool_Ns0bmkUG 0 0 
769 14 Dtool_Ns0b8XFo 0 7 669 3695 2720 14 Dtool_Ns0b8XFo 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
770 14 Dtool_Ns0bpsqB 0 7 669 3695 2720 14 Dtool_Ns0bpsqB 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3651  1 z 1 3634  
771 14 Dtool_Ns0bpsvi 0 7 669 3695 2720 14 Dtool_Ns0bpsvi 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3678  
772 14 Dtool_Ns0bX_xA 0 7 669 3695 2720 14 Dtool_Ns0bX_xA 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
773 14 Dtool_Ns0bTdST 0 7 669 3695 2720 14 Dtool_Ns0bTdST 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 1 x 1 3634  1 y 1 3634  1 z 1 3634  
774 14 Dtool_Ns0bPnmI 0 6 670 3695 0 14 Dtool_Ns0bPnmI 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  4 copy 1 3678  
775 14 Dtool_Ns0bPNos 0 6 670 3695 0 14 Dtool_Ns0bPNos 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3695  10 fill_value 1 3634  
776 14 Dtool_Ns0bNktD 0 6 671 3631 0 14 Dtool_Ns0bNktD 0 2 4 this 3 3696  9 attr_name 1 3633  
777 14 Dtool_Ns0bDhar 0 6 672 3634 0 14 Dtool_Ns0bDhar 0 3 4 this 3 3695  9 attr_name 1 3633  6 assign 1 3631  
778 14 Dtool_Ns0bkOFu 0 6 673 3696 0 14 Dtool_Ns0bkOFu 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
779 14 Dtool_Ns0bDvu6 0 6 674 3696 0 14 Dtool_Ns0bDvu6 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
780 14 Dtool_Ns0bb_46 0 6 675 3696 0 14 Dtool_Ns0bb_46 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
781 14 Dtool_Ns0bTJC7 0 6 676 3696 0 14 Dtool_Ns0bTJC7 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
782 14 Dtool_Ns0bzC3s 0 7 677 3668 2337 14 Dtool_Ns0bzC3s 315 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xy
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
783 14 Dtool_Ns0brzAt 0 7 678 3668 2337 14 Dtool_Ns0brzAt 320 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_xz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               first and last components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
784 14 Dtool_Ns0bNnAd 0 7 679 3668 2337 14 Dtool_Ns0bNnAd 314 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::get_yz
//       Access: Public
//  Description: Returns a 2-component vector that shares just the
//               last two components of this vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3696  
785 14 Dtool_Ns0bKsFL 0 7 680 3695 2720 14 Dtool_Ns0bKsFL 0 1 4 this 3 3696  
786 14 Dtool_Ns0b4tMq 0 7 681 3677 2493 14 Dtool_Ns0b4tMq 0 2 4 this 3 3696  5 other 1 3678  
787 14 Dtool_Ns0b7_I_ 0 7 681 3695 2720 14 Dtool_Ns0b7_I_ 0 2 4 this 3 3696  5 other 1 3687  
788 14 Dtool_Ns0bt36d 0 7 682 3686 2652 14 Dtool_Ns0bt36d 0 2 4 this 3 3696  5 other 1 3696  
789 14 Dtool_Ns0bH8Nq 0 7 682 3677 2493 14 Dtool_Ns0bH8Nq 0 2 4 this 3 3696  5 other 1 3678  
790 14 Dtool_Ns0bwoJ_ 0 7 682 3695 2720 14 Dtool_Ns0bwoJ_ 0 2 4 this 3 3696  5 other 1 3687  
791 14 Dtool_Ns0bV42r 0 7 683 3695 2720 14 Dtool_Ns0bV42r 210 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::cross
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3696  5 other 1 3678  
792 14 Dtool_Ns0bwZZ4 0 7 684 3695 2720 14 Dtool_Ns0bwZZ4 0 2 4 this 3 3696  6 scalar 1 3634  
793 14 Dtool_Ns0beebY 0 7 685 3695 2720 14 Dtool_Ns0beebY 0 2 4 this 3 3696  6 scalar 1 3634  
794 14 Dtool_Ns0bUx98 0 6 686 3696 0 14 Dtool_Ns0bUx98 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 1 2 cs 1 3584  
795 14 Dtool_Ns0bOVE1 0 6 686 3696 0 14 Dtool_Ns0bOVE1 440 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::origin
//       Access: Public, Static
//  Description: Returns the origin of the indicated coordinate
//               system.  This is always 0, 0, 0 with all of our
//               existing coordinate systems; it's hard to imagine it
//               ever being different.
//////////////////////////////////////////////////////////////////// 0 
796 14 Dtool_Ns0bShPP 0 7 687 3695 2720 14 Dtool_Ns0bShPP 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 4 5 right 1 3634  3 fwd 1 3634  2 up 1 3634  2 cs 1 3584  
797 14 Dtool_Ns0brQFh 0 7 687 3695 2720 14 Dtool_Ns0brQFh 383 ////////////////////////////////////////////////////////////////////
//     Function: LPoint3::rfu
//       Access: Public, Static
//  Description: Returns a point described by right, forward, up
//               displacements from the origin, wherever that maps to
//               in the given coordinate system.
//////////////////////////////////////////////////////////////////// 3 5 right 1 3634  3 fwd 1 3634  2 up 1 3634  
798 14 Dtool_Ns0bDJMk 0 4 688 3630 0 14 Dtool_Ns0bDJMk 0 3 4 this 3 3696  3 out 1 3638  10 class_name 1 3633  
799 14 Dtool_Ns0bpElJ 0 7 689 3645 0 14 Dtool_Ns0bpElJ 0 0 
800 14 Dtool_Ns0b5kRY 0 7 692 3698 2731 14 Dtool_Ns0b5kRY 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
801 14 Dtool_Ns0b1zsc 0 7 692 3698 2731 14 Dtool_Ns0b1zsc 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3672  1 w 1 3628  
802 14 Dtool_Ns0bdTtd 0 7 692 3698 2731 14 Dtool_Ns0bdTtd 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3699  
803 14 Dtool_Ns0baF0L 0 7 692 3698 2731 14 Dtool_Ns0baF0L 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3701  
804 14 Dtool_Ns0bity7 0 7 692 3698 2731 14 Dtool_Ns0bity7 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
805 14 Dtool_Ns0bDRvG 0 7 692 3698 2731 14 Dtool_Ns0bDRvG 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3628  1 y 1 3628  1 z 1 3628  1 w 1 3628  
806 14 Dtool_Ns0bXuCG 0 6 693 3698 0 14 Dtool_Ns0bXuCG 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  4 copy 1 3699  
807 14 Dtool_Ns0bURI0 0 6 693 3698 0 14 Dtool_Ns0bURI0 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  4 copy 1 3701  
808 14 Dtool_Ns0bGYHk 0 6 693 3698 0 14 Dtool_Ns0bGYHk 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  10 fill_value 1 3628  
809 14 Dtool_Ns0bYOHd 0 4 694 3630 0 14 Dtool_Ns0bYOHd 0 2 4 this 3 3698  4 size 1 3629  
810 14 Dtool_Ns0bmHPT 0 6 697 3699 0 14 Dtool_Ns0bmHPT 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
811 14 Dtool_Ns0bxCF3 0 6 698 3699 0 14 Dtool_Ns0bxCF3 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
812 14 Dtool_Ns0bMdTT 0 6 699 3699 0 14 Dtool_Ns0bMdTT 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
813 14 Dtool_Ns0bOdhv 0 6 700 3699 0 14 Dtool_Ns0bOdhv 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
814 14 Dtool_Ns0b3C3a 0 6 701 3699 0 14 Dtool_Ns0b3C3a 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
815 14 Dtool_Ns0bEu1A 0 6 703 3631 0 14 Dtool_Ns0bEu1A 0 1 4 this 3 3699  
816 14 Dtool_Ns0b_QT_ 0 6 704 3631 0 14 Dtool_Ns0b_QT_ 0 2 4 this 3 3699  9 attr_name 1 3633  
817 14 Dtool_Ns0bAGF2 0 6 705 3634 0 14 Dtool_Ns0bAGF2 0 3 4 this 3 3698  9 attr_name 1 3633  6 assign 1 3631  
818 14 Dtool_Ns0bBy34 0 4 706 3630 0 14 Dtool_Ns0bBy34 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  1 i 1 3634  
819 14 Dtool_Ns0bTrrV 0 6 706 3628 0 14 Dtool_Ns0bTrrV 0 2 4 this 3 3699  1 i 1 3634  
820 14 Dtool_Ns0bWM5I 0 4 707 3630 0 14 Dtool_Ns0bWM5I 0 3 4 this 3 3698  1 i 1 3634  1 v 1 3628  
821 14 Dtool_Ns0b3Z_8 0 6 708 3634 0 14 Dtool_Ns0b3Z_8 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
822 14 Dtool_Ns0bx62D 0 6 709 3635 0 14 Dtool_Ns0bx62D 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
823 14 Dtool_Ns0bd_Pp 0 6 710 3628 0 14 Dtool_Ns0bd_Pp 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  1 i 1 3634  
824 14 Dtool_Ns0bJYvU 0 6 711 3628 0 14 Dtool_Ns0bJYvU 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
825 14 Dtool_Ns0bJ8oZ 0 6 712 3628 0 14 Dtool_Ns0bJ8oZ 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
826 14 Dtool_Ns0bJQge 0 6 713 3628 0 14 Dtool_Ns0bJQge 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
827 14 Dtool_Ns0bJE3P 0 6 714 3628 0 14 Dtool_Ns0bJE3P 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
828 14 Dtool_Ns0bAQHX 0 4 715 3630 0 14 Dtool_Ns0bAQHX 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3698  1 i 1 3634  5 value 1 3628  
829 14 Dtool_Ns0bJuJp 0 4 716 3630 0 14 Dtool_Ns0bJuJp 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
830 14 Dtool_Ns0bJKCu 0 4 717 3630 0 14 Dtool_Ns0bJKCu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
831 14 Dtool_Ns0bJW6y 0 4 718 3630 0 14 Dtool_Ns0bJW6y 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
832 14 Dtool_Ns0bJCRk 0 4 719 3630 0 14 Dtool_Ns0bJCRk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
833 14 Dtool_Ns0bzyHW 0 4 720 3630 0 14 Dtool_Ns0bzyHW 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3698  1 i 1 3634  5 value 1 3628  
834 14 Dtool_Ns0bmmmn 0 4 721 3630 0 14 Dtool_Ns0bmmmn 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
835 14 Dtool_Ns0bmCfs 0 4 722 3630 0 14 Dtool_Ns0bmCfs 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
836 14 Dtool_Ns0bmuXx 0 4 723 3630 0 14 Dtool_Ns0bmuXx 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
837 14 Dtool_Ns0bmaui 0 4 724 3630 0 14 Dtool_Ns0bmaui 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 value 1 3628  
838 14 Dtool_Ns0bXRyH 0 4 725 3630 0 14 Dtool_Ns0bXRyH 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
839 14 Dtool_Ns0b0F36 0 6 726 3634 0 14 Dtool_Ns0b0F36 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
840 14 Dtool_Ns0bW1HJ 0 4 727 3630 0 14 Dtool_Ns0bW1HJ 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  10 fill_value 1 3628  
841 14 Dtool_Ns0b__rX 0 4 728 3630 0 14 Dtool_Ns0b__rX 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3698  1 x 1 3628  1 y 1 3628  1 z 1 3628  1 w 1 3628  
842 14 Dtool_Ns0b2052 0 6 729 3628 0 14 Dtool_Ns0b2052 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  5 other 1 3699  
843 14 Dtool_Ns0bxUcf 0 6 730 3628 0 14 Dtool_Ns0bxUcf 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
844 14 Dtool_Ns0b0Yo_ 0 6 731 3628 0 14 Dtool_Ns0b0Yo_ 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
845 14 Dtool_Ns0bSsCV 0 6 732 3635 0 14 Dtool_Ns0bSsCV 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3698  
846 14 Dtool_Ns0bMsWY 0 7 733 3698 2731 14 Dtool_Ns0bMsWY 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  4 onto 1 3699  
847 14 Dtool_Ns0bxlvx 0 6 734 3635 0 14 Dtool_Ns0bxlvx 0 2 4 this 3 3699  5 other 1 3699  
848 14 Dtool_Ns0bauYz 0 6 735 3635 0 14 Dtool_Ns0bauYz 0 2 4 this 3 3699  5 other 1 3699  
849 14 Dtool_Ns0bmNAi 0 6 736 3635 0 14 Dtool_Ns0bmNAi 0 2 4 this 3 3699  5 other 1 3699  
850 14 Dtool_Ns0btXnx 0 6 737 3634 0 14 Dtool_Ns0btXnx 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  5 other 1 3699  
851 14 Dtool_Ns0bIZYW 0 6 737 3634 0 14 Dtool_Ns0bIZYW 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3699  5 other 1 3699  9 threshold 1 3628  
852 14 Dtool_Ns0bdiZ0 0 6 738 3629 0 14 Dtool_Ns0bdiZ0 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3699  
853 14 Dtool_Ns0bzn_6 0 6 738 3629 0 14 Dtool_Ns0bzn_6 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  9 threshold 1 3628  
854 14 Dtool_Ns0br3PD 0 6 739 3629 0 14 Dtool_Ns0br3PD 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  4 hash 1 3629  
855 14 Dtool_Ns0bNEBo 0 6 739 3629 0 14 Dtool_Ns0bNEBo 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3699  4 hash 1 3629  9 threshold 1 3628  
856 14 Dtool_Ns0b1RZF 0 4 740 3630 0 14 Dtool_Ns0b1RZF 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  7 hashgen 1 3636  
857 14 Dtool_Ns0b9JVR 0 4 740 3630 0 14 Dtool_Ns0b9JVR 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3699  7 hashgen 1 3636  9 threshold 1 3628  
858 14 Dtool_Ns0bPOux 0 7 741 3698 2731 14 Dtool_Ns0bPOux 0 1 4 this 3 3699  
859 14 Dtool_Ns0bztwL 0 7 742 3698 2731 14 Dtool_Ns0bztwL 0 2 4 this 3 3699  5 other 1 3699  
860 14 Dtool_Ns0bzdSf 0 7 743 3698 2731 14 Dtool_Ns0bzdSf 0 2 4 this 3 3699  5 other 1 3699  
861 14 Dtool_Ns0breVF 0 7 744 3698 2731 14 Dtool_Ns0breVF 0 2 4 this 3 3699  6 scalar 1 3628  
862 14 Dtool_Ns0br2J2 0 7 745 3698 2731 14 Dtool_Ns0br2J2 0 2 4 this 3 3699  6 scalar 1 3628  
863 14 Dtool_Ns0btr3T 0 6 746 3698 0 14 Dtool_Ns0btr3T 0 2 4 this 3 3698  5 other 1 3699  
864 14 Dtool_Ns0btbZn 0 6 747 3698 0 14 Dtool_Ns0btbZn 0 2 4 this 3 3698  5 other 1 3699  
865 14 Dtool_Ns0b7ZPM 0 6 748 3698 0 14 Dtool_Ns0b7ZPM 0 2 4 this 3 3698  6 scalar 1 3628  
866 14 Dtool_Ns0b7hD9 0 6 749 3698 0 14 Dtool_Ns0b7hD9 0 2 4 this 3 3698  6 scalar 1 3628  
867 14 Dtool_Ns0bDE_K 0 4 750 3630 0 14 Dtool_Ns0bDE_K 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  5 other 1 3699  
868 14 Dtool_Ns0bVJJO 0 7 751 3698 2731 14 Dtool_Ns0bVJJO 0 2 4 this 3 3699  8 exponent 1 3628  
869 14 Dtool_Ns0bKl_G 0 6 752 3631 0 14 Dtool_Ns0bKl_G 0 2 4 this 3 3698  8 exponent 1 3628  
870 14 Dtool_Ns0b6rOm 0 7 753 3698 2731 14 Dtool_Ns0b6rOm 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  5 other 1 3699  
871 14 Dtool_Ns0bUfvk 0 7 754 3698 2731 14 Dtool_Ns0bUfvk 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  5 other 1 3699  
872 14 Dtool_Ns0byKzg 0 6 755 3635 0 14 Dtool_Ns0byKzg 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  5 other 1 3699  
873 14 Dtool_Ns0b__lQ 0 6 755 3635 0 14 Dtool_Ns0b__lQ 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3699  5 other 1 3699  9 threshold 1 3628  
874 14 Dtool_Ns0bQPcK 0 4 756 3630 0 14 Dtool_Ns0bQPcK 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  3 out 1 3638  
875 14 Dtool_Ns0bFM3d 0 4 757 3630 0 14 Dtool_Ns0bFM3d 0 3 4 this 3 3699  3 out 1 3638  10 class_name 1 3633  
876 14 Dtool_Ns0b3_B4 0 4 758 3630 0 14 Dtool_Ns0b3_B4 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  11 destination 1 3640  
877 14 Dtool_Ns0b3Ii0 0 4 759 3630 0 14 Dtool_Ns0b3Ii0 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  6 source 1 3642  
878 14 Dtool_Ns0bZM70 0 4 760 3630 0 14 Dtool_Ns0bZM70 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3699  11 destination 1 3640  
879 14 Dtool_Ns0bec8G 0 4 761 3630 0 14 Dtool_Ns0bec8G 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3698  6 source 1 3642  
880 14 Dtool_Ns0bhKuD 0 7 762 3645 0 14 Dtool_Ns0bhKuD 0 0 
881 14 Dtool_Ns0bfbHX 0 7 764 3703 2801 14 Dtool_Ns0bfbHX 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
882 14 Dtool_Ns0bVhK6 0 7 764 3703 2801 14 Dtool_Ns0bVhK6 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3699  
883 14 Dtool_Ns0bgd2S 0 7 764 3703 2801 14 Dtool_Ns0bgd2S 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3701  
884 14 Dtool_Ns0bl_vc 0 7 764 3703 2801 14 Dtool_Ns0bl_vc 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3628  1 y 1 3628  1 z 1 3628  1 w 1 3628  
885 14 Dtool_Ns0beh2_ 0 6 765 3703 0 14 Dtool_Ns0beh2_ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  4 copy 1 3699  
886 14 Dtool_Ns0bL5oF 0 6 765 3703 0 14 Dtool_Ns0bL5oF 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  4 copy 1 3701  
887 14 Dtool_Ns0bDDFq 0 4 766 3630 0 14 Dtool_Ns0bDDFq 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3703  1 x 1 3628  1 y 1 3628  1 z 1 3628  1 w 1 3628  
888 14 Dtool_Ns0b_xRe 0 4 767 3630 0 14 Dtool_Ns0b_xRe 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3703  1 i 1 3634  
889 14 Dtool_Ns0b2P3h 0 6 767 3628 0 14 Dtool_Ns0b2P3h 0 2 4 this 3 3701  1 i 1 3634  
890 14 Dtool_Ns0bU4PA 0 4 768 3630 0 14 Dtool_Ns0bU4PA 0 3 4 this 3 3703  1 i 1 3634  1 v 1 3628  
891 14 Dtool_Ns0btqyW 0 6 769 3634 0 14 Dtool_Ns0btqyW 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
892 14 Dtool_Ns0b7GHI 0 4 770 3630 0 14 Dtool_Ns0b7GHI 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3701  
893 14 Dtool_Ns0bfmbG 0 6 771 3634 0 14 Dtool_Ns0bfmbG 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3701  
894 14 Dtool_Ns0bIBnP 0 7 772 3645 0 14 Dtool_Ns0bIBnP 0 0 
895 14 Dtool_Ns0bfAuU 0 7 775 3704 2812 14 Dtool_Ns0bfAuU 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
896 14 Dtool_Ns0bqJxo 0 7 775 3704 2812 14 Dtool_Ns0bqJxo 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3675  1 w 1 3649  
897 14 Dtool_Ns0bKfrW 0 7 775 3704 2812 14 Dtool_Ns0bKfrW 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3705  
898 14 Dtool_Ns0b6Q3P 0 7 775 3704 2812 14 Dtool_Ns0b6Q3P 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3707  
899 14 Dtool_Ns0b5BJ_ 0 7 775 3704 2812 14 Dtool_Ns0b5BJ_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
900 14 Dtool_Ns0bGENf 0 7 775 3704 2812 14 Dtool_Ns0bGENf 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3649  1 y 1 3649  1 z 1 3649  1 w 1 3649  
901 14 Dtool_Ns0be6iS 0 6 776 3704 0 14 Dtool_Ns0be6iS 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  4 copy 1 3705  
902 14 Dtool_Ns0by8tL 0 6 776 3704 0 14 Dtool_Ns0by8tL 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  4 copy 1 3707  
903 14 Dtool_Ns0bIM_5 0 6 776 3704 0 14 Dtool_Ns0bIM_5 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  10 fill_value 1 3649  
904 14 Dtool_Ns0b26Ht 0 4 777 3630 0 14 Dtool_Ns0b26Ht 0 2 4 this 3 3704  4 size 1 3629  
905 14 Dtool_Ns0bYrPj 0 6 780 3705 0 14 Dtool_Ns0bYrPj 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
906 14 Dtool_Ns0bQxFH 0 6 781 3705 0 14 Dtool_Ns0bQxFH 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
907 14 Dtool_Ns0bSxTj 0 6 782 3705 0 14 Dtool_Ns0bSxTj 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
908 14 Dtool_Ns0bsxh_ 0 6 783 3705 0 14 Dtool_Ns0bsxh_ 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
909 14 Dtool_Ns0bVx3q 0 6 784 3705 0 14 Dtool_Ns0bVx3q 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
910 14 Dtool_Ns0b_k0Q 0 6 786 3631 0 14 Dtool_Ns0b_k0Q 0 1 4 this 3 3705  
911 14 Dtool_Ns0bQeSO 0 6 787 3631 0 14 Dtool_Ns0bQeSO 0 2 4 this 3 3705  9 attr_name 1 3633  
912 14 Dtool_Ns0bhSFG 0 6 788 3634 0 14 Dtool_Ns0bhSFG 0 3 4 this 3 3704  9 attr_name 1 3633  6 assign 1 3631  
913 14 Dtool_Ns0bmm3I 0 4 789 3630 0 14 Dtool_Ns0bmm3I 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  1 i 1 3634  
914 14 Dtool_Ns0b1Hrl 0 6 789 3649 0 14 Dtool_Ns0b1Hrl 0 2 4 this 3 3705  1 i 1 3634  
915 14 Dtool_Ns0bglMR 0 4 790 3630 0 14 Dtool_Ns0bglMR 0 3 4 this 3 3704  1 i 1 3634  1 v 1 3649  
916 14 Dtool_Ns0bWK_M 0 6 791 3634 0 14 Dtool_Ns0bWK_M 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
917 14 Dtool_Ns0bPu2T 0 6 792 3635 0 14 Dtool_Ns0bPu2T 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
918 14 Dtool_Ns0b_qP5 0 6 793 3649 0 14 Dtool_Ns0b_qP5 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  1 i 1 3634  
919 14 Dtool_Ns0brtvk 0 6 794 3649 0 14 Dtool_Ns0brtvk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
920 14 Dtool_Ns0brJop 0 6 795 3649 0 14 Dtool_Ns0brJop 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
921 14 Dtool_Ns0brlgu 0 6 796 3649 0 14 Dtool_Ns0brlgu 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
922 14 Dtool_Ns0brx3f 0 6 797 3649 0 14 Dtool_Ns0brx3f 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
923 14 Dtool_Ns0bf_AA 0 4 798 3630 0 14 Dtool_Ns0bf_AA 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  1 i 1 3634  5 value 1 3649  
924 14 Dtool_Ns0bjGFc 0 4 799 3630 0 14 Dtool_Ns0bjGFc 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
925 14 Dtool_Ns0bji9g 0 4 800 3630 0 14 Dtool_Ns0bji9g 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
926 14 Dtool_Ns0bje2l 0 4 801 3630 0 14 Dtool_Ns0bje2l 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
927 14 Dtool_Ns0bjqMX 0 4 802 3630 0 14 Dtool_Ns0bjqMX 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
928 14 Dtool_Ns0bfMae 0 4 803 3630 0 14 Dtool_Ns0bfMae 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3704  1 i 1 3634  5 value 1 3649  
929 14 Dtool_Ns0bARia 0 4 804 3630 0 14 Dtool_Ns0bARia 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
930 14 Dtool_Ns0bA1af 0 4 805 3630 0 14 Dtool_Ns0bA1af 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
931 14 Dtool_Ns0bAZTk 0 4 806 3630 0 14 Dtool_Ns0bAZTk 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
932 14 Dtool_Ns0bANqV 0 4 807 3630 0 14 Dtool_Ns0bANqV 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 value 1 3649  
933 14 Dtool_Ns0bx8zX 0 4 808 3630 0 14 Dtool_Ns0bx8zX 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
934 14 Dtool_Ns0bXx2K 0 6 809 3634 0 14 Dtool_Ns0bXx2K 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
935 14 Dtool_Ns0bFbMg 0 4 810 3630 0 14 Dtool_Ns0bFbMg 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  10 fill_value 1 3649  
936 14 Dtool_Ns0bdT7O 0 4 811 3630 0 14 Dtool_Ns0bdT7O 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3704  1 x 1 3649  1 y 1 3649  1 z 1 3649  1 w 1 3649  
937 14 Dtool_Ns0bVfrF 0 6 812 3649 0 14 Dtool_Ns0bVfrF 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  5 other 1 3705  
938 14 Dtool_Ns0bTIcv 0 6 813 3649 0 14 Dtool_Ns0bTIcv 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
939 14 Dtool_Ns0bVEoP 0 6 814 3649 0 14 Dtool_Ns0bVEoP 295 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length
//       Access: Published
//  Description: Returns the length of the vector, by the Pythagorean
//               theorem.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
940 14 Dtool_Ns0bwBCl 0 6 815 3635 0 14 Dtool_Ns0bwBCl 367 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::normalize
//       Access: Published
//  Description: Normalizes the vector in place.  Returns true if the
//               vector was normalized, false if it was a zero-length
//               vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3704  
941 14 Dtool_Ns0bO3Ro 0 7 816 3704 2812 14 Dtool_Ns0bO3Ro 390 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  4 onto 1 3705  
942 14 Dtool_Ns0bzfP_ 0 6 817 3635 0 14 Dtool_Ns0bzfP_ 0 2 4 this 3 3705  5 other 1 3705  
943 14 Dtool_Ns0beFYT 0 6 818 3635 0 14 Dtool_Ns0beFYT 0 2 4 this 3 3705  5 other 1 3705  
944 14 Dtool_Ns0balAC 0 6 819 3635 0 14 Dtool_Ns0balAC 0 2 4 this 3 3705  5 other 1 3705  
945 14 Dtool_Ns0b0LH_ 0 6 820 3634 0 14 Dtool_Ns0b0LH_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  5 other 1 3705  
946 14 Dtool_Ns0b319I 0 6 820 3634 0 14 Dtool_Ns0b319I 504 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: Sorts vectors lexicographically, componentwise.
//               Returns a number less than 0 if this vector sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3705  5 other 1 3705  9 threshold 1 3649  
947 14 Dtool_Ns0b8_ZE 0 6 821 3629 0 14 Dtool_Ns0b8_ZE 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3705  
948 14 Dtool_Ns0bSwXj 0 6 821 3629 0 14 Dtool_Ns0bSwXj 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  9 threshold 1 3649  
949 14 Dtool_Ns0bJoPT 0 6 822 3629 0 14 Dtool_Ns0bJoPT 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  4 hash 1 3629  
950 14 Dtool_Ns0bXZGe 0 6 822 3629 0 14 Dtool_Ns0bXZGe 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3705  4 hash 1 3629  9 threshold 1 3649  
951 14 Dtool_Ns0brlZV 0 4 823 3630 0 14 Dtool_Ns0brlZV 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  7 hashgen 1 3636  
952 14 Dtool_Ns0bMhf5 0 4 823 3630 0 14 Dtool_Ns0bMhf5 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3705  7 hashgen 1 3636  9 threshold 1 3649  
953 14 Dtool_Ns0bQyvB 0 7 824 3704 2812 14 Dtool_Ns0bQyvB 0 1 4 this 3 3705  
954 14 Dtool_Ns0btXQY 0 7 825 3704 2812 14 Dtool_Ns0btXQY 0 2 4 this 3 3705  5 other 1 3705  
955 14 Dtool_Ns0btnyr 0 7 826 3704 2812 14 Dtool_Ns0btnyr 0 2 4 this 3 3705  5 other 1 3705  
956 14 Dtool_Ns0bW_WY 0 7 827 3704 2812 14 Dtool_Ns0bW_WY 0 2 4 this 3 3705  6 scalar 1 3649  
957 14 Dtool_Ns0bXWNJ 0 7 828 3704 2812 14 Dtool_Ns0bXWNJ 0 2 4 this 3 3705  6 scalar 1 3649  
958 14 Dtool_Ns0bhw2z 0 6 829 3704 0 14 Dtool_Ns0bhw2z 0 2 4 this 3 3704  5 other 1 3705  
959 14 Dtool_Ns0biAYH 0 6 830 3704 0 14 Dtool_Ns0biAYH 0 2 4 this 3 3704  5 other 1 3705  
960 14 Dtool_Ns0b5DXY 0 6 831 3704 0 14 Dtool_Ns0b5DXY 0 2 4 this 3 3704  6 scalar 1 3649  
961 14 Dtool_Ns0b_7LJ 0 6 832 3704 0 14 Dtool_Ns0b_7LJ 0 2 4 this 3 3704  6 scalar 1 3649  
962 14 Dtool_Ns0bh_OR 0 4 833 3630 0 14 Dtool_Ns0bh_OR 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  5 other 1 3705  
963 14 Dtool_Ns0bDO5y 0 7 834 3704 2812 14 Dtool_Ns0bDO5y 0 2 4 this 3 3705  8 exponent 1 3649  
964 14 Dtool_Ns0blSsP 0 6 835 3631 0 14 Dtool_Ns0blSsP 0 2 4 this 3 3704  8 exponent 1 3649  
965 14 Dtool_Ns0bR1LP 0 7 836 3704 2812 14 Dtool_Ns0bR1LP 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  5 other 1 3705  
966 14 Dtool_Ns0b_BrN 0 7 837 3704 2812 14 Dtool_Ns0b_BrN 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  5 other 1 3705  
967 14 Dtool_Ns0bcoqw 0 6 838 3635 0 14 Dtool_Ns0bcoqw 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  5 other 1 3705  
968 14 Dtool_Ns0b9ILB 0 6 838 3635 0 14 Dtool_Ns0b9ILB 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3705  5 other 1 3705  9 threshold 1 3649  
969 14 Dtool_Ns0b1Bda 0 4 839 3630 0 14 Dtool_Ns0b1Bda 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  3 out 1 3638  
970 14 Dtool_Ns0beB2t 0 4 840 3630 0 14 Dtool_Ns0beB2t 0 3 4 this 3 3705  3 out 1 3638  10 class_name 1 3633  
971 14 Dtool_Ns0bQsBI 0 4 841 3630 0 14 Dtool_Ns0bQsBI 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  11 destination 1 3640  
972 14 Dtool_Ns0bUkiE 0 4 842 3630 0 14 Dtool_Ns0bUkiE 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  6 source 1 3642  
973 14 Dtool_Ns0bjJ6E 0 4 843 3630 0 14 Dtool_Ns0bjJ6E 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3705  11 destination 1 3640  
974 14 Dtool_Ns0b4P8W 0 4 844 3630 0 14 Dtool_Ns0b4P8W 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3704  6 source 1 3642  
975 14 Dtool_Ns0bGAvT 0 7 845 3645 0 14 Dtool_Ns0bGAvT 0 0 
976 14 Dtool_Ns0bj4zI 0 7 847 3709 2882 14 Dtool_Ns0bj4zI 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
977 14 Dtool_Ns0bKsyE 0 7 847 3709 2882 14 Dtool_Ns0bKsyE 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3705  
978 14 Dtool_Ns0b1Rq_ 0 7 847 3709 2882 14 Dtool_Ns0b1Rq_ 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3707  
979 14 Dtool_Ns0bKT22 0 7 847 3709 2882 14 Dtool_Ns0bKT22 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3649  1 y 1 3649  1 z 1 3649  1 w 1 3649  
980 14 Dtool_Ns0b5na5 0 6 848 3709 0 14 Dtool_Ns0b5na5 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3709  4 copy 1 3705  
981 14 Dtool_Ns0b0fkQ 0 6 848 3709 0 14 Dtool_Ns0b0fkQ 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3709  4 copy 1 3707  
982 14 Dtool_Ns0bB49g 0 4 849 3630 0 14 Dtool_Ns0bB49g 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3709  1 x 1 3649  1 y 1 3649  1 z 1 3649  1 w 1 3649  
983 14 Dtool_Ns0bT8QQ 0 4 850 3630 0 14 Dtool_Ns0bT8QQ 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3709  1 i 1 3634  
984 14 Dtool_Ns0bSI3T 0 6 850 3649 0 14 Dtool_Ns0bSI3T 0 2 4 this 3 3707  1 i 1 3634  
985 14 Dtool_Ns0bsMSh 0 4 851 3630 0 14 Dtool_Ns0bsMSh 0 3 4 this 3 3709  1 i 1 3634  1 v 1 3649  
986 14 Dtool_Ns0bYnzI 0 6 852 3634 0 14 Dtool_Ns0bYnzI 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
987 14 Dtool_Ns0bY7H6 0 4 853 3630 0 14 Dtool_Ns0bY7H6 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3707  
988 14 Dtool_Ns0bihb4 0 6 854 3634 0 14 Dtool_Ns0bihb4 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3707  
989 14 Dtool_Ns0bkDnB 0 7 855 3645 0 14 Dtool_Ns0bkDnB 0 0 
990 14 Dtool_Ns0bUNkd 0 7 858 3710 2893 14 Dtool_Ns0bUNkd 229 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
991 14 Dtool_Ns0bauLi 0 7 858 3710 2893 14 Dtool_Ns0bauLi 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3678  1 w 1 3634  
992 14 Dtool_Ns0bTpRI 0 7 858 3710 2893 14 Dtool_Ns0bTpRI 226 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3711  
993 14 Dtool_Ns0b7tyl 0 7 858 3710 2893 14 Dtool_Ns0b7tyl 223 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3713  
994 14 Dtool_Ns0bqeHH 0 7 858 3710 2893 14 Dtool_Ns0bqeHH 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
995 14 Dtool_Ns0bdcHP 0 7 858 3710 2893 14 Dtool_Ns0bdcHP 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3634  1 y 1 3634  1 z 1 3634  1 w 1 3634  
996 14 Dtool_Ns0bz5UT 0 6 859 3710 0 14 Dtool_Ns0bz5UT 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  4 copy 1 3711  
997 14 Dtool_Ns0bgz0w 0 6 859 3710 0 14 Dtool_Ns0bgz0w 231 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  4 copy 1 3713  
998 14 Dtool_Ns0b4iIS 0 6 859 3710 0 14 Dtool_Ns0b4iIS 234 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  10 fill_value 1 3634  
999 14 Dtool_Ns0bMjJF 0 4 860 3630 0 14 Dtool_Ns0bMjJF 0 2 4 this 3 3710  4 size 1 3629  
1000 14 Dtool_Ns0bmER7 0 6 863 3711 0 14 Dtool_Ns0bmER7 262 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::zero Named Constructor
//       Access: Published
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1001 14 Dtool_Ns0bD2Hf 0 6 864 3711 0 14 Dtool_Ns0bD2Hf 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_x Named Constructor
//       Access: Published
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1002 14 Dtool_Ns0bB2V7 0 6 865 3711 0 14 Dtool_Ns0bB2V7 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_y Named Constructor
//       Access: Published
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1003 14 Dtool_Ns0bG2jX 0 6 866 3711 0 14 Dtool_Ns0bG2jX 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_z Named Constructor
//       Access: Published
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1004 14 Dtool_Ns0bd25C 0 6 867 3711 0 14 Dtool_Ns0bd25C 259 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::unit_w Named Constructor
//       Access: Published
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1005 14 Dtool_Ns0bLZ2o 0 6 869 3631 0 14 Dtool_Ns0bLZ2o 0 1 4 this 3 3711  
1006 14 Dtool_Ns0bWBUm 0 6 870 3631 0 14 Dtool_Ns0bWBUm 0 2 4 this 3 3711  9 attr_name 1 3633  
1007 14 Dtool_Ns0bNFHe 0 6 871 3634 0 14 Dtool_Ns0bNFHe 0 3 4 this 3 3710  9 attr_name 1 3633  6 assign 1 3631  
1008 14 Dtool_Ns0bcX4g 0 4 872 3630 0 14 Dtool_Ns0bcX4g 227 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::Indexing Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  1 i 1 3634  
1009 14 Dtool_Ns0bxos9 0 6 872 3634 0 14 Dtool_Ns0bxos9 0 2 4 this 3 3711  1 i 1 3634  
1010 14 Dtool_Ns0b3gWx 0 4 873 3630 0 14 Dtool_Ns0b3gWx 0 3 4 this 3 3710  1 i 1 3634  1 v 1 3634  
1011 14 Dtool_Ns0b06Al 0 6 874 3634 0 14 Dtool_Ns0b06Al 274 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::size
//       Access: Published, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
1012 14 Dtool_Ns0bzf3r 0 6 875 3635 0 14 Dtool_Ns0bzf3r 311 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::is_nan
//       Access: Published
//  Description: Returns true if any component of the vector is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1013 14 Dtool_Ns0bqdQR 0 6 876 3634 0 14 Dtool_Ns0bqdQR 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  1 i 1 3634  
1014 14 Dtool_Ns0bMJw8 0 6 877 3634 0 14 Dtool_Ns0bMJw8 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1015 14 Dtool_Ns0bPloB 0 6 878 3634 0 14 Dtool_Ns0bPloB 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1016 14 Dtool_Ns0bPBjG 0 6 879 3634 0 14 Dtool_Ns0bPBjG 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1017 14 Dtool_Ns0bMt53 0 6 880 3634 0 14 Dtool_Ns0bMt53 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1018 14 Dtool_Ns0bj8iW 0 4 881 3630 0 14 Dtool_Ns0bj8iW 218 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3710  1 i 1 3634  5 value 1 3634  
1019 14 Dtool_Ns0bQVL0 0 4 882 3630 0 14 Dtool_Ns0bQVL0 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1020 14 Dtool_Ns0bQxD5 0 4 883 3630 0 14 Dtool_Ns0bQxD5 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1021 14 Dtool_Ns0bQd89 0 4 884 3630 0 14 Dtool_Ns0bQd89 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1022 14 Dtool_Ns0bQJTv 0 4 885 3630 0 14 Dtool_Ns0bQJTv 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1023 14 Dtool_Ns0baSk_ 0 4 886 3630 0 14 Dtool_Ns0baSk_ 221 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_to_cell
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3710  1 i 1 3634  5 value 1 3634  
1024 14 Dtool_Ns0bvvoy 0 4 887 3630 0 14 Dtool_Ns0bvvoy 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_x
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1025 14 Dtool_Ns0bvLh3 0 4 888 3630 0 14 Dtool_Ns0bvLh3 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_y
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1026 14 Dtool_Ns0bvXZ8 0 4 889 3630 0 14 Dtool_Ns0bvXZ8 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_z
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1027 14 Dtool_Ns0bvDwt 0 4 890 3630 0 14 Dtool_Ns0bvDwt 215 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_w
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 value 1 3634  
1028 14 Dtool_Ns0bJQ0v 0 4 891 3630 0 14 Dtool_Ns0bJQ0v 401 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_data
//       Access: Published
//  Description: Returns the address of the first of the four data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1029 14 Dtool_Ns0bTa3i 0 6 892 3634 0 14 Dtool_Ns0bTa3i 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the vector, four.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1030 14 Dtool_Ns0baaPs 0 4 893 3630 0 14 Dtool_Ns0baaPs 364 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fill
//       Access: Published
//  Description: Sets each element of the vector to the indicated
//               fill_value.  This is particularly useful for
//               initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  10 fill_value 1 3634  
1031 14 Dtool_Ns0bb_Ku 0 4 894 3630 0 14 Dtool_Ns0bb_Ku 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3710  1 x 1 3634  1 y 1 3634  1 z 1 3634  1 w 1 3634  
1032 14 Dtool_Ns0bOIvg 0 6 895 3634 0 14 Dtool_Ns0bOIvg 213 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::dot
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  5 other 1 3711  
1033 14 Dtool_Ns0bHldH 0 6 896 3634 0 14 Dtool_Ns0bHldH 300 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::length_squared
//       Access: Published
//  Description: Returns the square of the vector's length, cheap and
//               easy.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1034 14 Dtool_Ns0bJtA_ 0 6 897 3635 0 14 Dtool_Ns0bJtA_ 0 2 4 this 3 3711  5 other 1 3711  
1035 14 Dtool_Ns0bOUaD 0 6 898 3635 0 14 Dtool_Ns0bOUaD 0 2 4 this 3 3711  5 other 1 3711  
1036 14 Dtool_Ns0bD0Dy 0 6 899 3635 0 14 Dtool_Ns0bD0Dy 0 2 4 this 3 3711  5 other 1 3711  
1037 14 Dtool_Ns0bli4_ 0 6 900 3634 0 14 Dtool_Ns0bli4_ 321 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  5 other 1 3711  
1038 14 Dtool_Ns0bz9bc 0 6 901 3629 0 14 Dtool_Ns0bz9bc 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3711  
1039 14 Dtool_Ns0bkLQr 0 6 902 3629 0 14 Dtool_Ns0bkLQr 257 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  4 hash 1 3629  
1040 14 Dtool_Ns0buCat 0 4 903 3630 0 14 Dtool_Ns0buCat 272 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  7 hashgen 1 3636  
1041 14 Dtool_Ns0baJwZ 0 7 904 3710 2893 14 Dtool_Ns0baJwZ 0 1 4 this 3 3711  
1042 14 Dtool_Ns0b3lBZ 0 7 905 3710 2893 14 Dtool_Ns0b3lBZ 0 2 4 this 3 3711  5 other 1 3711  
1043 14 Dtool_Ns0b31js 0 7 906 3710 2893 14 Dtool_Ns0b31js 0 2 4 this 3 3711  5 other 1 3711  
1044 14 Dtool_Ns0bHEhp 0 7 907 3710 2893 14 Dtool_Ns0bHEhp 0 2 4 this 3 3711  6 scalar 1 3634  
1045 14 Dtool_Ns0bG8Wa 0 7 908 3710 2893 14 Dtool_Ns0bG8Wa 0 2 4 this 3 3711  6 scalar 1 3634  
1046 14 Dtool_Ns0b1q5j 0 6 909 3710 0 14 Dtool_Ns0b1q5j 0 2 4 this 3 3710  5 other 1 3711  
1047 14 Dtool_Ns0b1aa3 0 6 910 3710 0 14 Dtool_Ns0b1aa3 0 2 4 this 3 3710  5 other 1 3711  
1048 14 Dtool_Ns0bgcd0 0 6 911 3710 0 14 Dtool_Ns0bgcd0 0 2 4 this 3 3710  6 scalar 1 3634  
1049 14 Dtool_Ns0bh0Rl 0 6 912 3710 0 14 Dtool_Ns0bh0Rl 0 2 4 this 3 3710  6 scalar 1 3634  
1050 14 Dtool_Ns0bIzpB 0 4 913 3630 0 14 Dtool_Ns0bIzpB 228 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  5 other 1 3711  
1051 14 Dtool_Ns0bAdXI 0 7 914 3710 2893 14 Dtool_Ns0bAdXI 0 2 4 this 3 3711  8 exponent 1 3634  
1052 14 Dtool_Ns0b7qwH 0 6 915 3631 0 14 Dtool_Ns0b7qwH 0 2 4 this 3 3710  8 exponent 1 3634  
1053 14 Dtool_Ns0bXn1I 0 7 916 3710 2893 14 Dtool_Ns0bXn1I 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmax
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  5 other 1 3711  
1054 14 Dtool_Ns0bJaVH 0 7 917 3710 2893 14 Dtool_Ns0bJaVH 214 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::fmin
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  5 other 1 3711  
1055 14 Dtool_Ns0bBiDJ 0 6 918 3635 0 14 Dtool_Ns0bBiDJ 342 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  5 other 1 3711  
1056 14 Dtool_Ns0bxq33 0 6 918 3635 0 14 Dtool_Ns0bxq33 318 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::almost_equal
//       Access: Published
//  Description: Returns true if two vectors are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3711  5 other 1 3711  9 threshold 1 3634  
1057 14 Dtool_Ns0bt6dy 0 4 919 3630 0 14 Dtool_Ns0bt6dy 216 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  3 out 1 3638  
1058 14 Dtool_Ns0bT94F 0 4 920 3630 0 14 Dtool_Ns0bT94F 0 3 4 this 3 3711  3 out 1 3638  10 class_name 1 3633  
1059 14 Dtool_Ns0bKZCg 0 4 921 3630 0 14 Dtool_Ns0bKZCg 642 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram_fixed
//       Access: Published
//  Description: Writes the vector to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the vector, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  11 destination 1 3640  
1060 14 Dtool_Ns0byLkc 0 4 922 3630 0 14 Dtool_Ns0byLkc 348 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram_fixed
//       Access: Published
//  Description: Reads the vector from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  6 source 1 3642  
1061 14 Dtool_Ns0bH98c 0 4 923 3630 0 14 Dtool_Ns0bH98c 464 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::write_datagram
//       Access: Published
//  Description: Writes the vector to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3711  11 destination 1 3640  
1062 14 Dtool_Ns0bns9u 0 4 924 3630 0 14 Dtool_Ns0bns9u 280 ////////////////////////////////////////////////////////////////////
//     Function: LVecBase4::read_datagram
//       Access: Published
//  Description: Reads the vector from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3710  6 source 1 3642  
1063 14 Dtool_Ns0b09vr 0 7 925 3645 0 14 Dtool_Ns0b09vr 0 0 
1064 14 Dtool_Ns0bN2ks 0 7 927 3715 2960 14 Dtool_Ns0bN2ks 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1065 14 Dtool_Ns0bRANK 0 7 927 3715 2960 14 Dtool_Ns0bRANK 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3711  
1066 14 Dtool_Ns0bidov 0 7 927 3715 2960 14 Dtool_Ns0bidov 232 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3713  
1067 14 Dtool_Ns0bdkQA 0 7 927 3715 2960 14 Dtool_Ns0bdkQA 227 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3634  1 y 1 3634  1 z 1 3634  1 w 1 3634  
1068 14 Dtool_Ns0b1vhp 0 6 928 3715 0 14 Dtool_Ns0b1vhp 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3715  4 copy 1 3711  
1069 14 Dtool_Ns0b8VMV 0 6 928 3715 0 14 Dtool_Ns0b8VMV 240 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3715  4 copy 1 3713  
1070 14 Dtool_Ns0b8b3k 0 4 929 3630 0 14 Dtool_Ns0b8b3k 222 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 this 3 3715  1 x 1 3634  1 y 1 3634  1 z 1 3634  1 w 1 3634  
1071 14 Dtool_Ns0bU0Rz 0 4 930 3630 0 14 Dtool_Ns0bU0Rz 233 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::Indexing Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3715  1 i 1 3634  
1072 14 Dtool_Ns0bcC32 0 6 930 3634 0 14 Dtool_Ns0bcC32 0 2 4 this 3 3713  1 i 1 3634  
1073 14 Dtool_Ns0beaUF 0 4 931 3630 0 14 Dtool_Ns0beaUF 0 3 4 this 3 3715  1 i 1 3634  1 v 1 3634  
1074 14 Dtool_Ns0bXvyr 0 6 932 3634 0 14 Dtool_Ns0bXvyr 280 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::size
//       Access: Public, Static
//  Description: Returns 4: the number of components of a LVecBase4.
//////////////////////////////////////////////////////////////////// 0 
1075 14 Dtool_Ns0bBFHd 0 4 933 3630 0 14 Dtool_Ns0bBFHd 408 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_data
//       Access: Public
//  Description: Returns the address of the first of the three data
//               elements in the vector.  The remaining elements
//               occupy the next positions consecutively in memory.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3713  
1076 14 Dtool_Ns0bl7bb 0 6 934 3634 0 14 Dtool_Ns0bl7bb 283 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLVecBase4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the vector, 4.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3713  
1077 14 Dtool_Ns0beNnk 0 7 935 3645 0 14 Dtool_Ns0beNnk 0 0 
1078 14 Dtool_Ns0b2hGZ 0 7 938 3716 2978 14 Dtool_Ns0b2hGZ 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1079 14 Dtool_Ns0bMmmu 0 7 938 3716 2978 14 Dtool_Ns0bMmmu 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3672  1 w 1 3628  
1080 14 Dtool_Ns0b55R7 0 7 938 3716 2978 14 Dtool_Ns0b55R7 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3699  
1081 14 Dtool_Ns0bIgP3 0 7 938 3716 2978 14 Dtool_Ns0bIgP3 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
1082 14 Dtool_Ns0bGLX9 0 7 938 3716 2978 14 Dtool_Ns0bGLX9 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3628  1 y 1 3628  1 z 1 3628  1 w 1 3628  
1083 14 Dtool_Ns0bq2Ys 0 6 939 3716 0 14 Dtool_Ns0bq2Ys 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  4 copy 1 3699  
1084 14 Dtool_Ns0bRfUr 0 6 939 3716 0 14 Dtool_Ns0bRfUr 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3716  10 fill_value 1 3628  
1085 14 Dtool_Ns0bu3EG 0 6 940 3631 0 14 Dtool_Ns0bu3EG 0 2 4 this 3 3717  9 attr_name 1 3633  
1086 14 Dtool_Ns0bVIy9 0 6 941 3634 0 14 Dtool_Ns0bVIy9 0 3 4 this 3 3716  9 attr_name 1 3633  6 assign 1 3631  
1087 14 Dtool_Ns0bPC0O 0 6 942 3717 0 14 Dtool_Ns0bPC0O 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1088 14 Dtool_Ns0bxI8j 0 6 943 3717 0 14 Dtool_Ns0bxI8j 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1089 14 Dtool_Ns0bxk1o 0 6 944 3717 0 14 Dtool_Ns0bxk1o 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1090 14 Dtool_Ns0bxAtt 0 6 945 3717 0 14 Dtool_Ns0bxAtt 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1091 14 Dtool_Ns0bxsEf 0 6 946 3717 0 14 Dtool_Ns0bxsEf 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1092 14 Dtool_Ns0bWMwv 0 7 947 3716 2978 14 Dtool_Ns0bWMwv 0 1 4 this 3 3717  
1093 14 Dtool_Ns0bWUig 0 7 948 3698 2731 14 Dtool_Ns0bWUig 0 2 4 this 3 3717  5 other 1 3699  
1094 14 Dtool_Ns0bOmWu 0 7 948 3716 2978 14 Dtool_Ns0bOmWu 0 2 4 this 3 3717  5 other 1 3717  
1095 14 Dtool_Ns0b2RJh 0 7 949 3698 2731 14 Dtool_Ns0b2RJh 0 2 4 this 3 3717  5 other 1 3699  
1096 14 Dtool_Ns0buj9u 0 7 949 3716 2978 14 Dtool_Ns0buj9u 0 2 4 this 3 3717  5 other 1 3717  
1097 14 Dtool_Ns0bTPWC 0 7 950 3716 2978 14 Dtool_Ns0bTPWC 0 2 4 this 3 3717  6 scalar 1 3628  
1098 14 Dtool_Ns0bjn4D 0 7 951 3716 2978 14 Dtool_Ns0bjn4D 0 2 4 this 3 3717  6 scalar 1 3628  
1099 14 Dtool_Ns0bGh8I 0 7 952 3716 2978 14 Dtool_Ns0bGh8I 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3717  4 onto 1 3699  
1100 14 Dtool_Ns0beACX 0 4 953 3630 0 14 Dtool_Ns0beACX 0 3 4 this 3 3717  3 out 1 3638  10 class_name 1 3633  
1101 14 Dtool_Ns0bvYTA 0 7 954 3645 0 14 Dtool_Ns0bvYTA 0 0 
1102 14 Dtool_Ns0bSTkV 0 7 957 3719 2996 14 Dtool_Ns0bSTkV 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1103 14 Dtool_Ns0bZALA 0 7 957 3719 2996 14 Dtool_Ns0bZALA 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3675  1 w 1 3649  
1104 14 Dtool_Ns0brcU1 0 7 957 3719 2996 14 Dtool_Ns0brcU1 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3705  
1105 14 Dtool_Ns0b8AKA 0 7 957 3719 2996 14 Dtool_Ns0b8AKA 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
1106 14 Dtool_Ns0b72XI 0 7 957 3719 2996 14 Dtool_Ns0b72XI 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3649  1 y 1 3649  1 z 1 3649  1 w 1 3649  
1107 14 Dtool_Ns0by3xa 0 6 958 3719 0 14 Dtool_Ns0by3xa 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3719  4 copy 1 3705  
1108 14 Dtool_Ns0bp_A2 0 6 958 3719 0 14 Dtool_Ns0bp_A2 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3719  10 fill_value 1 3649  
1109 14 Dtool_Ns0bJ0kC 0 6 959 3631 0 14 Dtool_Ns0bJ0kC 0 2 4 this 3 3720  9 attr_name 1 3633  
1110 14 Dtool_Ns0bMLS6 0 6 960 3634 0 14 Dtool_Ns0bMLS6 0 3 4 this 3 3719  9 attr_name 1 3633  6 assign 1 3631  
1111 14 Dtool_Ns0b2FUL 0 6 961 3720 0 14 Dtool_Ns0b2FUL 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1112 14 Dtool_Ns0boXcg 0 6 962 3720 0 14 Dtool_Ns0boXcg 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1113 14 Dtool_Ns0bo7Vl 0 6 963 3720 0 14 Dtool_Ns0bo7Vl 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1114 14 Dtool_Ns0bofNq 0 6 964 3720 0 14 Dtool_Ns0bofNq 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1115 14 Dtool_Ns0bozkb 0 6 965 3720 0 14 Dtool_Ns0bozkb 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1116 14 Dtool_Ns0bPNQs 0 7 966 3719 2996 14 Dtool_Ns0bPNQs 0 1 4 this 3 3720  
1117 14 Dtool_Ns0buV7O 0 7 967 3704 2812 14 Dtool_Ns0buV7O 0 2 4 this 3 3720  5 other 1 3705  
1118 14 Dtool_Ns0bh1ao 0 7 967 3719 2996 14 Dtool_Ns0bh1ao 0 2 4 this 3 3720  5 other 1 3720  
1119 14 Dtool_Ns0bOQiP 0 7 968 3704 2812 14 Dtool_Ns0bOQiP 0 2 4 this 3 3720  5 other 1 3705  
1120 14 Dtool_Ns0bBwBp 0 7 968 3719 2996 14 Dtool_Ns0bBwBp 0 2 4 this 3 3720  5 other 1 3720  
1121 14 Dtool_Ns0b9Z8K 0 7 969 3719 2996 14 Dtool_Ns0b9Z8K 0 2 4 this 3 3720  6 scalar 1 3649  
1122 14 Dtool_Ns0btwdM 0 7 970 3719 2996 14 Dtool_Ns0btwdM 0 2 4 this 3 3720  6 scalar 1 3649  
1123 14 Dtool_Ns0b1mdN 0 7 971 3719 2996 14 Dtool_Ns0b1mdN 389 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3720  4 onto 1 3705  
1124 14 Dtool_Ns0bxDiT 0 4 972 3630 0 14 Dtool_Ns0bxDiT 0 3 4 this 3 3720  3 out 1 3638  10 class_name 1 3633  
1125 14 Dtool_Ns0bHZz8 0 7 973 3645 0 14 Dtool_Ns0bHZz8 0 0 
1126 14 Dtool_Ns0bmVXe 0 7 976 3722 3013 14 Dtool_Ns0bmVXe 225 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1127 14 Dtool_Ns0bHRmP 0 7 976 3722 3013 14 Dtool_Ns0bHRmP 220 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3678  1 w 1 3634  
1128 14 Dtool_Ns0b_CME 0 7 976 3722 3013 14 Dtool_Ns0b_CME 222 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3711  
1129 14 Dtool_Ns0bB_No 0 7 976 3722 3013 14 Dtool_Ns0bB_No 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
1130 14 Dtool_Ns0bxpif 0 7 976 3722 3013 14 Dtool_Ns0bxpif 217 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3634  1 y 1 3634  1 z 1 3634  1 w 1 3634  
1131 14 Dtool_Ns0bVWyG 0 6 977 3722 0 14 Dtool_Ns0bVWyG 230 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3722  4 copy 1 3711  
1132 14 Dtool_Ns0b6exG 0 6 977 3722 0 14 Dtool_Ns0b6exG 224 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3722  10 fill_value 1 3634  
1133 14 Dtool_Ns0bo2Ur 0 6 978 3631 0 14 Dtool_Ns0bo2Ur 0 2 4 this 3 3723  9 attr_name 1 3633  
1134 14 Dtool_Ns0buICj 0 6 979 3634 0 14 Dtool_Ns0buICj 0 3 4 this 3 3722  9 attr_name 1 3633  6 assign 1 3631  
1135 14 Dtool_Ns0bRDE0 0 6 980 3723 0 14 Dtool_Ns0bRDE0 258 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length vector.
//////////////////////////////////////////////////////////////////// 0 
1136 14 Dtool_Ns0bOIMJ 0 6 981 3723 0 14 Dtool_Ns0bOIMJ 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X vector.
//////////////////////////////////////////////////////////////////// 0 
1137 14 Dtool_Ns0bOkFO 0 6 982 3723 0 14 Dtool_Ns0bOkFO 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y vector.
//////////////////////////////////////////////////////////////////// 0 
1138 14 Dtool_Ns0bOA9S 0 6 983 3723 0 14 Dtool_Ns0bOA9S 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z vector.
//////////////////////////////////////////////////////////////////// 0 
1139 14 Dtool_Ns0bOsUE 0 6 984 3723 0 14 Dtool_Ns0bOsUE 255 ////////////////////////////////////////////////////////////////////
//     Function: LVector4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W vector.
//////////////////////////////////////////////////////////////////// 0 
1140 14 Dtool_Ns0bRPAV 0 7 985 3722 3013 14 Dtool_Ns0bRPAV 0 1 4 this 3 3723  
1141 14 Dtool_Ns0bK796 0 7 986 3710 2893 14 Dtool_Ns0bK796 0 2 4 this 3 3723  5 other 1 3711  
1142 14 Dtool_Ns0bDuRX 0 7 986 3722 3013 14 Dtool_Ns0bDuRX 0 2 4 this 3 3723  5 other 1 3723  
1143 14 Dtool_Ns0bq_k7 0 7 987 3710 2893 14 Dtool_Ns0bq_k7 0 2 4 this 3 3723  5 other 1 3711  
1144 14 Dtool_Ns0bjx2X 0 7 987 3722 3013 14 Dtool_Ns0bjx2X 0 2 4 this 3 3723  5 other 1 3723  
1145 14 Dtool_Ns0b8wf_ 0 7 988 3722 3013 14 Dtool_Ns0b8wf_ 0 2 4 this 3 3723  6 scalar 1 3634  
1146 14 Dtool_Ns0bNoBB 0 7 989 3722 3013 14 Dtool_Ns0bNoBB 0 2 4 this 3 3723  6 scalar 1 3634  
1147 14 Dtool_Ns0bQBS8 0 4 990 3630 0 14 Dtool_Ns0bQBS8 0 3 4 this 3 3723  3 out 1 3638  10 class_name 1 3633  
1148 14 Dtool_Ns0blfjl 0 7 991 3645 0 14 Dtool_Ns0blfjl 0 0 
1149 14 Dtool_Ns0bzUXk 0 7 994 3725 3031 14 Dtool_Ns0bzUXk 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1150 14 Dtool_Ns0b9aCs 0 7 994 3725 3031 14 Dtool_Ns0b9aCs 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3672  1 w 1 3628  
1151 14 Dtool_Ns0bSD57 0 7 994 3725 3031 14 Dtool_Ns0bSD57 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3699  
1152 14 Dtool_Ns0bCj8c 0 7 994 3725 3031 14 Dtool_Ns0bCj8c 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3628  
1153 14 Dtool_Ns0bzr8M 0 7 994 3725 3031 14 Dtool_Ns0bzr8M 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3628  1 y 1 3628  1 z 1 3628  1 w 1 3628  
1154 14 Dtool_Ns0bbZBR 0 6 995 3725 0 14 Dtool_Ns0bbZBR 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  4 copy 1 3699  
1155 14 Dtool_Ns0bqdAN 0 6 995 3725 0 14 Dtool_Ns0bqdAN 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3725  10 fill_value 1 3628  
1156 14 Dtool_Ns0bPNxP 0 6 996 3631 0 14 Dtool_Ns0bPNxP 0 2 4 this 3 3726  9 attr_name 1 3633  
1157 14 Dtool_Ns0bBOe3 0 6 997 3634 0 14 Dtool_Ns0bBOe3 0 3 4 this 3 3725  9 attr_name 1 3633  6 assign 1 3631  
1158 14 Dtool_Ns0bq1J6 0 6 998 3726 0 14 Dtool_Ns0bq1J6 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1159 14 Dtool_Ns0bC0yG 0 6 999 3726 0 14 Dtool_Ns0bC0yG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1160 14 Dtool_Ns0baH8G 0 6 1000 3726 0 14 Dtool_Ns0baH8G 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1161 14 Dtool_Ns0bSWGH 0 6 1001 3726 0 14 Dtool_Ns0bSWGH 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1162 14 Dtool_Ns0bKloG 0 6 1002 3726 0 14 Dtool_Ns0bKloG 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1163 14 Dtool_Ns0b0LJX 0 7 1003 3725 3031 14 Dtool_Ns0b0LJX 0 1 4 this 3 3726  
1164 14 Dtool_Ns0bIcoy 0 7 1004 3698 2731 14 Dtool_Ns0bIcoy 0 2 4 this 3 3726  5 other 1 3699  
1165 14 Dtool_Ns0bopEn 0 7 1004 3725 3031 14 Dtool_Ns0bopEn 0 2 4 this 3 3726  5 other 1 3717  
1166 14 Dtool_Ns0bMM2G 0 7 1005 3716 2978 14 Dtool_Ns0bMM2G 0 2 4 this 3 3726  5 other 1 3726  
1167 14 Dtool_Ns0bTupy 0 7 1005 3698 2731 14 Dtool_Ns0bTupy 0 2 4 this 3 3726  5 other 1 3699  
1168 14 Dtool_Ns0bXbFn 0 7 1005 3725 3031 14 Dtool_Ns0bXbFn 0 2 4 this 3 3726  5 other 1 3717  
1169 14 Dtool_Ns0bUdt9 0 7 1006 3725 3031 14 Dtool_Ns0bUdt9 0 2 4 this 3 3726  6 scalar 1 3628  
1170 14 Dtool_Ns0brXwd 0 7 1007 3725 3031 14 Dtool_Ns0brXwd 0 2 4 this 3 3726  6 scalar 1 3628  
1171 14 Dtool_Ns0bIt7R 0 7 1008 3725 3031 14 Dtool_Ns0bIt7R 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3726  4 onto 1 3699  
1172 14 Dtool_Ns0bFwQw 0 4 1009 3630 0 14 Dtool_Ns0bFwQw 0 3 4 this 3 3726  3 out 1 3638  10 class_name 1 3633  
1173 14 Dtool_Ns0bnbpV 0 7 1010 3645 0 14 Dtool_Ns0bnbpV 0 0 
1174 14 Dtool_Ns0btU0d 0 7 1013 3728 3049 14 Dtool_Ns0btU0d 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1175 14 Dtool_Ns0bzkRf 0 7 1013 3728 3049 14 Dtool_Ns0bzkRf 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3675  1 w 1 3649  
1176 14 Dtool_Ns0bJZW9 0 7 1013 3728 3049 14 Dtool_Ns0bJZW9 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3705  
1177 14 Dtool_Ns0b36e0 0 7 1013 3728 3049 14 Dtool_Ns0b36e0 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3649  
1178 14 Dtool_Ns0bCpeG 0 7 1013 3728 3049 14 Dtool_Ns0bCpeG 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3649  1 y 1 3649  1 z 1 3649  1 w 1 3649  
1179 14 Dtool_Ns0bYHeA 0 6 1014 3728 0 14 Dtool_Ns0bYHeA 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3728  4 copy 1 3705  
1180 14 Dtool_Ns0bMxVL 0 6 1014 3728 0 14 Dtool_Ns0bMxVL 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3728  10 fill_value 1 3649  
1181 14 Dtool_Ns0bONqB 0 6 1015 3631 0 14 Dtool_Ns0bONqB 0 2 4 this 3 3729  9 attr_name 1 3633  
1182 14 Dtool_Ns0beOXp 0 6 1016 3634 0 14 Dtool_Ns0beOXp 0 3 4 this 3 3728  9 attr_name 1 3633  6 assign 1 3631  
1183 14 Dtool_Ns0br1Cs 0 6 1017 3729 0 14 Dtool_Ns0br1Cs 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1184 14 Dtool_Ns0bA0r4 0 6 1018 3729 0 14 Dtool_Ns0bA0r4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1185 14 Dtool_Ns0bYH14 0 6 1019 3729 0 14 Dtool_Ns0bYH14 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1186 14 Dtool_Ns0bQW_4 0 6 1020 3729 0 14 Dtool_Ns0bQW_4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1187 14 Dtool_Ns0bIlh4 0 6 1021 3729 0 14 Dtool_Ns0bIlh4 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1188 14 Dtool_Ns0b1LCJ 0 7 1022 3728 3049 14 Dtool_Ns0b1LCJ 0 1 4 this 3 3729  
1189 14 Dtool_Ns0bLSFi 0 7 1023 3704 2812 14 Dtool_Ns0bLSFi 0 2 4 this 3 3729  5 other 1 3705  
1190 14 Dtool_Ns0bzh4Y 0 7 1023 3728 3049 14 Dtool_Ns0bzh4Y 0 2 4 this 3 3729  5 other 1 3720  
1191 14 Dtool_Ns0bxIuA 0 7 1024 3719 2996 14 Dtool_Ns0bxIuA 0 2 4 this 3 3729  5 other 1 3729  
1192 14 Dtool_Ns0bQcGi 0 7 1024 3704 2812 14 Dtool_Ns0bQcGi 0 2 4 this 3 3729  5 other 1 3705  
1193 14 Dtool_Ns0b0T5Y 0 7 1024 3728 3049 14 Dtool_Ns0b0T5Y 0 2 4 this 3 3729  5 other 1 3720  
1194 14 Dtool_Ns0bre_H 0 7 1025 3728 3049 14 Dtool_Ns0bre_H 0 2 4 this 3 3729  6 scalar 1 3649  
1195 14 Dtool_Ns0b6DAo 0 7 1026 3728 3049 14 Dtool_Ns0b6DAo 0 2 4 this 3 3729  6 scalar 1 3649  
1196 14 Dtool_Ns0bjtEi 0 7 1027 3728 3049 14 Dtool_Ns0bjtEi 388 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::project
//       Access: Published
//  Description: Returns a new vector representing the projection of
//               this vector onto another one.  The resulting vector
//               will be a scalar multiple of onto.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3729  4 onto 1 3705  
1197 14 Dtool_Ns0bEwJi 0 4 1028 3630 0 14 Dtool_Ns0bEwJi 0 3 4 this 3 3729  3 out 1 3638  10 class_name 1 3633  
1198 14 Dtool_Ns0bmbiH 0 7 1029 3645 0 14 Dtool_Ns0bmbiH 0 0 
1199 14 Dtool_Ns0b80Lu 0 7 1032 3731 3066 14 Dtool_Ns0b80Lu 224 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1200 14 Dtool_Ns0bwJp4 0 7 1032 3731 3066 14 Dtool_Ns0bwJp4 219 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 copy 1 3678  1 w 1 3634  
1201 14 Dtool_Ns0bnRtZ 0 7 1032 3731 3066 14 Dtool_Ns0bnRtZ 221 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3711  
1202 14 Dtool_Ns0bXc4G 0 7 1032 3731 3066 14 Dtool_Ns0bXc4G 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 10 fill_value 1 3634  
1203 14 Dtool_Ns0bl_bH 0 7 1032 3731 3066 14 Dtool_Ns0bl_bH 216 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 1 x 1 3634  1 y 1 3634  1 z 1 3634  1 w 1 3634  
1204 14 Dtool_Ns0bdC2J 0 6 1033 3731 0 14 Dtool_Ns0bdC2J 229 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3731  4 copy 1 3711  
1205 14 Dtool_Ns0bPC2t 0 6 1033 3731 0 14 Dtool_Ns0bPC2t 223 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::Copy Fill Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3731  10 fill_value 1 3634  
1206 14 Dtool_Ns0bNt7E 0 6 1034 3631 0 14 Dtool_Ns0bNt7E 0 2 4 this 3 3732  9 attr_name 1 3633  
1207 14 Dtool_Ns0bDuos 0 6 1035 3634 0 14 Dtool_Ns0bDuos 0 3 4 this 3 3731  9 attr_name 1 3633  6 assign 1 3631  
1208 14 Dtool_Ns0bkVTv 0 6 1036 3732 0 14 Dtool_Ns0bkVTv 256 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::zero Named Constructor
//       Access: Public
//  Description: Returns a zero-length point.
//////////////////////////////////////////////////////////////////// 0 
1209 14 Dtool_Ns0bDU97 0 6 1037 3732 0 14 Dtool_Ns0bDU97 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_x Named Constructor
//       Access: Public
//  Description: Returns a unit X point.
//////////////////////////////////////////////////////////////////// 0 
1210 14 Dtool_Ns0bbnG8 0 6 1038 3732 0 14 Dtool_Ns0bbnG8 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_y Named Constructor
//       Access: Public
//  Description: Returns a unit Y point.
//////////////////////////////////////////////////////////////////// 0 
1211 14 Dtool_Ns0bT2Q8 0 6 1039 3732 0 14 Dtool_Ns0bT2Q8 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_z Named Constructor
//       Access: Public
//  Description: Returns a unit Z point.
//////////////////////////////////////////////////////////////////// 0 
1212 14 Dtool_Ns0bLFz7 0 6 1040 3732 0 14 Dtool_Ns0bLFz7 253 ////////////////////////////////////////////////////////////////////
//     Function: LPoint4::unit_w Named Constructor
//       Access: Public
//  Description: Returns a unit W point.
//////////////////////////////////////////////////////////////////// 0 
1213 14 Dtool_Ns0bKrTM 0 7 1041 3731 3066 14 Dtool_Ns0bKrTM 0 1 4 this 3 3732  
1214 14 Dtool_Ns0bORdr 0 7 1042 3710 2893 14 Dtool_Ns0bORdr 0 2 4 this 3 3732  5 other 1 3711  
1215 14 Dtool_Ns0bw0Wc 0 7 1042 3731 3066 14 Dtool_Ns0bw0Wc 0 2 4 this 3 3732  5 other 1 3723  
1216 14 Dtool_Ns0bn_AQ 0 7 1043 3722 3013 14 Dtool_Ns0bn_AQ 0 2 4 this 3 3732  5 other 1 3732  
1217 14 Dtool_Ns0bVjer 0 7 1043 3710 2893 14 Dtool_Ns0bVjer 0 2 4 this 3 3732  5 other 1 3711  
1218 14 Dtool_Ns0b7mXc 0 7 1043 3731 3066 14 Dtool_Ns0b7mXc 0 2 4 this 3 3732  5 other 1 3723  
1219 14 Dtool_Ns0bwQn5 0 7 1044 3731 3066 14 Dtool_Ns0bwQn5 0 2 4 this 3 3732  6 scalar 1 3634  
1220 14 Dtool_Ns0beHpZ 0 7 1045 3731 3066 14 Dtool_Ns0beHpZ 0 2 4 this 3 3732  6 scalar 1 3634  
1221 14 Dtool_Ns0bDQal 0 4 1046 3630 0 14 Dtool_Ns0bDQal 0 3 4 this 3 3732  3 out 1 3638  10 class_name 1 3633  
1222 14 Dtool_Ns0bp70K 0 7 1047 3645 0 14 Dtool_Ns0bp70K 0 0 
1223 14 Dtool_Ns0bl0PU 0 7 1059 3734 3149 14 Dtool_Ns0bl0PU 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1224 14 Dtool_Ns0bsN2u 0 7 1059 3734 3149 14 Dtool_Ns0bsN2u 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3735  
1225 14 Dtool_Ns0bQz8c 0 7 1059 3734 3149 14 Dtool_Ns0bQz8c 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 3628  3 e01 1 3628  3 e02 1 3628  3 e10 1 3628  3 e11 1 3628  3 e12 1 3628  3 e20 1 3628  3 e21 1 3628  3 e22 1 3628  
1226 14 Dtool_Ns0bWGVN 0 6 1060 3734 0 14 Dtool_Ns0bWGVN 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1227 14 Dtool_Ns0bOZp_ 0 6 1060 3734 0 14 Dtool_Ns0bOZp_ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  10 fill_value 1 3628  
1228 14 Dtool_Ns0bxIaw 0 4 1061 3630 0 14 Dtool_Ns0bxIaw 0 2 4 this 3 3734  4 size 1 3629  
1229 14 Dtool_Ns0bXYgB 0 6 1064 3631 0 14 Dtool_Ns0bXYgB 0 1 4 this 3 3735  
1230 14 Dtool_Ns0bgH0z 0 4 1065 3630 0 14 Dtool_Ns0bgH0z 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  10 fill_value 1 3628  
1231 14 Dtool_Ns0bz3qU 0 4 1066 3630 0 14 Dtool_Ns0bz3qU 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 3734  3 e00 1 3628  3 e01 1 3628  3 e02 1 3628  3 e10 1 3628  3 e11 1 3628  3 e12 1 3628  3 e20 1 3628  3 e21 1 3628  3 e22 1 3628  
1232 14 Dtool_Ns0bN5w9 0 4 1067 3630 0 14 Dtool_Ns0bN5w9 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  3 row 1 3634  1 v 1 3626  
1233 14 Dtool_Ns0b55gf 0 4 1067 3630 0 14 Dtool_Ns0b55gf 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  3 row 1 3634  1 v 1 3672  
1234 14 Dtool_Ns0bvDEF 0 4 1068 3630 0 14 Dtool_Ns0bvDEF 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  3 col 1 3634  1 v 1 3626  
1235 14 Dtool_Ns0bac0m 0 4 1068 3630 0 14 Dtool_Ns0bac0m 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  3 col 1 3634  1 v 1 3672  
1236 14 Dtool_Ns0bdfDX 0 4 1069 3630 0 14 Dtool_Ns0bdfDX 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  10 result_vec 1 3671  3 row 1 3634  
1237 14 Dtool_Ns0bwROZ 0 7 1069 3671 2347 14 Dtool_Ns0bwROZ 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  3 row 1 3634  
1238 14 Dtool_Ns0bFuhg 0 7 1070 3671 2347 14 Dtool_Ns0bFuhg 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  3 col 1 3634  
1239 14 Dtool_Ns0b7qSI 0 7 1071 3625 2062 14 Dtool_Ns0b7qSI 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  3 row 1 3634  
1240 14 Dtool_Ns0bWJmP 0 7 1072 3625 2062 14 Dtool_Ns0bWJmP 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  3 col 1 3634  
1241 14 Dtool_Ns0bHBvR 0 4 1073 3630 0 14 Dtool_Ns0bHBvR 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  3 row 1 3634  3 col 1 3634  
1242 14 Dtool_Ns0b_Fgz 0 6 1073 3628 0 14 Dtool_Ns0b_Fgz 0 3 4 this 3 3735  3 row 1 3634  3 col 1 3634  
1243 14 Dtool_Ns0bn3T3 0 7 1074 3737 3070 14 Dtool_Ns0bn3T3 0 2 4 this 3 3734  1 i 1 3634  
1244 14 Dtool_Ns0bcUMI 0 7 1074 3738 3073 14 Dtool_Ns0bcUMI 0 2 4 this 3 3735  1 i 1 3634  
1245 14 Dtool_Ns0bkTdF 0 6 1075 3634 0 14 Dtool_Ns0bkTdF 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1246 14 Dtool_Ns0bR3pT 0 6 1076 3635 0 14 Dtool_Ns0bR3pT 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1247 14 Dtool_Ns0bmVeU 0 6 1077 3635 0 14 Dtool_Ns0bmVeU 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1248 14 Dtool_Ns0bH4Zy 0 6 1078 3628 0 14 Dtool_Ns0bH4Zy 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 row 1 3634  3 col 1 3634  
1249 14 Dtool_Ns0bl0_H 0 4 1079 3630 0 14 Dtool_Ns0bl0_H 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3734  3 row 1 3634  3 col 1 3634  5 value 1 3628  
1250 14 Dtool_Ns0bWvxR 0 4 1080 3630 0 14 Dtool_Ns0bWvxR 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1251 14 Dtool_Ns0bbMUR 0 6 1081 3634 0 14 Dtool_Ns0bbMUR 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1252 14 Dtool_Ns0bvhzu 0 6 1082 3635 0 14 Dtool_Ns0bvhzu 0 2 4 this 3 3735  5 other 1 3735  
1253 14 Dtool_Ns0bJQr_ 0 6 1083 3635 0 14 Dtool_Ns0bJQr_ 0 2 4 this 3 3735  5 other 1 3735  
1254 14 Dtool_Ns0bJhJ3 0 6 1084 3635 0 14 Dtool_Ns0bJhJ3 0 2 4 this 3 3735  5 other 1 3735  
1255 14 Dtool_Ns0bKM0m 0 6 1085 3634 0 14 Dtool_Ns0bKM0m 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3735  
1256 14 Dtool_Ns0bxCZj 0 6 1085 3634 0 14 Dtool_Ns0bxCZj 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 other 1 3735  9 threshold 1 3628  
1257 14 Dtool_Ns0bW4In 0 6 1086 3629 0 14 Dtool_Ns0bW4In 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1258 14 Dtool_Ns0bG8W5 0 6 1086 3629 0 14 Dtool_Ns0bG8W5 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  9 threshold 1 3628  
1259 14 Dtool_Ns0bpcnj 0 6 1087 3629 0 14 Dtool_Ns0bpcnj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  4 hash 1 3629  
1260 14 Dtool_Ns0bGmv2 0 6 1087 3629 0 14 Dtool_Ns0bGmv2 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  4 hash 1 3629  9 threshold 1 3628  
1261 14 Dtool_Ns0bHzw6 0 7 1088 3671 2347 14 Dtool_Ns0bHzw6 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3672  
1262 14 Dtool_Ns0bE0BQ 0 7 1089 3625 2062 14 Dtool_Ns0bE0BQ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3626  
1263 14 Dtool_Ns0bI3MJ 0 7 1090 3625 2062 14 Dtool_Ns0bI3MJ 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3626  
1264 14 Dtool_Ns0babOJ 0 7 1090 3671 2347 14 Dtool_Ns0babOJ 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3672  
1265 14 Dtool_Ns0bJ0pj 0 7 1091 3671 2347 14 Dtool_Ns0bJ0pj 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3672  
1266 14 Dtool_Ns0bBsdm 0 4 1092 3630 0 14 Dtool_Ns0bBsdm 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3671  
1267 14 Dtool_Ns0bWmBi 0 4 1093 3630 0 14 Dtool_Ns0bWmBi 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3625  
1268 14 Dtool_Ns0b3Y53 0 4 1094 3630 0 14 Dtool_Ns0b3Y53 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3625  
1269 14 Dtool_Ns0bV04n 0 4 1094 3630 0 14 Dtool_Ns0bV04n 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3671  
1270 14 Dtool_Ns0bYYwa 0 4 1095 3630 0 14 Dtool_Ns0bYYwa 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  1 v 1 3671  
1271 14 Dtool_Ns0bSR6_ 0 4 1096 3630 0 14 Dtool_Ns0bSR6_ 25 // this = other1 * other2 3 4 this 3 3734  6 other1 1 3735  6 other2 1 3735  
1272 14 Dtool_Ns0bPBTp 0 7 1097 3734 3149 14 Dtool_Ns0bPBTp 0 2 4 this 3 3735  5 other 1 3735  
1273 14 Dtool_Ns0bcFqV 0 7 1097 3734 3149 14 Dtool_Ns0bcFqV 0 2 4 this 3 3735  6 scalar 1 3628  
1274 14 Dtool_Ns0bMqMX 0 7 1098 3734 3149 14 Dtool_Ns0bMqMX 0 2 4 this 3 3735  6 scalar 1 3628  
1275 14 Dtool_Ns0bE0iA 0 6 1099 3734 0 14 Dtool_Ns0bE0iA 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1276 14 Dtool_Ns0bkIJB 0 6 1100 3734 0 14 Dtool_Ns0bkIJB 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1277 14 Dtool_Ns0b0XOA 0 6 1101 3734 0 14 Dtool_Ns0b0XOA 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1278 14 Dtool_Ns0bMH5p 0 6 1101 3734 0 14 Dtool_Ns0bMH5p 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  6 scalar 1 3628  
1279 14 Dtool_Ns0bc8ar 0 6 1102 3734 0 14 Dtool_Ns0bc8ar 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  6 scalar 1 3628  
1280 14 Dtool_Ns0bdt4i 0 4 1103 3630 0 14 Dtool_Ns0bdt4i 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1281 14 Dtool_Ns0b3zlL 0 6 1104 3628 0 14 Dtool_Ns0b3zlL 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3735  
1282 14 Dtool_Ns0blS3s 0 4 1105 3630 0 14 Dtool_Ns0blS3s 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1283 14 Dtool_Ns0b8Ojo 0 4 1106 3630 0 14 Dtool_Ns0b8Ojo 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3734  
1284 14 Dtool_Ns0bUKZ2 0 6 1107 3635 0 14 Dtool_Ns0bUKZ2 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1285 14 Dtool_Ns0bhuLY 0 6 1108 3635 0 14 Dtool_Ns0bhuLY 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3734  
1286 14 Dtool_Ns0bKfCp 0 6 1109 3635 0 14 Dtool_Ns0bKfCp 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3735  
1287 14 Dtool_Ns0bKD6t 0 6 1109 3635 0 14 Dtool_Ns0bKD6t 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 other 1 3739  
1288 14 Dtool_Ns0bq8vo 0 6 1110 3735 0 14 Dtool_Ns0bq8vo 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1289 14 Dtool_Ns0boByR 0 4 1111 3630 0 14 Dtool_Ns0boByR 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 trans 1 3626  
1290 14 Dtool_Ns0bd4J2 0 4 1112 3630 0 14 Dtool_Ns0bd4J2 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 angle 1 3628  
1291 14 Dtool_Ns0bPymL 0 4 1112 3630 0 14 Dtool_Ns0bPymL 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3734  5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1292 14 Dtool_Ns0bdiBV 0 4 1112 3630 0 14 Dtool_Ns0bdiBV 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  5 angle 1 3628  4 axis 1 3672  
1293 14 Dtool_Ns0bSAXQ 0 4 1113 3630 0 14 Dtool_Ns0bSAXQ 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 scale 1 3626  
1294 14 Dtool_Ns0bB2WI 0 4 1113 3630 0 14 Dtool_Ns0bB2WI 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 scale 1 3672  
1295 14 Dtool_Ns0b9Yv7 0 7 1114 3734 3149 14 Dtool_Ns0b9Yv7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3626  
1296 14 Dtool_Ns0b1aHR 0 7 1114 3734 3149 14 Dtool_Ns0b1aHR 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 3628  2 ty 1 3628  
1297 14 Dtool_Ns0bwS2A 0 7 1115 3734 3149 14 Dtool_Ns0bwS2A 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 3628  
1298 14 Dtool_Ns0bzgNZ 0 7 1115 3734 3149 14 Dtool_Ns0bzgNZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1299 14 Dtool_Ns0by0rv 0 7 1115 3734 3149 14 Dtool_Ns0by0rv 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3628  4 axis 1 3672  
1300 14 Dtool_Ns0bfF2k 0 7 1116 3734 3149 14 Dtool_Ns0bfF2k 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3626  
1301 14 Dtool_Ns0bNp4k 0 7 1116 3734 3149 14 Dtool_Ns0bNp4k 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3672  
1302 14 Dtool_Ns0bKKk6 0 7 1116 3734 3149 14 Dtool_Ns0bKKk6 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 3628  2 sy 1 3628  
1303 14 Dtool_Ns0bx6ng 0 7 1116 3734 3149 14 Dtool_Ns0bx6ng 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3628  2 sy 1 3628  2 sz 1 3628  
1304 14 Dtool_Ns0bA7ca 0 4 1117 3630 0 14 Dtool_Ns0bA7ca 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3734  5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1305 14 Dtool_Ns0biLqT 0 4 1117 3630 0 14 Dtool_Ns0biLqT 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  5 angle 1 3628  4 axis 1 3672  
1306 14 Dtool_Ns0bSl9G 0 7 1118 3734 3149 14 Dtool_Ns0bSl9G 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1307 14 Dtool_Ns0bif2Z 0 7 1118 3734 3149 14 Dtool_Ns0bif2Z 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3628  4 axis 1 3672  
1308 14 Dtool_Ns0b_oI_ 0 4 1119 3630 0 14 Dtool_Ns0b_oI_ 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  5 shear 1 3672  2 cs 1 3584  
1309 14 Dtool_Ns0b5pyk 0 4 1119 3630 0 14 Dtool_Ns0b5pyk 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  5 shear 1 3672  
1310 14 Dtool_Ns0b4aMC 0 7 1120 3734 3149 14 Dtool_Ns0b4aMC 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3672  2 cs 1 3584  
1311 14 Dtool_Ns0bKUWr 0 7 1120 3734 3149 14 Dtool_Ns0bKUWr 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3672  
1312 14 Dtool_Ns0biw5Z 0 7 1120 3734 3149 14 Dtool_Ns0biw5Z 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  2 cs 1 3584  
1313 14 Dtool_Ns0bwRFn 0 7 1120 3734 3149 14 Dtool_Ns0bwRFn 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  
1314 14 Dtool_Ns0bZjM_ 0 4 1121 3630 0 14 Dtool_Ns0bZjM_ 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3734  5 scale 1 3672  5 shear 1 3672  2 cs 1 3584  
1315 14 Dtool_Ns0bFn4k 0 4 1121 3630 0 14 Dtool_Ns0bFn4k 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3734  5 scale 1 3672  5 shear 1 3672  
1316 14 Dtool_Ns0baF0T 0 7 1122 3734 3149 14 Dtool_Ns0baF0T 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3672  5 shear 1 3672  2 cs 1 3584  
1317 14 Dtool_Ns0b_Jjt 0 7 1122 3734 3149 14 Dtool_Ns0b_Jjt 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3672  5 shear 1 3672  
1318 14 Dtool_Ns0biFf9 0 7 1122 3734 3149 14 Dtool_Ns0biFf9 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3628  2 sy 1 3628  2 sz 1 3628  4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  2 cs 1 3584  
1319 14 Dtool_Ns0bie6G 0 7 1122 3734 3149 14 Dtool_Ns0bie6G 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3628  2 sy 1 3628  2 sz 1 3628  4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  
1320 14 Dtool_Ns0bjv0p 0 6 1123 3735 0 14 Dtool_Ns0bjv0p 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3584  2 to 1 3584  
1321 14 Dtool_Ns0b5LZV 0 6 1124 3635 0 14 Dtool_Ns0b5LZV 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  5 other 1 3735  
1322 14 Dtool_Ns0bjSL6 0 6 1124 3635 0 14 Dtool_Ns0bjSL6 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  5 other 1 3735  9 threshold 1 3628  
1323 14 Dtool_Ns0bzE1n 0 4 1125 3630 0 14 Dtool_Ns0bzE1n 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  3 out 1 3638  
1324 14 Dtool_Ns0bxi6e 0 4 1126 3630 0 14 Dtool_Ns0bxi6e 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  3 out 1 3638  12 indent_level 1 3634  
1325 14 Dtool_Ns0bt5Vo 0 4 1126 3630 0 14 Dtool_Ns0bt5Vo 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  3 out 1 3638  
1326 14 Dtool_Ns0bf4Xq 0 4 1127 3630 0 14 Dtool_Ns0bf4Xq 0 3 4 this 3 3735  3 out 1 3638  10 class_name 1 3633  
1327 14 Dtool_Ns0bOVov 0 4 1128 3630 0 14 Dtool_Ns0bOVov 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  7 hashgen 1 3636  
1328 14 Dtool_Ns0bm__V 0 4 1128 3630 0 14 Dtool_Ns0bm__V 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3735  7 hashgen 1 3636  9 threshold 1 3628  
1329 14 Dtool_Ns0brNOZ 0 4 1129 3630 0 14 Dtool_Ns0brNOZ 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  11 destination 1 3640  
1330 14 Dtool_Ns0bhdF9 0 4 1130 3630 0 14 Dtool_Ns0bhdF9 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  4 scan 1 3642  
1331 14 Dtool_Ns0bZmJJ 0 4 1131 3630 0 14 Dtool_Ns0bZmJJ 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3735  11 destination 1 3640  
1332 14 Dtool_Ns0b4drJ 0 4 1132 3630 0 14 Dtool_Ns0b4drJ 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3734  6 source 1 3642  
1333 14 Dtool_Ns0bIXnT 0 7 1133 3645 0 14 Dtool_Ns0bIXnT 0 0 
1334 14 Dtool_Ns0bsICl 0 4 1051 3630 0 14 Dtool_Ns0bsICl 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3737  1 i 1 3634  
1335 14 Dtool_Ns0bUN1G 0 6 1051 3628 0 14 Dtool_Ns0bUN1G 0 2 4 this 3 3741  1 i 1 3634  
1336 14 Dtool_Ns0bg9AW 0 4 1052 3630 0 14 Dtool_Ns0bg9AW 0 3 4 this 3 3737  1 i 1 3634  1 v 1 3628  
1337 14 Dtool_Ns0bOlSB 0 6 1053 3634 0 14 Dtool_Ns0bOlSB 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1338 14 Dtool_Ns0bKWHJ 0 6 1056 3628 0 14 Dtool_Ns0bKWHJ 0 2 4 this 3 3743  1 i 1 3634  
1339 14 Dtool_Ns0bS_uX 0 6 1057 3634 0 14 Dtool_Ns0bS_uX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1340 14 Dtool_Ns0b0VSC 0 7 1147 3745 3244 14 Dtool_Ns0b0VSC 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1341 14 Dtool_Ns0bfs5c 0 7 1147 3745 3244 14 Dtool_Ns0bfs5c 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 3735  
1342 14 Dtool_Ns0b6_z9 0 7 1147 3745 3244 14 Dtool_Ns0b6_z9 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 3735  5 trans 1 3672  
1343 14 Dtool_Ns0bX354 0 7 1147 3745 3244 14 Dtool_Ns0bX354 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3739  
1344 14 Dtool_Ns0b2Ai0 0 7 1147 3745 3244 14 Dtool_Ns0b2Ai0 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3746  
1345 14 Dtool_Ns0bkfiq 0 7 1147 3745 3244 14 Dtool_Ns0bkfiq 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3628  3 e01 1 3628  3 e02 1 3628  3 e03 1 3628  3 e10 1 3628  3 e11 1 3628  3 e12 1 3628  3 e13 1 3628  3 e20 1 3628  3 e21 1 3628  3 e22 1 3628  3 e23 1 3628  3 e30 1 3628  3 e31 1 3628  3 e32 1 3628  3 e33 1 3628  
1346 14 Dtool_Ns0bkLb0 0 6 1148 3745 0 14 Dtool_Ns0bkLb0 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1347 14 Dtool_Ns0b2l3p 0 6 1148 3745 0 14 Dtool_Ns0b2l3p 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3746  
1348 14 Dtool_Ns0bJ5tl 0 6 1148 3745 0 14 Dtool_Ns0bJ5tl 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  10 fill_value 1 3628  
1349 14 Dtool_Ns0b2oeX 0 4 1149 3630 0 14 Dtool_Ns0b2oeX 0 2 4 this 3 3745  4 size 1 3629  
1350 14 Dtool_Ns0bX4ko 0 6 1152 3631 0 14 Dtool_Ns0bX4ko 0 1 4 this 3 3739  
1351 14 Dtool_Ns0bhn3a 0 4 1153 3630 0 14 Dtool_Ns0bhn3a 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  10 fill_value 1 3628  
1352 14 Dtool_Ns0bb_Gk 0 4 1154 3630 0 14 Dtool_Ns0bb_Gk 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3745  3 e00 1 3628  3 e01 1 3628  3 e02 1 3628  3 e03 1 3628  3 e10 1 3628  3 e11 1 3628  3 e12 1 3628  3 e13 1 3628  3 e20 1 3628  3 e21 1 3628  3 e22 1 3628  3 e23 1 3628  3 e30 1 3628  3 e31 1 3628  3 e32 1 3628  3 e33 1 3628  
1353 14 Dtool_Ns0bQITa 0 4 1155 3630 0 14 Dtool_Ns0bQITa 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  6 upper3 1 3735  
1354 14 Dtool_Ns0b1ZhQ 0 7 1156 3734 3149 14 Dtool_Ns0b1ZhQ 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1355 14 Dtool_Ns0b2ZkG 0 4 1157 3630 0 14 Dtool_Ns0b2ZkG 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  3 row 1 3634  1 v 1 3672  
1356 14 Dtool_Ns0blZUo 0 4 1157 3630 0 14 Dtool_Ns0blZUo 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  3 row 1 3634  1 v 1 3699  
1357 14 Dtool_Ns0bb83N 0 4 1158 3630 0 14 Dtool_Ns0bb83N 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  3 col 1 3634  1 v 1 3672  
1358 14 Dtool_Ns0b28nv 0 4 1158 3630 0 14 Dtool_Ns0b28nv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  3 col 1 3634  1 v 1 3699  
1359 14 Dtool_Ns0bn__u 0 4 1159 3630 0 14 Dtool_Ns0bn__u 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  10 result_vec 1 3698  3 row 1 3634  
1360 14 Dtool_Ns0bxxRA 0 7 1159 3698 2731 14 Dtool_Ns0bxxRA 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  3 row 1 3634  
1361 14 Dtool_Ns0bCOlH 0 7 1160 3698 2731 14 Dtool_Ns0bCOlH 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  3 col 1 3634  
1362 14 Dtool_Ns0bdF7x 0 4 1161 3630 0 14 Dtool_Ns0bdF7x 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  10 result_vec 1 3671  3 row 1 3634  
1363 14 Dtool_Ns0bJMW2 0 7 1161 3671 2347 14 Dtool_Ns0bJMW2 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  3 row 1 3634  
1364 14 Dtool_Ns0bkop9 0 7 1162 3671 2347 14 Dtool_Ns0bkop9 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  3 col 1 3634  
1365 14 Dtool_Ns0bHhy4 0 4 1163 3630 0 14 Dtool_Ns0bHhy4 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  3 row 1 3634  3 col 1 3634  
1366 14 Dtool_Ns0b_lka 0 6 1163 3628 0 14 Dtool_Ns0b_lka 0 3 4 this 3 3739  3 row 1 3634  3 col 1 3634  
1367 14 Dtool_Ns0bkXWe 0 7 1164 3748 3155 14 Dtool_Ns0bkXWe 0 2 4 this 3 3745  1 i 1 3634  
1368 14 Dtool_Ns0bc0Pv 0 7 1164 3749 3158 14 Dtool_Ns0bc0Pv 0 2 4 this 3 3739  1 i 1 3634  
1369 14 Dtool_Ns0bkzgs 0 6 1165 3634 0 14 Dtool_Ns0bkzgs 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1370 14 Dtool_Ns0bRXs6 0 6 1166 3635 0 14 Dtool_Ns0bRXs6 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1371 14 Dtool_Ns0bm1h7 0 6 1167 3635 0 14 Dtool_Ns0bm1h7 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1372 14 Dtool_Ns0bGYcZ 0 6 1168 3628 0 14 Dtool_Ns0bGYcZ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  3 row 1 3634  3 col 1 3634  
1373 14 Dtool_Ns0blUBv 0 4 1169 3630 0 14 Dtool_Ns0blUBv 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3745  3 row 1 3634  3 col 1 3634  5 value 1 3628  
1374 14 Dtool_Ns0bWP14 0 4 1170 3630 0 14 Dtool_Ns0bWP14 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1375 14 Dtool_Ns0bbsX4 0 6 1171 3634 0 14 Dtool_Ns0bbsX4 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1376 14 Dtool_Ns0bKK3S 0 4 1172 3630 0 14 Dtool_Ns0bKK3S 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1377 14 Dtool_Ns0bBQDa 0 4 1172 3630 0 14 Dtool_Ns0bBQDa 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1378 14 Dtool_Ns0bm_kL 0 4 1173 3630 0 14 Dtool_Ns0bm_kL 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1379 14 Dtool_Ns0bgxNr 0 4 1173 3630 0 14 Dtool_Ns0bgxNr 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1380 14 Dtool_Ns0b8l5V 0 6 1174 3635 0 14 Dtool_Ns0b8l5V 0 2 4 this 3 3739  5 other 1 3739  
1381 14 Dtool_Ns0bI59n 0 6 1175 3635 0 14 Dtool_Ns0bI59n 0 2 4 this 3 3739  5 other 1 3739  
1382 14 Dtool_Ns0bIOaf 0 6 1176 3635 0 14 Dtool_Ns0bIOaf 0 2 4 this 3 3739  5 other 1 3739  
1383 14 Dtool_Ns0bzB6N 0 6 1177 3634 0 14 Dtool_Ns0bzB6N 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  5 other 1 3739  
1384 14 Dtool_Ns0bmOfK 0 6 1177 3634 0 14 Dtool_Ns0bmOfK 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  5 other 1 3739  9 threshold 1 3628  
1385 14 Dtool_Ns0bVYMO 0 6 1178 3629 0 14 Dtool_Ns0bVYMO 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3739  
1386 14 Dtool_Ns0bFcZg 0 6 1178 3629 0 14 Dtool_Ns0bFcZg 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  9 threshold 1 3628  
1387 14 Dtool_Ns0bo8oK 0 6 1179 3629 0 14 Dtool_Ns0bo8oK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  4 hash 1 3629  
1388 14 Dtool_Ns0bJGyd 0 6 1179 3629 0 14 Dtool_Ns0bJGyd 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  4 hash 1 3629  9 threshold 1 3628  
1389 14 Dtool_Ns0bmWbi 0 7 1180 3698 2731 14 Dtool_Ns0bmWbi 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3699  
1390 14 Dtool_Ns0bF0Ie 0 7 1181 3671 2347 14 Dtool_Ns0bF0Ie 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3672  
1391 14 Dtool_Ns0bSxet 0 7 1182 3671 2347 14 Dtool_Ns0bSxet 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3672  
1392 14 Dtool_Ns0ba7Sw 0 7 1183 3671 2347 14 Dtool_Ns0ba7Sw 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3672  
1393 14 Dtool_Ns0bIUtK 0 7 1184 3671 2347 14 Dtool_Ns0bIUtK 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3672  
1394 14 Dtool_Ns0buEmN 0 4 1185 3630 0 14 Dtool_Ns0buEmN 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3698  
1395 14 Dtool_Ns0bXa9N 0 4 1186 3630 0 14 Dtool_Ns0bXa9N 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3671  
1396 14 Dtool_Ns0b9QYo 0 4 1187 3630 0 14 Dtool_Ns0b9QYo 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3671  
1397 14 Dtool_Ns0bUU8O 0 4 1188 3630 0 14 Dtool_Ns0bUU8O 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3671  
1398 14 Dtool_Ns0bf4zB 0 4 1189 3630 0 14 Dtool_Ns0bf4zB 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  1 v 1 3671  
1399 14 Dtool_Ns0bcv3G 0 4 1190 3630 0 14 Dtool_Ns0bcv3G 25 // this = other1 * other2 3 4 this 3 3745  6 other1 1 3739  6 other2 1 3739  
1400 14 Dtool_Ns0bcFZQ 0 7 1191 3745 3244 14 Dtool_Ns0bcFZQ 0 2 4 this 3 3739  5 other 1 3739  
1401 14 Dtool_Ns0bclu8 0 7 1191 3745 3244 14 Dtool_Ns0bclu8 0 2 4 this 3 3739  6 scalar 1 3628  
1402 14 Dtool_Ns0bMKP_ 0 7 1192 3745 3244 14 Dtool_Ns0bMKP_ 0 2 4 this 3 3739  6 scalar 1 3628  
1403 14 Dtool_Ns0bEv0o 0 6 1193 3745 0 14 Dtool_Ns0bEv0o 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1404 14 Dtool_Ns0bkjbp 0 6 1194 3745 0 14 Dtool_Ns0bkjbp 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1405 14 Dtool_Ns0b0Ogo 0 6 1195 3745 0 14 Dtool_Ns0b0Ogo 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1406 14 Dtool_Ns0bNn8Q 0 6 1195 3745 0 14 Dtool_Ns0bNn8Q 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  6 scalar 1 3628  
1407 14 Dtool_Ns0bdceS 0 6 1196 3745 0 14 Dtool_Ns0bdceS 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  6 scalar 1 3628  
1408 14 Dtool_Ns0blNcN 0 4 1197 3630 0 14 Dtool_Ns0blNcN 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1409 14 Dtool_Ns0brI6L 0 4 1198 3630 0 14 Dtool_Ns0brI6L 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1410 14 Dtool_Ns0b9umP 0 4 1199 3630 0 14 Dtool_Ns0b9umP 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1411 14 Dtool_Ns0bVtqe 0 6 1200 3635 0 14 Dtool_Ns0bVtqe 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 other 1 3739  
1412 14 Dtool_Ns0bKvHn 0 6 1201 3635 0 14 Dtool_Ns0bKvHn 149 // bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 3745  5 other 1 3739  
1413 14 Dtool_Ns0bhOP_ 0 6 1202 3635 0 14 Dtool_Ns0bhOP_ 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3745  
1414 14 Dtool_Ns0bWTTf 0 4 1203 3630 0 14 Dtool_Ns0bWTTf 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  5 other 1 3739  6 weight 1 3628  
1415 14 Dtool_Ns0brczP 0 6 1204 3739 0 14 Dtool_Ns0brczP 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1416 14 Dtool_Ns0bmxV_ 0 6 1205 3739 0 14 Dtool_Ns0bmxV_ 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1417 14 Dtool_Ns0bLEvk 0 6 1206 3739 0 14 Dtool_Ns0bLEvk 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1418 14 Dtool_Ns0bTiW8 0 4 1207 3630 0 14 Dtool_Ns0bTiW8 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 trans 1 3672  
1419 14 Dtool_Ns0bPSpy 0 4 1208 3630 0 14 Dtool_Ns0bPSpy 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3745  5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1420 14 Dtool_Ns0bdCF8 0 4 1208 3630 0 14 Dtool_Ns0bdCF8 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  5 angle 1 3628  4 axis 1 3672  
1421 14 Dtool_Ns0bBbgB 0 4 1209 3630 0 14 Dtool_Ns0bBbgB 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3745  5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1422 14 Dtool_Ns0biru6 0 4 1209 3630 0 14 Dtool_Ns0biru6 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  5 angle 1 3628  4 axis 1 3672  
1423 14 Dtool_Ns0bBWav 0 4 1210 3630 0 14 Dtool_Ns0bBWav 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 scale 1 3672  
1424 14 Dtool_Ns0b_IMl 0 4 1211 3630 0 14 Dtool_Ns0b_IMl 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  5 shear 1 3672  2 cs 1 3584  
1425 14 Dtool_Ns0b6J2L 0 4 1211 3630 0 14 Dtool_Ns0b6J2L 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  5 shear 1 3672  
1426 14 Dtool_Ns0baDQm 0 4 1212 3630 0 14 Dtool_Ns0baDQm 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3745  5 scale 1 3672  5 shear 1 3672  2 cs 1 3584  
1427 14 Dtool_Ns0bCH7L 0 4 1212 3630 0 14 Dtool_Ns0bCH7L 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3745  5 scale 1 3672  5 shear 1 3672  
1428 14 Dtool_Ns0bjyza 0 7 1213 3745 3244 14 Dtool_Ns0bjyza 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3672  
1429 14 Dtool_Ns0bQ9hS 0 7 1213 3745 3244 14 Dtool_Ns0bQ9hS 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 3628  2 ty 1 3628  2 tz 1 3628  
1430 14 Dtool_Ns0b8AQA 0 7 1214 3745 3244 14 Dtool_Ns0b8AQA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1431 14 Dtool_Ns0bzUuW 0 7 1214 3745 3244 14 Dtool_Ns0bzUuW 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3628  4 axis 1 3672  
1432 14 Dtool_Ns0bSFBu 0 7 1215 3745 3244 14 Dtool_Ns0bSFBu 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3628  4 axis 1 3672  2 cs 1 3584  
1433 14 Dtool_Ns0bl_5A 0 7 1215 3745 3244 14 Dtool_Ns0bl_5A 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3628  4 axis 1 3672  
1434 14 Dtool_Ns0bOJ8L 0 7 1216 3745 3244 14 Dtool_Ns0bOJ8L 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3672  
1435 14 Dtool_Ns0bgj9H 0 7 1216 3745 3244 14 Dtool_Ns0bgj9H 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3628  
1436 14 Dtool_Ns0bwaqH 0 7 1216 3745 3244 14 Dtool_Ns0bwaqH 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3628  2 sy 1 3628  2 sz 1 3628  
1437 14 Dtool_Ns0b46Pp 0 7 1217 3745 3244 14 Dtool_Ns0b46Pp 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3672  2 cs 1 3584  
1438 14 Dtool_Ns0bJ0aS 0 7 1217 3745 3244 14 Dtool_Ns0bJ0aS 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3672  
1439 14 Dtool_Ns0blQ9A 0 7 1217 3745 3244 14 Dtool_Ns0blQ9A 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  2 cs 1 3584  
1440 14 Dtool_Ns0bxxJO 0 7 1217 3745 3244 14 Dtool_Ns0bxxJO 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  
1441 14 Dtool_Ns0bal56 0 7 1218 3745 3244 14 Dtool_Ns0bal56 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3672  5 shear 1 3672  2 cs 1 3584  
1442 14 Dtool_Ns0bgpnU 0 7 1218 3745 3244 14 Dtool_Ns0bgpnU 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3672  5 shear 1 3672  
1443 14 Dtool_Ns0b9lik 0 7 1218 3745 3244 14 Dtool_Ns0b9lik 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3628  2 sy 1 3628  2 sz 1 3628  4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  2 cs 1 3584  
1444 14 Dtool_Ns0bi__t 0 7 1218 3745 3244 14 Dtool_Ns0bi__t 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3628  2 sy 1 3628  2 sz 1 3628  4 shxy 1 3628  4 shxz 1 3628  4 shyz 1 3628  
1445 14 Dtool_Ns0blIST 0 6 1219 3739 0 14 Dtool_Ns0blIST 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1446 14 Dtool_Ns0blG2Q 0 6 1220 3739 0 14 Dtool_Ns0blG2Q 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1447 14 Dtool_Ns0bgP4Q 0 6 1221 3739 0 14 Dtool_Ns0bgP4Q 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3584  2 to 1 3584  
1448 14 Dtool_Ns0b4Lgj 0 6 1222 3635 0 14 Dtool_Ns0b4Lgj 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  5 other 1 3739  
1449 14 Dtool_Ns0b9SSI 0 6 1222 3635 0 14 Dtool_Ns0b9SSI 452 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  5 other 1 3739  9 threshold 1 3628  
1450 14 Dtool_Ns0b0k4O 0 4 1223 3630 0 14 Dtool_Ns0b0k4O 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  3 out 1 3638  
1451 14 Dtool_Ns0bwC_F 0 4 1224 3630 0 14 Dtool_Ns0bwC_F 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  3 out 1 3638  12 indent_level 1 3634  
1452 14 Dtool_Ns0bsZZP 0 4 1224 3630 0 14 Dtool_Ns0bsZZP 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  3 out 1 3638  
1453 14 Dtool_Ns0beYaR 0 4 1225 3630 0 14 Dtool_Ns0beYaR 0 3 4 this 3 3739  3 out 1 3638  10 class_name 1 3633  
1454 14 Dtool_Ns0bJ1rW 0 4 1226 3630 0 14 Dtool_Ns0bJ1rW 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  7 hashgen 1 3636  
1455 14 Dtool_Ns0bmfB9 0 4 1226 3630 0 14 Dtool_Ns0bmfB9 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3739  7 hashgen 1 3636  5 scale 1 3628  
1456 14 Dtool_Ns0bstRA 0 4 1227 3630 0 14 Dtool_Ns0bstRA 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  11 destination 1 3640  
1457 14 Dtool_Ns0bg9Jk 0 4 1228 3630 0 14 Dtool_Ns0bg9Jk 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  4 scan 1 3642  
1458 14 Dtool_Ns0bZGNw 0 4 1229 3630 0 14 Dtool_Ns0bZGNw 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3739  11 destination 1 3640  
1459 14 Dtool_Ns0b49vw 0 4 1230 3630 0 14 Dtool_Ns0b49vw 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3745  6 source 1 3642  
1460 14 Dtool_Ns0bI3r6 0 7 1231 3645 0 14 Dtool_Ns0bI3r6 0 0 
1461 14 Dtool_Ns0broGM 0 4 1139 3630 0 14 Dtool_Ns0broGM 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3748  1 i 1 3634  
1462 14 Dtool_Ns0bUt2t 0 6 1139 3628 0 14 Dtool_Ns0bUt2t 0 2 4 this 3 3750  1 i 1 3634  
1463 14 Dtool_Ns0bgdD9 0 4 1140 3630 0 14 Dtool_Ns0bgdD9 0 3 4 this 3 3748  1 i 1 3634  1 v 1 3628  
1464 14 Dtool_Ns0bOFWo 0 6 1141 3634 0 14 Dtool_Ns0bOFWo 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1465 14 Dtool_Ns0bK2Kw 0 6 1144 3628 0 14 Dtool_Ns0bK2Kw 0 2 4 this 3 3752  1 i 1 3634  
1466 14 Dtool_Ns0bSfy_ 0 6 1145 3634 0 14 Dtool_Ns0bSfy_ 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1467 14 Dtool_Ns0bcyhV 0 7 1234 3754 3252 14 Dtool_Ns0bcyhV 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1468 14 Dtool_Ns0b7kWw 0 7 1234 3754 3252 14 Dtool_Ns0b7kWw 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3739  
1469 14 Dtool_Ns0bFuRt 0 7 1234 3754 3252 14 Dtool_Ns0bFuRt 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3746  
1470 14 Dtool_Ns0bS52S 0 7 1234 3754 3252 14 Dtool_Ns0bS52S 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3628  3 e01 1 3628  3 e02 1 3628  3 e03 1 3628  3 e10 1 3628  3 e11 1 3628  3 e12 1 3628  3 e13 1 3628  3 e20 1 3628  3 e21 1 3628  3 e22 1 3628  3 e23 1 3628  3 e30 1 3628  3 e31 1 3628  3 e32 1 3628  3 e33 1 3628  
1471 14 Dtool_Ns0bs_r9 0 6 1235 3754 0 14 Dtool_Ns0bs_r9 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3754  4 copy 1 3739  
1472 14 Dtool_Ns0bdaVs 0 6 1235 3754 0 14 Dtool_Ns0bdaVs 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3754  4 copy 1 3746  
1473 14 Dtool_Ns0bkKYz 0 4 1236 3630 0 14 Dtool_Ns0bkKYz 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3754  3 e00 1 3628  3 e01 1 3628  3 e02 1 3628  3 e03 1 3628  3 e10 1 3628  3 e11 1 3628  3 e12 1 3628  3 e13 1 3628  3 e20 1 3628  3 e21 1 3628  3 e22 1 3628  3 e23 1 3628  3 e30 1 3628  3 e31 1 3628  3 e32 1 3628  3 e33 1 3628  
1474 14 Dtool_Ns0biXNG 0 4 1237 3630 0 14 Dtool_Ns0biXNG 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3754  3 row 1 3634  3 col 1 3634  
1475 14 Dtool_Ns0b6Ka6 0 6 1237 3628 0 14 Dtool_Ns0b6Ka6 0 3 4 this 3 3746  3 row 1 3634  3 col 1 3634  
1476 14 Dtool_Ns0bk_OW 0 4 1238 3630 0 14 Dtool_Ns0bk_OW 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1477 14 Dtool_Ns0biJJW 0 6 1239 3634 0 14 Dtool_Ns0biJJW 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3746  
1478 14 Dtool_Ns0bX_d_ 0 7 1240 3645 0 14 Dtool_Ns0bX_d_ 0 0 
1479 14 Dtool_Ns0bHKtQ 0 7 1252 3755 3335 14 Dtool_Ns0bHKtQ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Default Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1480 14 Dtool_Ns0bgwPr 0 7 1252 3755 3335 14 Dtool_Ns0bgwPr 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3756  
1481 14 Dtool_Ns0b1oPv 0 7 1252 3755 3335 14 Dtool_Ns0b1oPv 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 9 3 e00 1 3649  3 e01 1 3649  3 e02 1 3649  3 e10 1 3649  3 e11 1 3649  3 e12 1 3649  3 e20 1 3649  3 e21 1 3649  3 e22 1 3649  
1482 14 Dtool_Ns0b9QZH 0 6 1253 3755 0 14 Dtool_Ns0b9QZH 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1483 14 Dtool_Ns0bByUJ 0 6 1253 3755 0 14 Dtool_Ns0bByUJ 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Fill Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  10 fill_value 1 3649  
1484 14 Dtool_Ns0beI6s 0 4 1254 3630 0 14 Dtool_Ns0beI6s 0 2 4 this 3 3755  4 size 1 3629  
1485 14 Dtool_Ns0bvZA_ 0 6 1257 3631 0 14 Dtool_Ns0bvZA_ 0 1 4 this 3 3756  
1486 14 Dtool_Ns0btMiW 0 4 1258 3630 0 14 Dtool_Ns0btMiW 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::fill
//       Access: Published
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  10 fill_value 1 3649  
1487 14 Dtool_Ns0bYSjO 0 4 1259 3630 0 14 Dtool_Ns0bYSjO 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 10 4 this 3 3755  3 e00 1 3649  3 e01 1 3649  3 e02 1 3649  3 e10 1 3649  3 e11 1 3649  3 e12 1 3649  3 e20 1 3649  3 e21 1 3649  3 e22 1 3649  
1488 14 Dtool_Ns0bMjRK 0 4 1260 3630 0 14 Dtool_Ns0bMjRK 329 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 row 1 3634  1 v 1 3647  
1489 14 Dtool_Ns0b7jBs 0 4 1260 3630 0 14 Dtool_Ns0b7jBs 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_row
//       Access: Published
//  Description: Replaces the indicated row of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 row 1 3634  1 v 1 3675  
1490 14 Dtool_Ns0bhFlR 0 4 1261 3630 0 14 Dtool_Ns0bhFlR 332 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 col 1 3634  1 v 1 3647  
1491 14 Dtool_Ns0bcGVz 0 4 1261 3630 0 14 Dtool_Ns0bcGVz 311 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_column
//       Access: Published
//  Description: Replaces the indicated column of the matrix from a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 col 1 3634  1 v 1 3675  
1492 14 Dtool_Ns0bFRjb 0 4 1262 3630 0 14 Dtool_Ns0bFRjb 301 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Stores the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  10 result_vec 1 3674  3 row 1 3634  
1493 14 Dtool_Ns0bpQuV 0 7 1262 3674 2420 14 Dtool_Ns0bpQuV 302 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  3 row 1 3634  
1494 14 Dtool_Ns0bqvBd 0 7 1263 3674 2420 14 Dtool_Ns0bqvBd 305 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               three-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  3 col 1 3634  
1495 14 Dtool_Ns0bCqyE 0 7 1264 3646 2125 14 Dtool_Ns0bCqyE 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_row2
//       Access: Published
//  Description: Returns the indicated row of the matrix as a
//               two-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  3 row 1 3634  
1496 14 Dtool_Ns0bxKGM 0 7 1265 3646 2125 14 Dtool_Ns0bxKGM 327 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_col2
//       Access: Published
//  Description: Returns the indicated column of the matrix as a
//               two-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  3 col 1 3634  
1497 14 Dtool_Ns0bYAPO 0 4 1266 3630 0 14 Dtool_Ns0bYAPO 226 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  3 row 1 3634  3 col 1 3634  
1498 14 Dtool_Ns0bnEAw 0 6 1266 3649 0 14 Dtool_Ns0bnEAw 0 3 4 this 3 3756  3 row 1 3634  3 col 1 3634  
1499 14 Dtool_Ns0b80zz 0 7 1267 3758 3256 14 Dtool_Ns0b80zz 0 2 4 this 3 3755  1 i 1 3634  
1500 14 Dtool_Ns0b1LsE 0 7 1267 3759 3259 14 Dtool_Ns0b1LsE 0 2 4 this 3 3756  1 i 1 3634  
1501 14 Dtool_Ns0bDT9B 0 6 1268 3634 0 14 Dtool_Ns0bDT9B 266 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::size
//       Access: Published, Static
//  Description: Returns 3: the number of rows of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1502 14 Dtool_Ns0bu3JQ 0 6 1269 3635 0 14 Dtool_Ns0bu3JQ 310 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_nan
//       Access: Published
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3756  
1503 14 Dtool_Ns0b5W_Q 0 6 1270 3635 0 14 Dtool_Ns0b5W_Q 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3756  
1504 14 Dtool_Ns0bu75u 0 6 1271 3649 0 14 Dtool_Ns0bu75u 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_cell
//       Access: Published
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  3 row 1 3634  3 col 1 3634  
1505 14 Dtool_Ns0bYWBO 0 4 1272 3630 0 14 Dtool_Ns0bYWBO 261 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::set_cell
//       Access: Published
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  3 row 1 3634  3 col 1 3634  5 value 1 3649  
1506 14 Dtool_Ns0btvRO 0 4 1273 3630 0 14 Dtool_Ns0btvRO 401 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3756  
1507 14 Dtool_Ns0bwP0N 0 6 1274 3634 0 14 Dtool_Ns0bwP0N 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, nine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3756  
1508 14 Dtool_Ns0bGv3o 0 6 1275 3635 0 14 Dtool_Ns0bGv3o 0 2 4 this 3 3756  5 other 1 3756  
1509 14 Dtool_Ns0bRREu 0 6 1276 3635 0 14 Dtool_Ns0bRREu 0 2 4 this 3 3756  5 other 1 3756  
1510 14 Dtool_Ns0bRgil 0 6 1277 3635 0 14 Dtool_Ns0bRgil 0 2 4 this 3 3756  5 other 1 3756  
1511 14 Dtool_Ns0bt_3g 0 6 1278 3634 0 14 Dtool_Ns0bt_3g 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  5 other 1 3756  
1512 14 Dtool_Ns0bSbnp 0 6 1278 3634 0 14 Dtool_Ns0bSbnp 504 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::compare_to
//       Access: Published
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  5 other 1 3756  9 threshold 1 3649  
1513 14 Dtool_Ns0bt7oj 0 6 1279 3629 0 14 Dtool_Ns0bt7oj 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3756  
1514 14 Dtool_Ns0bACnK 0 6 1279 3629 0 14 Dtool_Ns0bACnK 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::get_hash
//       Access: Published
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  9 threshold 1 3649  
1515 14 Dtool_Ns0bQfHg 0 6 1280 3629 0 14 Dtool_Ns0bQfHg 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  4 hash 1 3629  
1516 14 Dtool_Ns0be2a4 0 6 1280 3629 0 14 Dtool_Ns0be2a4 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::add_hash
//       Access: Published
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  4 hash 1 3629  9 threshold 1 3649  
1517 14 Dtool_Ns0buQNQ 0 7 1281 3674 2420 14 Dtool_Ns0buQNQ 256 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3675  
1518 14 Dtool_Ns0bS1BJ 0 7 1282 3646 2125 14 Dtool_Ns0bS1BJ 403 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3647  
1519 14 Dtool_Ns0bRGPD 0 7 1283 3646 2125 14 Dtool_Ns0bRGPD 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3647  
1520 14 Dtool_Ns0bDiSD 0 7 1283 3674 2420 14 Dtool_Ns0bDiSD 447 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec
//       Access: Published
//  Description: The matrix transforms a 3-component vector and
//               returns the result.  This assumes the matrix is an
//               orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3675  
1521 14 Dtool_Ns0bsKJA 0 7 1284 3674 2420 14 Dtool_Ns0bsKJA 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3675  
1522 14 Dtool_Ns0bqJFe 0 4 1285 3630 0 14 Dtool_Ns0bqJFe 265 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_in_place
//       Access: Published
//  Description: 3-component vector or point times matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3674  
1523 14 Dtool_Ns0bqhFm 0 4 1286 3630 0 14 Dtool_Ns0bqhFm 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_point_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3646  
1524 14 Dtool_Ns0bu6G0 0 4 1287 3630 0 14 Dtool_Ns0bu6G0 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 2-component vector (without
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3646  
1525 14 Dtool_Ns0bMVHk 0 4 1287 3630 0 14 Dtool_Ns0bMVHk 416 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector.  This
//               assumes the matrix is an orthonormal transform.
//
//               In practice, this is the same computation as xform().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3674  
1526 14 Dtool_Ns0bhQR7 0 4 1288 3630 0 14 Dtool_Ns0bhQR7 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::xform_vec_general_in_place
//       Access: Published
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  1 v 1 3674  
1527 14 Dtool_Ns0bZ5GD 0 4 1289 3630 0 14 Dtool_Ns0bZ5GD 25 // this = other1 * other2 3 4 this 3 3755  6 other1 1 3756  6 other2 1 3756  
1528 14 Dtool_Ns0bmPXj 0 7 1290 3755 3335 14 Dtool_Ns0bmPXj 0 2 4 this 3 3756  5 other 1 3756  
1529 14 Dtool_Ns0b_fQe 0 7 1290 3755 3335 14 Dtool_Ns0b_fQe 0 2 4 this 3 3756  6 scalar 1 3649  
1530 14 Dtool_Ns0bOoxf 0 7 1291 3755 3335 14 Dtool_Ns0bOoxf 0 2 4 this 3 3756  6 scalar 1 3649  
1531 14 Dtool_Ns0b_07u 0 6 1292 3755 0 14 Dtool_Ns0b_07u 278 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix += matrix
//       Access: Published
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1532 14 Dtool_Ns0bfIiv 0 6 1293 3755 0 14 Dtool_Ns0bfIiv 281 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix -= matrix
//       Access: Published
//  Description: Performs a memberwise subtraction between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1533 14 Dtool_Ns0bPXnu 0 6 1294 3755 0 14 Dtool_Ns0bPXnu 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= matrix
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1534 14 Dtool_Ns0bX0Qs 0 6 1294 3755 0 14 Dtool_Ns0bX0Qs 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix *= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  6 scalar 1 3649  
1535 14 Dtool_Ns0bndyt 0 6 1295 3755 0 14 Dtool_Ns0bndyt 254 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::matrix /= scalar
//       Access: Published
//  Description: Performs a memberwise scale.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  6 scalar 1 3649  
1536 14 Dtool_Ns0bxLY_ 0 4 1296 3630 0 14 Dtool_Ns0bxLY_ 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1537 14 Dtool_Ns0bsyFI 0 6 1297 3649 0 14 Dtool_Ns0bsyFI 259 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::determinant
//       Access: Published
//  Description: Returns the determinant of the matrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3756  
1538 14 Dtool_Ns0baONp 0 4 1298 3630 0 14 Dtool_Ns0baONp 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_from
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1539 14 Dtool_Ns0blPDl 0 4 1299 3630 0 14 Dtool_Ns0blPDl 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::transpose_in_place
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
1540 14 Dtool_Ns0bMJyk 0 6 1300 3635 0 14 Dtool_Ns0bMJyk 808 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_from
//       Access: Published
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1541 14 Dtool_Ns0bIurU 0 6 1301 3635 0 14 Dtool_Ns0bIurU 364 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_in_place
//       Access: Published
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3755  
1542 14 Dtool_Ns0bmeGt 0 6 1302 3635 0 14 Dtool_Ns0bmeGt 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3756  
1543 14 Dtool_Ns0bmC_x 0 6 1302 3635 0 14 Dtool_Ns0bmC_x 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::invert_transpose_from
//       Access: Published
//  Description: Simultaneously computes the inverse of the indicated
//               matrix, and then the transpose of that inverse.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 other 1 3760  
1544 14 Dtool_Ns0bD_Pl 0 6 1303 3756 0 14 Dtool_Ns0bD_Pl 391 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::ident_mat
//       Access: Published, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1545 14 Dtool_Ns0b9pSu 0 4 1304 3630 0 14 Dtool_Ns0b9pSu 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 trans 1 3647  
1546 14 Dtool_Ns0b9uiL 0 4 1305 3630 0 14 Dtool_Ns0b9uiL 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 angle 1 3649  
1547 14 Dtool_Ns0b58U8 0 4 1305 3630 0 14 Dtool_Ns0b58U8 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1548 14 Dtool_Ns0bHjMp 0 4 1305 3630 0 14 Dtool_Ns0bHjMp 368 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 angle 1 3649  4 axis 1 3675  
1549 14 Dtool_Ns0bhzuM 0 4 1306 3630 0 14 Dtool_Ns0bhzuM 320 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 scale 1 3647  
1550 14 Dtool_Ns0bwFvE 0 4 1306 3630 0 14 Dtool_Ns0bwFvE 322 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 scale 1 3675  
1551 14 Dtool_Ns0bcpG4 0 7 1307 3755 3335 14 Dtool_Ns0bcpG4 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3647  
1552 14 Dtool_Ns0bZis7 0 7 1307 3755 3335 14 Dtool_Ns0bZis7 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 2 tx 1 3649  2 ty 1 3649  
1553 14 Dtool_Ns0bB6hL 0 7 1308 3755 3335 14 Dtool_Ns0bB6hL 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise.
//////////////////////////////////////////////////////////////////// 1 5 angle 1 3649  
1554 14 Dtool_Ns0baFgZ 0 7 1308 3755 3335 14 Dtool_Ns0baFgZ 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1555 14 Dtool_Ns0bz6sm 0 7 1308 3755 3335 14 Dtool_Ns0bz6sm 348 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3649  4 axis 1 3675  
1556 14 Dtool_Ns0bkw5e 0 7 1309 3755 3335 14 Dtool_Ns0bkw5e 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3647  
1557 14 Dtool_Ns0b2c8e 0 7 1309 3755 3335 14 Dtool_Ns0b2c8e 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3675  
1558 14 Dtool_Ns0bKYtY 0 7 1309 3755 3335 14 Dtool_Ns0bKYtY 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the two axes.
//////////////////////////////////////////////////////////////////// 2 2 sx 1 3649  2 sy 1 3649  
1559 14 Dtool_Ns0bXTVN 0 7 1309 3755 3335 14 Dtool_Ns0bXTVN 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3649  2 sy 1 3649  2 sz 1 3649  
1560 14 Dtool_Ns0boZc9 0 4 1310 3630 0 14 Dtool_Ns0boZc9 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1561 14 Dtool_Ns0br2Hj 0 4 1310 3630 0 14 Dtool_Ns0br2Hj 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Published
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 angle 1 3649  4 axis 1 3675  
1562 14 Dtool_Ns0byh6r 0 7 1311 3755 3335 14 Dtool_Ns0byh6r 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1563 14 Dtool_Ns0bYlqF 0 7 1311 3755 3335 14 Dtool_Ns0bYlqF 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Published, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been normalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3649  4 axis 1 3675  
1564 14 Dtool_Ns0bf5e6 0 4 1312 3630 0 14 Dtool_Ns0bf5e6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 shear 1 3675  2 cs 1 3584  
1565 14 Dtool_Ns0ba_Ih 0 4 1312 3630 0 14 Dtool_Ns0ba_Ih 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  5 shear 1 3675  
1566 14 Dtool_Ns0bQoP8 0 7 1313 3755 3335 14 Dtool_Ns0bQoP8 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3675  2 cs 1 3584  
1567 14 Dtool_Ns0bxJal 0 7 1313 3755 3335 14 Dtool_Ns0bxJal 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3675  
1568 14 Dtool_Ns0b1tYK 0 7 1313 3755 3335 14 Dtool_Ns0b1tYK 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  2 cs 1 3584  
1569 14 Dtool_Ns0bn6zT 0 7 1313 3755 3335 14 Dtool_Ns0bn6zT 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  
1570 14 Dtool_Ns0bon65 0 4 1314 3630 0 14 Dtool_Ns0bon65 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3755  5 scale 1 3675  5 shear 1 3675  2 cs 1 3584  
1571 14 Dtool_Ns0b9Qnf 0 4 1314 3630 0 14 Dtool_Ns0b9Qnf 312 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Published
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3755  5 scale 1 3675  5 shear 1 3675  
1572 14 Dtool_Ns0bipF0 0 7 1315 3755 3335 14 Dtool_Ns0bipF0 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3675  5 shear 1 3675  2 cs 1 3584  
1573 14 Dtool_Ns0bEtzN 0 7 1315 3755 3335 14 Dtool_Ns0bEtzN 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3675  5 shear 1 3675  
1574 14 Dtool_Ns0berao 0 7 1315 3755 3335 14 Dtool_Ns0berao 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3649  2 sy 1 3649  2 sz 1 3649  4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  2 cs 1 3584  
1575 14 Dtool_Ns0bkqKC 0 7 1315 3755 3335 14 Dtool_Ns0bkqKC 309 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Published, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3649  2 sy 1 3649  2 sz 1 3649  4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  
1576 14 Dtool_Ns0b4uUm 0 6 1316 3756 0 14 Dtool_Ns0b4uUm 350 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Published, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3584  2 to 1 3584  
1577 14 Dtool_Ns0brIZO 0 6 1317 3635 0 14 Dtool_Ns0brIZO 342 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  5 other 1 3756  
1578 14 Dtool_Ns0bpOQZ 0 6 1317 3635 0 14 Dtool_Ns0bpOQZ 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::almost_equal
//       Access: Published
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  5 other 1 3756  9 threshold 1 3649  
1579 14 Dtool_Ns0bcEVk 0 4 1318 3630 0 14 Dtool_Ns0bcEVk 215 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  3 out 1 3638  
1580 14 Dtool_Ns0bIhab 0 4 1319 3630 0 14 Dtool_Ns0bIhab 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  3 out 1 3638  12 indent_level 1 3634  
1581 14 Dtool_Ns0bU41k 0 4 1319 3630 0 14 Dtool_Ns0bU41k 214 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  3 out 1 3638  
1582 14 Dtool_Ns0b253m 0 4 1320 3630 0 14 Dtool_Ns0b253m 0 3 4 this 3 3756  3 out 1 3638  10 class_name 1 3633  
1583 14 Dtool_Ns0bRKIs 0 4 1321 3630 0 14 Dtool_Ns0bRKIs 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  7 hashgen 1 3636  
1584 14 Dtool_Ns0bjVPD 0 4 1321 3630 0 14 Dtool_Ns0bjVPD 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::generate_hash
//       Access: Published
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3756  7 hashgen 1 3636  9 threshold 1 3649  
1585 14 Dtool_Ns0b0SuV 0 4 1322 3630 0 14 Dtool_Ns0b0SuV 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  11 destination 1 3640  
1586 14 Dtool_Ns0bYdl5 0 4 1323 3630 0 14 Dtool_Ns0bYdl5 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  4 scan 1 3642  
1587 14 Dtool_Ns0bAnpF 0 4 1324 3630 0 14 Dtool_Ns0bAnpF 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3756  11 destination 1 3640  
1588 14 Dtool_Ns0bTdLG 0 4 1325 3630 0 14 Dtool_Ns0bTdLG 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3755  6 source 1 3642  
1589 14 Dtool_Ns0bnXHQ 0 7 1326 3645 0 14 Dtool_Ns0bnXHQ 0 0 
1590 14 Dtool_Ns0bDIih 0 4 1244 3630 0 14 Dtool_Ns0bDIih 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3758  1 i 1 3634  
1591 14 Dtool_Ns0b7NVD 0 6 1244 3649 0 14 Dtool_Ns0b7NVD 0 2 4 this 3 3762  1 i 1 3634  
1592 14 Dtool_Ns0brNBq 0 4 1245 3630 0 14 Dtool_Ns0brNBq 0 3 4 this 3 3758  1 i 1 3634  1 v 1 3649  
1593 14 Dtool_Ns0bmly9 0 6 1246 3634 0 14 Dtool_Ns0bmly9 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::Row::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1594 14 Dtool_Ns0bjWnF 0 6 1249 3649 0 14 Dtool_Ns0bjWnF 0 2 4 this 3 3764  1 i 1 3634  
1595 14 Dtool_Ns0b98OU 0 6 1250 3634 0 14 Dtool_Ns0b98OU 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix3::CRow::size
//       Access: Published, Static
//  Description: Returns 3: the number of columns of a LMatrix3.
//////////////////////////////////////////////////////////////////// 0 
1596 14 Dtool_Ns0bVrx_ 0 7 1338 3766 3428 14 Dtool_Ns0bVrx_ 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1597 14 Dtool_Ns0bRSTZ 0 7 1338 3766 3428 14 Dtool_Ns0bRSTZ 228 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 upper3 1 3756  
1598 14 Dtool_Ns0by2xB 0 7 1338 3766 3428 14 Dtool_Ns0by2xB 245 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor, upper 3x3 plus translation
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 upper3 1 3756  5 trans 1 3675  
1599 14 Dtool_Ns0bpOT1 0 7 1338 3766 3428 14 Dtool_Ns0bpOT1 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3760  
1600 14 Dtool_Ns0baNAR 0 7 1338 3766 3428 14 Dtool_Ns0baNAR 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 5 other 1 3767  
1601 14 Dtool_Ns0bLfZS 0 7 1338 3766 3428 14 Dtool_Ns0bLfZS 217 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3649  3 e01 1 3649  3 e02 1 3649  3 e03 1 3649  3 e10 1 3649  3 e11 1 3649  3 e12 1 3649  3 e13 1 3649  3 e20 1 3649  3 e21 1 3649  3 e22 1 3649  3 e23 1 3649  3 e30 1 3649  3 e31 1 3649  3 e32 1 3649  3 e33 1 3649  
1602 14 Dtool_Ns0bPVfu 0 6 1339 3766 0 14 Dtool_Ns0bPVfu 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1603 14 Dtool_Ns0bPKEm 0 6 1339 3766 0 14 Dtool_Ns0bPKEm 233 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Copy Assignment Operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3767  
1604 14 Dtool_Ns0bBSXw 0 6 1339 3766 0 14 Dtool_Ns0bBSXw 230 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Fill Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  10 fill_value 1 3649  
1605 14 Dtool_Ns0bfo_T 0 4 1340 3630 0 14 Dtool_Ns0bfo_T 0 2 4 this 3 3766  4 size 1 3629  
1606 14 Dtool_Ns0bu5El 0 6 1343 3631 0 14 Dtool_Ns0bu5El 0 1 4 this 3 3760  
1607 14 Dtool_Ns0btsm9 0 4 1344 3630 0 14 Dtool_Ns0btsm9 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::fill
//       Access: Public
//  Description: Sets each element of the matrix to the indicated
//               fill_value.  This is of questionable value, but is
//               sometimes useful when initializing to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  10 fill_value 1 3649  
1608 14 Dtool_Ns0bE5Uz 0 4 1345 3630 0 14 Dtool_Ns0bE5Uz 209 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3766  3 e00 1 3649  3 e01 1 3649  3 e02 1 3649  3 e03 1 3649  3 e10 1 3649  3 e11 1 3649  3 e12 1 3649  3 e13 1 3649  3 e20 1 3649  3 e21 1 3649  3 e22 1 3649  3 e23 1 3649  3 e30 1 3649  3 e31 1 3649  3 e32 1 3649  3 e33 1 3649  
1609 14 Dtool_Ns0b4JsI 0 4 1346 3630 0 14 Dtool_Ns0b4JsI 247 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_upper_3
//       Access: Public
//  Description: Sets the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  6 upper3 1 3756  
1610 14 Dtool_Ns0bcZBN 0 7 1347 3755 3335 14 Dtool_Ns0bcZBN 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_upper_3
//       Access: Public
//  Description: Retrieves the upper 3x3 submatrix.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1611 14 Dtool_Ns0b4DFT 0 4 1348 3630 0 14 Dtool_Ns0b4DFT 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix with the
//               indicated 3-component vector, ignoring the last
//               column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  3 row 1 3634  1 v 1 3675  
1612 14 Dtool_Ns0bnD10 0 4 1348 3630 0 14 Dtool_Ns0bnD10 255 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_row
//       Access: Public
//  Description: Replaces the indicated row of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  3 row 1 3634  1 v 1 3705  
1613 14 Dtool_Ns0bdmWa 0 4 1349 3630 0 14 Dtool_Ns0bdmWa 353 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix with the
//               indicated 3-component vector, ignoring the last
//               row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  3 col 1 3634  1 v 1 3675  
1614 14 Dtool_Ns0bImG8 0 4 1349 3630 0 14 Dtool_Ns0bImG8 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_col
//       Access: Public
//  Description: Replaces the indicated column of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  3 col 1 3634  1 v 1 3705  
1615 14 Dtool_Ns0bPxez 0 4 1350 3630 0 14 Dtool_Ns0bPxez 294 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Stores the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  10 result_vec 1 3704  3 row 1 3634  
1616 14 Dtool_Ns0bpwx8 0 7 1350 3704 2812 14 Dtool_Ns0bpwx8 297 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row
//       Access: Public
//  Description: Retrieves the indicated row of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  3 row 1 3634  
1617 14 Dtool_Ns0brPFE 0 7 1351 3704 2812 14 Dtool_Ns0brPFE 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               4-component vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  3 col 1 3634  
1618 14 Dtool_Ns0beTWu 0 4 1352 3630 0 14 Dtool_Ns0beTWu 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Stores the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  10 result_vec 1 3674  3 row 1 3634  
1619 14 Dtool_Ns0bQL2y 0 7 1352 3674 2420 14 Dtool_Ns0bQL2y 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_row3
//       Access: Public
//  Description: Retrieves the row column of the matrix as a
//               3-component vector, ignoring the last column.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  3 row 1 3634  
1620 14 Dtool_Ns0b_pJ6 0 7 1353 3674 2420 14 Dtool_Ns0b_pJ6 324 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_col3
//       Access: Public
//  Description: Retrieves the indicated column of the matrix as a
//               3-component vector, ignoring the last row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  3 col 1 3634  
1621 14 Dtool_Ns0bYgS1 0 4 1354 3630 0 14 Dtool_Ns0bYgS1 223 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Indexing operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  3 row 1 3634  3 col 1 3634  
1622 14 Dtool_Ns0bgkEX 0 6 1354 3649 0 14 Dtool_Ns0bgkEX 0 3 4 this 3 3760  3 row 1 3634  3 col 1 3634  
1623 14 Dtool_Ns0b9U2a 0 7 1355 3769 3339 14 Dtool_Ns0b9U2a 0 2 4 this 3 3766  1 i 1 3634  
1624 14 Dtool_Ns0b1rvr 0 7 1355 3770 3342 14 Dtool_Ns0b1rvr 0 2 4 this 3 3760  1 i 1 3634  
1625 14 Dtool_Ns0bDzAp 0 6 1356 3634 0 14 Dtool_Ns0bDzAp 263 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::size
//       Access: Public, Static
//  Description: Returns 4: the number of rows of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1626 14 Dtool_Ns0buXM3 0 6 1357 3635 0 14 Dtool_Ns0buXM3 307 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_nan
//       Access: Public
//  Description: Returns true if any component of the matrix is
//               not-a-number, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1627 14 Dtool_Ns0b52B4 0 6 1358 3635 0 14 Dtool_Ns0b52B4 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::is_identity
//       Access: Public
//  Description: Returns true if this is (close enough to) the
//               identity matrix, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1628 14 Dtool_Ns0btb8V 0 6 1359 3649 0 14 Dtool_Ns0btb8V 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_cell
//       Access: Public
//  Description: Returns a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  3 row 1 3634  3 col 1 3634  
1629 14 Dtool_Ns0bY2F1 0 4 1360 3630 0 14 Dtool_Ns0bY2F1 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::set_cell
//       Access: Public
//  Description: Changes a particular element of the matrix.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3766  3 row 1 3634  3 col 1 3634  5 value 1 3649  
1630 14 Dtool_Ns0btPV1 0 4 1361 3630 0 14 Dtool_Ns0btPV1 398 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_data
//       Access: Public
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1631 14 Dtool_Ns0bwv30 0 6 1362 3634 0 14 Dtool_Ns0bwv30 274 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_num_components
//       Access: Public
//  Description: Returns the number of elements in the matrix, 16.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1632 14 Dtool_Ns0bjKXP 0 4 1363 3630 0 14 Dtool_Ns0bjKXP 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3766  
1633 14 Dtool_Ns0bmQjW 0 4 1363 3630 0 14 Dtool_Ns0bmQjW 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::begin
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1634 14 Dtool_Ns0bPBFI 0 4 1364 3630 0 14 Dtool_Ns0bPBFI 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3766  
1635 14 Dtool_Ns0b5wtn 0 4 1364 3630 0 14 Dtool_Ns0b5wtn 314 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::end
//       Access: Public
//  Description: Returns an iterator that may be used to traverse the
//               elements of the matrix, STL-style.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1636 14 Dtool_Ns0bXz9P 0 6 1365 3635 0 14 Dtool_Ns0bXz9P 0 2 4 this 3 3760  5 other 1 3760  
1637 14 Dtool_Ns0bQ4WW 0 6 1366 3635 0 14 Dtool_Ns0bQ4WW 0 2 4 this 3 3760  5 other 1 3760  
1638 14 Dtool_Ns0bQPzN 0 6 1367 3635 0 14 Dtool_Ns0bQPzN 0 2 4 this 3 3760  5 other 1 3760  
1639 14 Dtool_Ns0baz9H 0 6 1368 3634 0 14 Dtool_Ns0baz9H 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: This flavor of compare_to uses a default threshold
//               value based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  5 other 1 3760  
1640 14 Dtool_Ns0blGtQ 0 6 1368 3634 0 14 Dtool_Ns0blGtQ 501 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::compare_to
//       Access: Public
//  Description: Sorts matrices lexicographically, componentwise.
//               Returns a number less than 0 if this matrix sorts
//               before the other one, greater than zero if it sorts
//               after, 0 if they are equivalent (within the indicated
//               tolerance).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  5 other 1 3760  9 threshold 1 3649  
1641 14 Dtool_Ns0bsbsK 0 6 1369 3629 0 14 Dtool_Ns0bsbsK 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3760  
1642 14 Dtool_Ns0bAiqx 0 6 1369 3629 0 14 Dtool_Ns0bAiqx 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::get_hash
//       Access: Public
//  Description: Returns a suitable hash for phash_map.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  9 threshold 1 3649  
1643 14 Dtool_Ns0bT_IH 0 6 1370 3629 0 14 Dtool_Ns0bT_IH 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  4 hash 1 3629  
1644 14 Dtool_Ns0bdWef 0 6 1370 3629 0 14 Dtool_Ns0bdWef 253 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::add_hash
//       Access: Public
//  Description: Adds the vector into the running hash.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  4 hash 1 3629  9 threshold 1 3649  
1645 14 Dtool_Ns0bO133 0 7 1371 3704 2812 14 Dtool_Ns0bO133 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3705  
1646 14 Dtool_Ns0bT1IX 0 7 1372 3674 2420 14 Dtool_Ns0bT1IX 400 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result.  This
//               assumes the matrix is an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3675  
1647 14 Dtool_Ns0brmNg 0 7 1373 3674 2420 14 Dtool_Ns0brmNg 389 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3675  
1648 14 Dtool_Ns0bDCVq 0 7 1374 3674 2420 14 Dtool_Ns0bDCVq 402 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result.  This
//               assumes the matrix is an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3675  
1649 14 Dtool_Ns0bsqNn 0 7 1375 3674 2420 14 Dtool_Ns0bsqNn 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component) and returns the result, as a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3675  
1650 14 Dtool_Ns0bHhNF 0 4 1376 3630 0 14 Dtool_Ns0bHhNF 315 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_in_place
//       Access: Public
//  Description: 4-component vector or point times matrix.  This is a
//               fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3704  
1651 14 Dtool_Ns0brdBS 0 4 1377 3630 0 14 Dtool_Ns0brdBS 386 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component).  This assumes the matrix is
//               an affine transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3674  
1652 14 Dtool_Ns0bkWqj 0 4 1378 3630 0 14 Dtool_Ns0bkWqj 358 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_point_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component point (including
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3674  
1653 14 Dtool_Ns0bL1IL 0 4 1379 3630 0 14 Dtool_Ns0bL1IL 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component).  This assumes the matrix is
//               an orthonormal transform.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3674  
1654 14 Dtool_Ns0bgwSi 0 4 1380 3630 0 14 Dtool_Ns0bgwSi 355 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::xform_vec_general_in_place
//       Access: Public
//  Description: The matrix transforms a 3-component vector (without
//               translation component), as a fully general operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  1 v 1 3674  
1655 14 Dtool_Ns0bU8DL 0 4 1381 3630 0 14 Dtool_Ns0bU8DL 25 // this = other1 * other2 3 4 this 3 3766  6 other1 1 3760  6 other2 1 3760  
1656 14 Dtool_Ns0b3TdK 0 7 1382 3766 3428 14 Dtool_Ns0b3TdK 0 2 4 this 3 3760  5 other 1 3760  
1657 14 Dtool_Ns0b9_TF 0 7 1382 3766 3428 14 Dtool_Ns0b9_TF 0 2 4 this 3 3760  6 scalar 1 3649  
1658 14 Dtool_Ns0bNI1G 0 7 1383 3766 3428 14 Dtool_Ns0bNI1G 0 2 4 this 3 3760  6 scalar 1 3649  
1659 14 Dtool_Ns0b8vNX 0 6 1384 3766 0 14 Dtool_Ns0b8vNX 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix += matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1660 14 Dtool_Ns0bcj0X 0 6 1385 3766 0 14 Dtool_Ns0bcj0X 275 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix -= matrix
//       Access: Public
//  Description: Performs a memberwise addition between two matrices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1661 14 Dtool_Ns0bMO5W 0 6 1386 3766 0 14 Dtool_Ns0bMO5W 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1662 14 Dtool_Ns0bWUUT 0 6 1386 3766 0 14 Dtool_Ns0bWUUT 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix *= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  6 scalar 1 3649  
1663 14 Dtool_Ns0bm93U 0 6 1387 3766 0 14 Dtool_Ns0bm93U 222 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::matrix /= scalar
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  6 scalar 1 3649  
1664 14 Dtool_Ns0bZk8p 0 4 1388 3630 0 14 Dtool_Ns0bZk8p 227 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::componentwise_mult
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1665 14 Dtool_Ns0boYQI 0 4 1389 3630 0 14 Dtool_Ns0boYQI 220 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_from
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1666 14 Dtool_Ns0bivGM 0 4 1390 3630 0 14 Dtool_Ns0bivGM 224 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::transpose_in_place
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3766  
1667 14 Dtool_Ns0bNuDN 0 6 1391 3635 0 14 Dtool_Ns0bNuDN 803 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_from
//       Access: Public
//  Description: Computes the inverse of the other matrix, and stores
//               the result in this matrix.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the matrix.
//
//               The other matrix must be a different object than this
//               matrix.  However, if you need to invert a matrix in
//               place, see invert_in_place.
//
//               The return value is true if the matrix was
//               successfully inverted, false if the was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 other 1 3760  
1668 14 Dtool_Ns0bg2mD 0 6 1392 3635 0 14 Dtool_Ns0bg2mD 149 // bugbug: we could optimize this for rotation/scale/translation matrices
//         (transpose upper 3x3 and take negative of translation component) 2 4 this 3 3766  5 other 1 3760  
1669 14 Dtool_Ns0bIOv7 0 6 1393 3635 0 14 Dtool_Ns0bIOv7 361 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::invert_in_place
//       Access: Public
//  Description: Inverts the current matrix.  Returns true if the
//               inverse is successful, false if the matrix was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3766  
1670 14 Dtool_Ns0brA3w 0 4 1394 3630 0 14 Dtool_Ns0brA3w 252 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::accumulate
//       Access: Public
//  Description: Computes (*this) += other * weight.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  5 other 1 3760  6 weight 1 3649  
1671 14 Dtool_Ns0bAfTM 0 6 1395 3760 0 14 Dtool_Ns0bAfTM 388 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ident_mat
//       Access: Public, Static
//  Description: Returns an identity matrix.
//
//               This function definition must appear first, since
//               some inline functions below take advantage of it.
//////////////////////////////////////////////////////////////////// 0 
1672 14 Dtool_Ns0bNy16 0 6 1396 3760 0 14 Dtool_Ns0bNy16 258 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::ones_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with ones.
//////////////////////////////////////////////////////////////////// 0 
1673 14 Dtool_Ns0bQFPh 0 6 1397 3760 0 14 Dtool_Ns0bQFPh 260 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::zeros_mat
//       Access: Public, Static
//  Description: Returns an matrix filled with zeros.
//////////////////////////////////////////////////////////////////// 0 
1674 14 Dtool_Ns0blK2Y 0 4 1398 3630 0 14 Dtool_Ns0blK2Y 303 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_translate_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 trans 1 3675  
1675 14 Dtool_Ns0b4cXj 0 4 1399 3630 0 14 Dtool_Ns0b4cXj 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3766  5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1676 14 Dtool_Ns0bEDQQ 0 4 1399 3630 0 14 Dtool_Ns0bEDQQ 362 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat
//       Access: Public
//  Description: Sets mat to a matrix that rotates by the given angle
//               in degrees counterclockwise about the indicated
//               vector.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  5 angle 1 3649  4 axis 1 3675  
1677 14 Dtool_Ns0br5fk 0 4 1400 3630 0 14 Dtool_Ns0br5fk 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3766  5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1678 14 Dtool_Ns0bqWLK 0 4 1400 3630 0 14 Dtool_Ns0bqWLK 412 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_rotate_mat_normaxis
//       Access: Public
//  Description: Fills mat with a matrix that rotates by the given
//               angle in degrees counterclockwise about the indicated
//               vector.  Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  5 angle 1 3649  4 axis 1 3675  
1679 14 Dtool_Ns0bwlwr 0 4 1401 3630 0 14 Dtool_Ns0bwlwr 319 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 scale 1 3675  
1680 14 Dtool_Ns0bcZih 0 4 1402 3630 0 14 Dtool_Ns0bcZih 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  5 shear 1 3675  2 cs 1 3584  
1681 14 Dtool_Ns0bbfMI 0 4 1402 3630 0 14 Dtool_Ns0bbfMI 321 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_shear_mat
//       Access: Public
//  Description: Fills mat with a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  5 shear 1 3675  
1682 14 Dtool_Ns0bpH_g 0 4 1403 3630 0 14 Dtool_Ns0bpH_g 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3766  5 scale 1 3675  5 shear 1 3675  2 cs 1 3584  
1683 14 Dtool_Ns0b6wrG 0 4 1403 3630 0 14 Dtool_Ns0b6wrG 317 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::set_scale_shear_mat
//       Access: Public, Static
//  Description: Fills mat with a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3766  5 scale 1 3675  5 shear 1 3675  
1684 14 Dtool_Ns0bSDJX 0 7 1404 3766 3428 14 Dtool_Ns0bSDJX 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 1 5 trans 1 3675  
1685 14 Dtool_Ns0btfAu 0 7 1404 3766 3428 14 Dtool_Ns0btfAu 300 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::translate_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               translation.
//////////////////////////////////////////////////////////////////// 3 2 tx 1 3649  2 ty 1 3649  2 tz 1 3649  
1686 14 Dtool_Ns0bblkA 0 7 1405 3766 3428 14 Dtool_Ns0bblkA 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1687 14 Dtool_Ns0byawN 0 7 1405 3766 3428 14 Dtool_Ns0byawN 345 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3649  4 axis 1 3675  
1688 14 Dtool_Ns0b9B_S 0 7 1406 3766 3428 14 Dtool_Ns0b9B_S 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 3 5 angle 1 3649  4 axis 1 3675  2 cs 1 3584  
1689 14 Dtool_Ns0bYFts 0 7 1406 3766 3428 14 Dtool_Ns0bYFts 408 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::rotate_mat_normaxis
//       Access: Public, Static
//  Description: Returns a matrix that rotates by the given angle in
//               degrees counterclockwise about the indicated vector.
//               Assumes axis has been prenormalized.
//////////////////////////////////////////////////////////////////// 2 5 angle 1 3649  4 axis 1 3675  
1690 14 Dtool_Ns0b38_F 0 7 1407 3766 3428 14 Dtool_Ns0b38_F 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3675  
1691 14 Dtool_Ns0bH84Q 0 7 1407 3766 3428 14 Dtool_Ns0bH84Q 298 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               uniform scale.
//////////////////////////////////////////////////////////////////// 1 5 scale 1 3649  
1692 14 Dtool_Ns0bXzZ0 0 7 1407 3766 3428 14 Dtool_Ns0bXzZ0 316 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale in each of the three axes.
//////////////////////////////////////////////////////////////////// 3 2 sx 1 3649  2 sy 1 3649  2 sz 1 3649  
1693 14 Dtool_Ns0bfITj 0 7 1408 3766 3428 14 Dtool_Ns0bfITj 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 2 5 shear 1 3675  2 cs 1 3584  
1694 14 Dtool_Ns0bwpeM 0 7 1408 3766 3428 14 Dtool_Ns0bwpeM 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 1 5 shear 1 3675  
1695 14 Dtool_Ns0b1Nbx 0 7 1408 3766 3428 14 Dtool_Ns0b1Nbx 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 4 4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  2 cs 1 3584  
1696 14 Dtool_Ns0bna36 0 7 1408 3766 3428 14 Dtool_Ns0bna36 318 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               shear in each of the three planes.
//////////////////////////////////////////////////////////////////// 3 4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  
1697 14 Dtool_Ns0bjJJb 0 7 1409 3766 3428 14 Dtool_Ns0bjJJb 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 3 5 scale 1 3675  5 shear 1 3675  2 cs 1 3584  
1698 14 Dtool_Ns0bEN20 0 7 1409 3766 3428 14 Dtool_Ns0bEN20 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 2 5 scale 1 3675  5 shear 1 3675  
1699 14 Dtool_Ns0bfLeP 0 7 1409 3766 3428 14 Dtool_Ns0bfLeP 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 7 2 sx 1 3649  2 sy 1 3649  2 sz 1 3649  4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  2 cs 1 3584  
1700 14 Dtool_Ns0bkKNp 0 7 1409 3766 3428 14 Dtool_Ns0bkKNp 306 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::scale_shear_mat
//       Access: Public, Static
//  Description: Returns a matrix that applies the indicated
//               scale and shear.
//////////////////////////////////////////////////////////////////// 6 2 sx 1 3649  2 sy 1 3649  2 sz 1 3649  4 shxy 1 3649  4 shxz 1 3649  4 shyz 1 3649  
1701 14 Dtool_Ns0bMIyP 0 6 1410 3760 0 14 Dtool_Ns0bMIyP 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::y_to_z_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1702 14 Dtool_Ns0bMGWN 0 6 1411 3760 0 14 Dtool_Ns0bMGWN 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::z_to_y_up_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the Y-up
//               coordinate system to the Z-up coordinate system.
//////////////////////////////////////////////////////////////////// 0 
1703 14 Dtool_Ns0b5OYN 0 6 1412 3760 0 14 Dtool_Ns0b5OYN 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix::convert_mat
//       Access: Public, Static
//  Description: Returns a matrix that transforms from the indicated
//               coordinate system to the indicated coordinate system.
//////////////////////////////////////////////////////////////////// 2 4 from 1 3584  2 to 1 3584  
1704 14 Dtool_Ns0bqIgc 0 6 1413 3635 0 14 Dtool_Ns0bqIgc 339 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  5 other 1 3760  
1705 14 Dtool_Ns0boOXn 0 6 1413 3635 0 14 Dtool_Ns0boOXn 452 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::almost_equal
//       Access: Public
//  Description: Returns true if two matrices are memberwise equal
//               within a specified tolerance.  This is faster than
//               the equivalence operator as this doesn't have to
//               guarantee that it is transitive.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  5 other 1 3760  9 threshold 1 3649  
1706 14 Dtool_Ns0bdkYL 0 4 1414 3630 0 14 Dtool_Ns0bdkYL 212 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  3 out 1 3638  
1707 14 Dtool_Ns0bXBeC 0 4 1415 3630 0 14 Dtool_Ns0bXBeC 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  3 out 1 3638  12 indent_level 1 3634  
1708 14 Dtool_Ns0bXY5L 0 4 1415 3630 0 14 Dtool_Ns0bXY5L 211 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  3 out 1 3638  
1709 14 Dtool_Ns0b5Z6N 0 4 1416 3630 0 14 Dtool_Ns0b5Z6N 0 3 4 this 3 3760  3 out 1 3638  10 class_name 1 3633  
1710 14 Dtool_Ns0bQqLT 0 4 1417 3630 0 14 Dtool_Ns0bQqLT 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  7 hashgen 1 3636  
1711 14 Dtool_Ns0bj1Tq 0 4 1417 3630 0 14 Dtool_Ns0bj1Tq 268 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::generate_hash
//       Access: Public
//  Description: Adds the vector to the indicated hash generator.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3760  7 hashgen 1 3636  5 scale 1 3649  
1712 14 Dtool_Ns0b0yx8 0 4 1418 3630 0 14 Dtool_Ns0b0yx8 641 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram_fixed
//       Access: Published
//  Description: Writes the matrix to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the matrix, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  11 destination 1 3640  
1713 14 Dtool_Ns0bb9pg 0 4 1419 3630 0 14 Dtool_Ns0bb9pg 347 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram_fixed
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  4 scan 1 3642  
1714 14 Dtool_Ns0bAHts 0 4 1420 3630 0 14 Dtool_Ns0bAHts 463 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::write_datagram
//       Access: Published
//  Description: Writes the matrix to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the matrix using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3760  11 destination 1 3640  
1715 14 Dtool_Ns0bT9Pt 0 4 1421 3630 0 14 Dtool_Ns0bT9Pt 279 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::read_datagram
//       Access: Published
//  Description: Reads the matrix from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3766  6 source 1 3642  
1716 14 Dtool_Ns0bn3L3 0 7 1422 3645 0 14 Dtool_Ns0bn3L3 0 0 
1717 14 Dtool_Ns0bComI 0 4 1330 3630 0 14 Dtool_Ns0bComI 225 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::operator []
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3769  1 i 1 3634  
1718 14 Dtool_Ns0b7tWq 0 6 1330 3649 0 14 Dtool_Ns0b7tWq 0 2 4 this 3 3771  1 i 1 3634  
1719 14 Dtool_Ns0bstFR 0 4 1331 3630 0 14 Dtool_Ns0bstFR 0 3 4 this 3 3769  1 i 1 3634  1 v 1 3649  
1720 14 Dtool_Ns0blF2k 0 6 1332 3634 0 14 Dtool_Ns0blF2k 271 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::Row::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1721 14 Dtool_Ns0bj2qs 0 6 1335 3649 0 14 Dtool_Ns0bj2qs 0 2 4 this 3 3773  1 i 1 3634  
1722 14 Dtool_Ns0b9cS7 0 6 1336 3634 0 14 Dtool_Ns0b9cS7 272 ////////////////////////////////////////////////////////////////////
//     Function: LMatrix4::CRow::size
//       Access: Public, Static
//  Description: Returns 4: the number of columns of a LMatrix4.
//////////////////////////////////////////////////////////////////// 0 
1723 14 Dtool_Ns0bz1FW 0 7 1425 3775 3436 14 Dtool_Ns0bz1FW 234 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Default Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1724 14 Dtool_Ns0bGu6U 0 7 1425 3775 3436 14 Dtool_Ns0bGu6U 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3760  
1725 14 Dtool_Ns0b_vVq 0 7 1425 3775 3436 14 Dtool_Ns0b_vVq 231 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3767  
1726 14 Dtool_Ns0bF1Im 0 7 1425 3775 3436 14 Dtool_Ns0bF1Im 226 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 16 3 e00 1 3649  3 e01 1 3649  3 e02 1 3649  3 e03 1 3649  3 e10 1 3649  3 e11 1 3649  3 e12 1 3649  3 e13 1 3649  3 e20 1 3649  3 e21 1 3649  3 e22 1 3649  3 e23 1 3649  3 e30 1 3649  3 e31 1 3649  3 e32 1 3649  3 e33 1 3649  
1727 14 Dtool_Ns0b4c8E 0 6 1426 3775 0 14 Dtool_Ns0b4c8E 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3775  4 copy 1 3760  
1728 14 Dtool_Ns0byn3z 0 6 1426 3775 0 14 Dtool_Ns0byn3z 239 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3775  4 copy 1 3767  
1729 14 Dtool_Ns0bn_Mt 0 4 1427 3630 0 14 Dtool_Ns0bn_Mt 221 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::set
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 17 4 this 3 3775  3 e00 1 3649  3 e01 1 3649  3 e02 1 3649  3 e03 1 3649  3 e10 1 3649  3 e11 1 3649  3 e12 1 3649  3 e13 1 3649  3 e20 1 3649  3 e21 1 3649  3 e22 1 3649  3 e23 1 3649  3 e30 1 3649  3 e31 1 3649  3 e32 1 3649  3 e33 1 3649  
1730 14 Dtool_Ns0bnXxN 0 4 1428 3630 0 14 Dtool_Ns0bnXxN 235 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::Indexing operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 3775  3 row 1 3634  3 col 1 3634  
1731 14 Dtool_Ns0b_K_B 0 6 1428 3649 0 14 Dtool_Ns0b_K_B 0 3 4 this 3 3767  3 row 1 3634  3 col 1 3634  
1732 14 Dtool_Ns0bf_yd 0 4 1429 3630 0 14 Dtool_Ns0bf_yd 410 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_data
//       Access: Published
//  Description: Returns the address of the first of the nine data
//               elements in the matrix.  The remaining elements
//               occupy the next eight positions in row-major order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3767  
1733 14 Dtool_Ns0blJtd 0 6 1430 3634 0 14 Dtool_Ns0blJtd 291 ////////////////////////////////////////////////////////////////////
//     Function: UnalignedLMatrix4::get_num_components
//       Access: Published
//  Description: Returns the number of elements in the matrix, sixteen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3767  
1734 14 Dtool_Ns0br_BG 0 7 1431 3645 0 14 Dtool_Ns0br_BG 0 0 
1735 14 Dtool_Ns0brtd_ 0 7 1446 3776 3496 14 Dtool_Ns0brtd_ 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1736 14 Dtool_Ns0bvDxK 0 7 1446 3776 3496 14 Dtool_Ns0bvDxK 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3699  
1737 14 Dtool_Ns0bM1Wm 0 7 1446 3776 3496 14 Dtool_Ns0bM1Wm 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3628  4 copy 1 3672  
1738 14 Dtool_Ns0bzNTV 0 7 1446 3776 3496 14 Dtool_Ns0bzNTV 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3628  6 param1 0 3628  6 param2 0 3628  6 param3 0 3628  
1739 14 Dtool_Ns0bQoeb 0 7 1447 3776 3496 14 Dtool_Ns0bQoeb 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3681  
1740 14 Dtool_Ns0b_F9y 0 7 1448 3776 3496 14 Dtool_Ns0b_F9y 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1741 14 Dtool_Ns0brkOj 0 7 1449 3671 2347 14 Dtool_Ns0brkOj 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  1 v 1 3672  
1742 14 Dtool_Ns0bjhO_ 0 7 1449 3698 2731 14 Dtool_Ns0bjhO_ 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  1 v 1 3699  
1743 14 Dtool_Ns0beJuF 0 7 1450 3776 3496 14 Dtool_Ns0beJuF 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  3 rhs 1 3777  
1744 14 Dtool_Ns0bXaQp 0 7 1451 3776 3496 14 Dtool_Ns0bXaQp 0 1 4 this 3 3777  
1745 14 Dtool_Ns0bI56X 0 7 1452 3776 3496 14 Dtool_Ns0bI56X 0 2 4 this 3 3777  5 other 1 3777  
1746 14 Dtool_Ns0bb27z 0 7 1453 3776 3496 14 Dtool_Ns0bb27z 0 2 4 this 3 3777  5 other 1 3777  
1747 14 Dtool_Ns0b3Uhy 0 6 1454 3628 0 14 Dtool_Ns0b3Uhy 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  5 other 1 3777  
1748 14 Dtool_Ns0bmSn_ 0 6 1455 3628 0 14 Dtool_Ns0bmSn_ 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  5 other 1 3777  
1749 14 Dtool_Ns0bj8YK 0 7 1456 3734 3149 14 Dtool_Ns0bj8YK 0 2 4 this 3 3776  6 param0 0 3735  
1750 14 Dtool_Ns0be9Is 0 7 1456 3745 3244 14 Dtool_Ns0be9Is 0 2 4 this 3 3776  6 param0 0 3739  
1751 14 Dtool_Ns0bU_6J 0 7 1456 3776 3496 14 Dtool_Ns0bU_6J 0 2 4 this 3 3777  6 param0 0 3777  
1752 14 Dtool_Ns0bppqj 0 7 1456 3776 3496 14 Dtool_Ns0bppqj 0 2 4 this 3 3777  6 scalar 1 3628  
1753 14 Dtool_Ns0be9qp 0 7 1457 3776 3496 14 Dtool_Ns0be9qp 0 2 4 this 3 3777  6 scalar 1 3628  
1754 14 Dtool_Ns0bMJVd 0 6 1458 3776 0 14 Dtool_Ns0bMJVd 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  6 param0 0 3777  
1755 14 Dtool_Ns0brHMU 0 6 1459 3635 0 14 Dtool_Ns0brHMU 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  5 other 1 3777  
1756 14 Dtool_Ns0blDKH 0 6 1459 3635 0 14 Dtool_Ns0blDKH 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3777  5 other 1 3777  9 threshold 1 3628  
1757 14 Dtool_Ns0bi2zi 0 6 1460 3635 0 14 Dtool_Ns0bi2zi 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  5 other 1 3777  
1758 14 Dtool_Ns0bgEa5 0 6 1461 3635 0 14 Dtool_Ns0bgEa5 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3777  5 other 1 3777  9 threshold 1 3628  
1759 14 Dtool_Ns0bclzP 0 4 1462 3630 0 14 Dtool_Ns0bclzP 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  6 param0 0 3638  
1760 14 Dtool_Ns0bQnH2 0 4 1463 3630 0 14 Dtool_Ns0bQnH2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  1 m 1 3734  
1761 14 Dtool_Ns0bIWR2 0 4 1463 3630 0 14 Dtool_Ns0bIWR2 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  1 m 1 3745  
1762 14 Dtool_Ns0badwD 0 4 1464 3630 0 14 Dtool_Ns0badwD 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  1 m 1 3735  
1763 14 Dtool_Ns0b1eQH 0 4 1464 3630 0 14 Dtool_Ns0b1eQH 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  1 m 1 3739  
1764 14 Dtool_Ns0bRc8G 0 4 1465 3630 0 14 Dtool_Ns0bRc8G 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 3776  3 hpr 1 3672  2 cs 1 3584  
1765 14 Dtool_Ns0bghkq 0 4 1465 3630 0 14 Dtool_Ns0bghkq 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  3 hpr 1 3672  
1766 14 Dtool_Ns0bWRZg 0 7 1466 3671 2347 14 Dtool_Ns0bWRZg 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  2 cs 1 3584  
1767 14 Dtool_Ns0bO1A0 0 7 1466 3671 2347 14 Dtool_Ns0bO1A0 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1768 14 Dtool_Ns0bYcKh 0 7 1467 3680 2591 14 Dtool_Ns0bYcKh 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1769 14 Dtool_Ns0bNIeK 0 7 1468 3680 2591 14 Dtool_Ns0bNIeK 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1770 14 Dtool_Ns0bZTUN 0 6 1469 3628 0 14 Dtool_Ns0bZTUN 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1771 14 Dtool_Ns0beAIg 0 6 1470 3628 0 14 Dtool_Ns0beAIg 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1772 14 Dtool_Ns0byPe0 0 4 1471 3630 0 14 Dtool_Ns0byPe0 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3776  9 angle_rad 1 3628  4 axis 1 3681  
1773 14 Dtool_Ns0bYkah 0 4 1472 3630 0 14 Dtool_Ns0bYkah 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3776  9 angle_deg 1 3628  4 axis 1 3681  
1774 14 Dtool_Ns0b3KoZ 0 7 1473 3680 2591 14 Dtool_Ns0b3KoZ 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  2 cs 1 3584  
1775 14 Dtool_Ns0brwSS 0 7 1473 3680 2591 14 Dtool_Ns0brwSS 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1776 14 Dtool_Ns0bMxzz 0 7 1474 3680 2591 14 Dtool_Ns0bMxzz 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  2 cs 1 3584  
1777 14 Dtool_Ns0b86me 0 7 1474 3680 2591 14 Dtool_Ns0b86me 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1778 14 Dtool_Ns0b6X_p 0 7 1475 3680 2591 14 Dtool_Ns0b6X_p 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  2 cs 1 3584  
1779 14 Dtool_Ns0bIjTb 0 7 1475 3680 2591 14 Dtool_Ns0bIjTb 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1780 14 Dtool_Ns0bk8aD 0 6 1476 3628 0 14 Dtool_Ns0bk8aD 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1781 14 Dtool_Ns0bjxaE 0 6 1477 3628 0 14 Dtool_Ns0bjxaE 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1782 14 Dtool_Ns0b1yaL 0 6 1478 3628 0 14 Dtool_Ns0b1yaL 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1783 14 Dtool_Ns0bH0aS 0 6 1479 3628 0 14 Dtool_Ns0bH0aS 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1784 14 Dtool_Ns0b3PLX 0 4 1480 3630 0 14 Dtool_Ns0b3PLX 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  1 r 1 3628  
1785 14 Dtool_Ns0b04KY 0 4 1481 3630 0 14 Dtool_Ns0b04KY 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  1 i 1 3628  
1786 14 Dtool_Ns0bm5Kf 0 4 1482 3630 0 14 Dtool_Ns0bm5Kf 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  1 j 1 3628  
1787 14 Dtool_Ns0bYGLm 0 4 1483 3630 0 14 Dtool_Ns0bYGLm 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  1 k 1 3628  
1788 14 Dtool_Ns0baBWQ 0 6 1484 3635 0 14 Dtool_Ns0baBWQ 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3776  
1789 14 Dtool_Ns0bMknV 0 6 1485 3635 0 14 Dtool_Ns0bMknV 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  5 other 1 3777  
1790 14 Dtool_Ns0bDgwh 0 6 1486 3635 0 14 Dtool_Ns0bDgwh 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3776  
1791 14 Dtool_Ns0bed84 0 6 1487 3635 0 14 Dtool_Ns0bed84 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3776  5 other 1 3777  
1792 14 Dtool_Ns0bvLqt 0 6 1488 3635 0 14 Dtool_Ns0bvLqt 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3776  
1793 14 Dtool_Ns0bJkak 0 6 1489 3635 0 14 Dtool_Ns0bJkak 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3777  
1794 14 Dtool_Ns0b4P4N 0 6 1490 3635 0 14 Dtool_Ns0b4P4N 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3777  9 tolerance 1 3628  
1795 14 Dtool_Ns0bmmMR 0 6 1491 3777 0 14 Dtool_Ns0bmmMR 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1796 14 Dtool_Ns0bndKd 0 7 1492 3645 0 14 Dtool_Ns0bndKd 0 0 
1797 14 Dtool_Ns0brOX4 0 7 1495 3779 3544 14 Dtool_Ns0brOX4 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1798 14 Dtool_Ns0bwmdo 0 7 1495 3779 3544 14 Dtool_Ns0bwmdo 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3705  
1799 14 Dtool_Ns0bBaVV 0 7 1495 3779 3544 14 Dtool_Ns0bBaVV 225 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3649  4 copy 1 3675  
1800 14 Dtool_Ns0b6Z6w 0 7 1495 3779 3544 14 Dtool_Ns0b6Z6w 220 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3649  6 param1 0 3649  6 param2 0 3649  6 param3 0 3649  
1801 14 Dtool_Ns0bOPmP 0 7 1496 3779 3544 14 Dtool_Ns0bOPmP 228 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::pure_imaginary_quat
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3684  
1802 14 Dtool_Ns0b_hFu 0 7 1497 3779 3544 14 Dtool_Ns0b_hFu 265 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate
//       Access: Published
//  Description: Returns the complex conjugate of this quat.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1803 14 Dtool_Ns0bPTTe 0 7 1498 3674 2420 14 Dtool_Ns0bPTTe 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 3-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  1 v 1 3675  
1804 14 Dtool_Ns0bHWT6 0 7 1498 3704 2812 14 Dtool_Ns0bHWT6 267 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::xform
//       Access: Published
//  Description: Transforms a 4-d vector by the indicated rotation
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  1 v 1 3705  
1805 14 Dtool_Ns0bGGsA 0 7 1499 3779 3544 14 Dtool_Ns0bGGsA 255 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::multiply
//       Access: Published
//  Description: actual multiply call (non virtual)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  3 rhs 1 3780  
1806 14 Dtool_Ns0bX_Xk 0 7 1500 3779 3544 14 Dtool_Ns0bX_Xk 0 1 4 this 3 3780  
1807 14 Dtool_Ns0bPV02 0 7 1501 3779 3544 14 Dtool_Ns0bPV02 0 2 4 this 3 3780  5 other 1 3780  
1808 14 Dtool_Ns0bZa1S 0 7 1502 3779 3544 14 Dtool_Ns0bZa1S 0 2 4 this 3 3780  5 other 1 3780  
1809 14 Dtool_Ns0b3sxo 0 6 1503 3649 0 14 Dtool_Ns0b3sxo 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_rad
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               radians.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  5 other 1 3780  
1810 14 Dtool_Ns0bmq30 0 6 1504 3649 0 14 Dtool_Ns0bmq30 369 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::angle_deg
//       Access: Published
//  Description: Returns the angle between the orientation represented
//               by this quaternion and the other one, expressed in
//               degrees.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  5 other 1 3780  
1811 14 Dtool_Ns0bBNgV 0 7 1505 3755 3335 14 Dtool_Ns0bBNgV 0 2 4 this 3 3779  6 param0 0 3756  
1812 14 Dtool_Ns0b8NQ3 0 7 1505 3766 3428 14 Dtool_Ns0b8NQ3 0 2 4 this 3 3779  6 param0 0 3760  
1813 14 Dtool_Ns0brQ0o 0 7 1505 3779 3544 14 Dtool_Ns0brQ0o 0 2 4 this 3 3780  6 param0 0 3780  
1814 14 Dtool_Ns0bA0TI 0 7 1505 3779 3544 14 Dtool_Ns0bA0TI 0 2 4 this 3 3780  6 scalar 1 3649  
1815 14 Dtool_Ns0bPASO 0 7 1506 3779 3544 14 Dtool_Ns0bPASO 0 2 4 this 3 3780  6 scalar 1 3649  
1816 14 Dtool_Ns0b6vdR 0 6 1507 3779 0 14 Dtool_Ns0b6vdR 237 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::Multiply Assignment Operator
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  6 param0 0 3780  
1817 14 Dtool_Ns0bsATv 0 6 1508 3635 0 14 Dtool_Ns0bsATv 345 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a default tolerance based on the numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  5 other 1 3780  
1818 14 Dtool_Ns0bKRVo 0 6 1508 3635 0 14 Dtool_Ns0bKRVo 321 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_equal
//       Access: public
//  Description: Returns true if two quaternions are memberwise equal
//               within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3780  5 other 1 3780  9 threshold 1 3649  
1819 14 Dtool_Ns0bZg5d 0 6 1509 3635 0 14 Dtool_Ns0bZg5d 374 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a default tolerance based on the
//               numeric type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  5 other 1 3780  
1820 14 Dtool_Ns0bUNTJ 0 6 1510 3635 0 14 Dtool_Ns0bUNTJ 337 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::almost_same_direction
//       Access: public
//  Description: Returns true if two quaternions represent the same
//               rotation within a specified tolerance.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3780  5 other 1 3780  9 threshold 1 3649  
1821 14 Dtool_Ns0bcZ7K 0 4 1511 3630 0 14 Dtool_Ns0bcZ7K 215 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::output
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  6 param0 0 3638  
1822 14 Dtool_Ns0bQLcn 0 4 1512 3630 0 14 Dtool_Ns0bQLcn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix3)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  1 m 1 3755  
1823 14 Dtool_Ns0bI6nn 0 4 1512 3630 0 14 Dtool_Ns0bI6nn 270 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::extract_to_matrix (LMatrix4)
//       Access: Public
//  Description: Based on the quat lib from VRPN.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  1 m 1 3766  
1824 14 Dtool_Ns0bea4e 0 4 1513 3630 0 14 Dtool_Ns0bea4e 503 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: public
//  Description: Sets the quaternion according to the rotation
//               represented by the matrix.  Originally we tried an
//               algorithm presented by Do-While Jones, but that
//               turned out to be broken.  This is based on the quat
//               lib from UNC.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  1 m 1 3756  
1825 14 Dtool_Ns0b5bYi 0 4 1513 3630 0 14 Dtool_Ns0b5bYi 224 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_matrix
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  1 m 1 3760  
1826 14 Dtool_Ns0bX48z 0 4 1514 3630 0 14 Dtool_Ns0bX48z 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 3 4 this 3 3779  3 hpr 1 3675  2 cs 1 3584  
1827 14 Dtool_Ns0bhFnX 0 4 1514 3630 0 14 Dtool_Ns0bhFnX 368 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_hpr
//       Access: public
//  Description: Sets the quaternion as the unit quaternion that
//               is equivalent to these Euler angles.
//               (from Real-time Rendering, p.49)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  3 hpr 1 3675  
1828 14 Dtool_Ns0bW1gb 0 7 1515 3674 2420 14 Dtool_Ns0bW1gb 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  2 cs 1 3584  
1829 14 Dtool_Ns0bORIv 0 7 1515 3674 2420 14 Dtool_Ns0bORIv 296 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_hpr
//       Access: public
//  Description: Extracts the equivalent Euler angles from the unit
//               quaternion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1830 14 Dtool_Ns0bY4Rc 0 7 1516 3683 2625 14 Dtool_Ns0bY4Rc 432 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the axis; it is not
//               normalized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1831 14 Dtool_Ns0bNkmF 0 7 1517 3683 2625 14 Dtool_Ns0bNkmF 415 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_axis_normalized
//       Access: Public
//  Description: This, along with get_angle(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the normalized axis.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1832 14 Dtool_Ns0bZ_bI 0 6 1518 3649 0 14 Dtool_Ns0bZ_bI 645 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle_rad
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in radians
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1833 14 Dtool_Ns0be8Rb 0 6 1519 3649 0 14 Dtool_Ns0be8Rb 641 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_angle
//       Access: Public
//  Description: This, along with get_axis(), returns the rotation
//               represented by the quaternion as an angle about an
//               arbitrary axis.  This returns the angle, in degrees
//               counterclockwise about the axis.
//
//               It is necessary to ensure the quaternion has been
//               normalized (for instance, with a call to normalize())
//               before calling this method.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1834 14 Dtool_Ns0bZ91x 0 4 1520 3630 0 14 Dtool_Ns0bZ91x 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_rad
//       Access: Public
//  Description: angle_rad is the angle about the axis in radians.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3779  9 angle_rad 1 3649  4 axis 1 3684  
1835 14 Dtool_Ns0bVKOA 0 4 1521 3630 0 14 Dtool_Ns0bVKOA 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_from_axis_angle_deg
//       Access: Public
//  Description: angle_deg is the angle about the axis in degrees.
//               axis must be normalized.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3779  9 angle_deg 1 3649  4 axis 1 3684  
1836 14 Dtool_Ns0b3uwU 0 7 1522 3683 2625 14 Dtool_Ns0b3uwU 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  2 cs 1 3584  
1837 14 Dtool_Ns0brsaN 0 7 1522 3683 2625 14 Dtool_Ns0brsaN 315 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_up
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as an up vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1838 14 Dtool_Ns0bMt7u 0 7 1523 3683 2625 14 Dtool_Ns0bMt7u 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  2 cs 1 3584  
1839 14 Dtool_Ns0b8etZ 0 7 1523 3683 2625 14 Dtool_Ns0b8etZ 320 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_right
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a right vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1840 14 Dtool_Ns0b6zHl 0 7 1524 3683 2625 14 Dtool_Ns0b6zHl 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  2 cs 1 3584  
1841 14 Dtool_Ns0bIPaW 0 7 1524 3683 2625 14 Dtool_Ns0bIPaW 324 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_forward
//       Access: Public
//  Description: Returns the orientation represented by this
//               quaternion, expressed as a forward vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1842 14 Dtool_Ns0blYi_ 0 6 1525 3649 0 14 Dtool_Ns0blYi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1843 14 Dtool_Ns0bkVi_ 0 6 1526 3649 0 14 Dtool_Ns0bkVi_ 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1844 14 Dtool_Ns0b1WiG 0 6 1527 3649 0 14 Dtool_Ns0b1WiG 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1845 14 Dtool_Ns0bHQiN 0 6 1528 3649 0 14 Dtool_Ns0bHQiN 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::get_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1846 14 Dtool_Ns0b2srU 0 4 1529 3630 0 14 Dtool_Ns0b2srU 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_r
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  1 r 1 3649  
1847 14 Dtool_Ns0b3hrV 0 4 1530 3630 0 14 Dtool_Ns0b3hrV 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_i
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  1 i 1 3649  
1848 14 Dtool_Ns0b5irc 0 4 1531 3630 0 14 Dtool_Ns0b5irc 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_j
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  1 j 1 3649  
1849 14 Dtool_Ns0bLjrj 0 4 1532 3630 0 14 Dtool_Ns0bLjrj 214 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::set_k
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  1 k 1 3649  
1850 14 Dtool_Ns0baleL 0 6 1533 3635 0 14 Dtool_Ns0baleL 218 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::normalize
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3779  
1851 14 Dtool_Ns0bMw_G 0 6 1534 3635 0 14 Dtool_Ns0bMw_G 817 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_from
//       Access: Published
//  Description: Computes the conjugate of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to get a conjugate of a
//               quat in place, see conjugate_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  5 other 1 3780  
1852 14 Dtool_Ns0bDM3c 0 6 1535 3635 0 14 Dtool_Ns0bDM3c 379 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::conjugate_in_place
//       Access: Published
//  Description: Sets this to be the conjugate of the current quat.
//               Returns true if the successful, false if the quat
//               was singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3779  
1853 14 Dtool_Ns0bIgEt 0 6 1536 3635 0 14 Dtool_Ns0bIgEt 794 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_from
//       Access: Public
//  Description: Computes the inverse of the other quat, and stores
//               the result in this quat.  This is a fully general
//               operation and makes no assumptions about the type of
//               transform represented by the quat.
//
//               The other quat must be a different object than this
//               quat.  However, if you need to invert a quat in
//               place, see invert_in_place.
//
//               The return value is true if the quat was
//               successfully inverted, false if there was a
//               singularity.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3779  5 other 1 3780  
1854 14 Dtool_Ns0bv3zo 0 6 1537 3635 0 14 Dtool_Ns0bv3zo 360 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::invert_in_place
//       Access: Public
//  Description: Inverts the current quat.  Returns true if the
//               inverse is successful, false if the quat was
//               singular.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3779  
1855 14 Dtool_Ns0bJIif 0 6 1538 3635 0 14 Dtool_Ns0bJIif 322 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation: no rotation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3780  
1856 14 Dtool_Ns0bZ4KV 0 6 1539 3635 0 14 Dtool_Ns0bZ4KV 341 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::is_almost_identity
//       Access: Public
//  Description: Returns true if this quaternion represents the
//               identity transformation within a given tolerance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3780  9 tolerance 1 3649  
1857 14 Dtool_Ns0bmaTM 0 6 1540 3780 0 14 Dtool_Ns0bmaTM 259 ////////////////////////////////////////////////////////////////////
//     Function: LQuaternion::ident_quat
//       Access: Public, Static
//  Description: Returns an identity quaternion.
//////////////////////////////////////////////////////////////////// 0 
1858 14 Dtool_Ns0bnxRY 0 7 1541 3645 0 14 Dtool_Ns0bnxRY 0 0 
1859 14 Dtool_Ns0b1ufs 0 7 1544 3782 3549 14 Dtool_Ns0b1ufs 226 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1860 14 Dtool_Ns0boHWm 0 7 1544 3782 3549 14 Dtool_Ns0boHWm 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3735  
1861 14 Dtool_Ns0boMkn 0 7 1544 3782 3549 14 Dtool_Ns0boMkn 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3739  
1862 14 Dtool_Ns0bdC6k 0 7 1544 3782 3549 14 Dtool_Ns0bdC6k 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3777  
1863 14 Dtool_Ns0bZE8x 0 7 1544 3782 3549 14 Dtool_Ns0bZE8x 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3699  
1864 14 Dtool_Ns0bzssT 0 7 1544 3782 3549 14 Dtool_Ns0bzssT 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3681  6 param1 0 3628  
1865 14 Dtool_Ns0bLwNm 0 7 1544 3782 3549 14 Dtool_Ns0bLwNm 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 3628  6 param1 0 3628  6 param2 0 3628  
1866 14 Dtool_Ns0b6t_a 0 7 1544 3782 3549 14 Dtool_Ns0b6t_a 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3628  6 param1 0 3628  6 param2 0 3628  6 param3 0 3628  
1867 14 Dtool_Ns0bcT59 0 7 1545 3776 3496 14 Dtool_Ns0bcT59 0 2 4 this 3 3783  5 other 1 3777  
1868 14 Dtool_Ns0bttc8 0 7 1545 3782 3549 14 Dtool_Ns0bttc8 0 2 4 this 3 3783  5 other 1 3783  
1869 14 Dtool_Ns0bmMpJ 0 7 1545 3782 3549 14 Dtool_Ns0bmMpJ 0 2 4 this 3 3783  6 scalar 1 3628  
1870 14 Dtool_Ns0bmkd6 0 7 1546 3782 3549 14 Dtool_Ns0bmkd6 0 2 4 this 3 3783  6 scalar 1 3628  
1871 14 Dtool_Ns0bscCI 0 7 1547 3645 0 14 Dtool_Ns0bscCI 0 0 
1872 14 Dtool_Ns0bXT9o 0 7 1550 3785 3554 14 Dtool_Ns0bXT9o 226 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1873 14 Dtool_Ns0b1jtU 0 7 1550 3785 3554 14 Dtool_Ns0b1jtU 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3756  
1874 14 Dtool_Ns0b1o7V 0 7 1550 3785 3554 14 Dtool_Ns0b1o7V 227 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: lmatrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3760  
1875 14 Dtool_Ns0b71Oh 0 7 1550 3785 3554 14 Dtool_Ns0b71Oh 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3780  
1876 14 Dtool_Ns0bbq7q 0 7 1550 3785 3554 14 Dtool_Ns0bbq7q 223 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3705  
1877 14 Dtool_Ns0bLdpy 0 7 1550 3785 3554 14 Dtool_Ns0bLdpy 244 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: axis + angle (in degrees)
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3684  6 param1 0 3649  
1878 14 Dtool_Ns0b4Iug 0 7 1550 3785 3554 14 Dtool_Ns0b4Iug 265 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description: Sets the rotation from the given Euler angles.
//////////////////////////////////////////////////////////////////// 3 6 param0 0 3649  6 param1 0 3649  6 param2 0 3649  
1879 14 Dtool_Ns0bA9cz 0 7 1550 3785 3554 14 Dtool_Ns0bA9cz 218 ////////////////////////////////////////////////////////////////////
//     Function: LRotation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3649  6 param1 0 3649  6 param2 0 3649  6 param3 0 3649  
1880 14 Dtool_Ns0bukuN 0 7 1551 3779 3544 14 Dtool_Ns0bukuN 0 2 4 this 3 3786  5 other 1 3780  
1881 14 Dtool_Ns0b1Z8I 0 7 1551 3785 3554 14 Dtool_Ns0b1Z8I 0 2 4 this 3 3786  5 other 1 3786  
1882 14 Dtool_Ns0by_rc 0 7 1551 3785 3554 14 Dtool_Ns0by_rc 0 2 4 this 3 3786  6 scalar 1 3649  
1883 14 Dtool_Ns0bzWgN 0 7 1552 3785 3554 14 Dtool_Ns0bzWgN 0 2 4 this 3 3786  6 scalar 1 3649  
1884 14 Dtool_Ns0bKPCY 0 7 1553 3645 0 14 Dtool_Ns0bKPCY 0 0 
1885 14 Dtool_Ns0bcX4n 0 7 1556 3788 3558 14 Dtool_Ns0bcX4n 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1886 14 Dtool_Ns0bkodg 0 7 1556 3788 3558 14 Dtool_Ns0bkodg 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3735  
1887 14 Dtool_Ns0bloku 0 7 1556 3788 3558 14 Dtool_Ns0bloku 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3739  
1888 14 Dtool_Ns0b_eNF 0 7 1556 3788 3558 14 Dtool_Ns0b_eNF 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3777  
1889 14 Dtool_Ns0bOs13 0 7 1556 3788 3558 14 Dtool_Ns0bOs13 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3681  6 param1 0 3628  
1890 14 Dtool_Ns0bWFbK 0 7 1556 3788 3558 14 Dtool_Ns0bWFbK 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3628  6 param1 0 3628  6 param2 0 3628  6 param3 0 3628  
1891 14 Dtool_Ns0b1nPz 0 7 1557 3788 3558 14 Dtool_Ns0b1nPz 0 2 4 this 3 3789  5 other 1 3777  
1892 14 Dtool_Ns0byr_X 0 7 1557 3788 3558 14 Dtool_Ns0byr_X 0 2 4 this 3 3789  5 other 1 3783  
1893 14 Dtool_Ns0byKEa 0 7 1558 3645 0 14 Dtool_Ns0byKEa 0 0 
1894 14 Dtool_Ns0b2Y6p 0 7 1561 3791 3562 14 Dtool_Ns0b2Y6p 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Default Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1895 14 Dtool_Ns0bYrfb 0 7 1561 3791 3562 14 Dtool_Ns0bYrfb 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix3
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3756  
1896 14 Dtool_Ns0bZrmp 0 7 1561 3791 3562 14 Dtool_Ns0bZrmp 229 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: matrix4
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3760  
1897 14 Dtool_Ns0bRFe9 0 7 1561 3791 3562 14 Dtool_Ns0bRFe9 226 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Copy Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 1 6 param0 0 3780  
1898 14 Dtool_Ns0byi3y 0 7 1561 3791 3562 14 Dtool_Ns0byi3y 236 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description: vector + twist
//////////////////////////////////////////////////////////////////// 2 6 param0 0 3684  6 param1 0 3628  
1899 14 Dtool_Ns0bQOxM 0 7 1561 3791 3562 14 Dtool_Ns0bQOxM 221 ////////////////////////////////////////////////////////////////////
//     Function: LOrientation::Constructor
//       Access: public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 param0 0 3649  6 param1 0 3649  6 param2 0 3649  6 param3 0 3649  
1900 14 Dtool_Ns0blgBQ 0 7 1562 3791 3562 14 Dtool_Ns0blgBQ 0 2 4 this 3 3792  5 other 1 3780  
1901 14 Dtool_Ns0b9P52 0 7 1562 3791 3562 14 Dtool_Ns0b9P52 0 2 4 this 3 3792  5 other 1 3786  
1902 14 Dtool_Ns0bxK29 0 7 1563 3645 0 14 Dtool_Ns0bxK29 0 0 
1903 14 Dtool_Ns0bqmQ_ 0 7 1567 3794 3570 14 Dtool_Ns0bqmQ_ 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 3633  
1904 14 Dtool_Ns0b8uWQ 0 7 1567 3794 3570 14 Dtool_Ns0b8uWQ 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 name 1 3633  13 default_value 1 3699  11 description 1 3633  5 flags 1 3634  
1905 14 Dtool_Ns0bhnGg 0 7 1567 3794 3570 14 Dtool_Ns0bhnGg 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3633  13 default_value 1 3699  11 description 1 3633  
1906 14 Dtool_Ns0bfRrH 0 7 1567 3794 3570 14 Dtool_Ns0bfRrH 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3633  13 default_value 1 3699  
1907 14 Dtool_Ns0bSfdk 0 7 1567 3794 3570 14 Dtool_Ns0bSfdk 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 name 1 3633  13 default_value 1 3633  11 description 1 3633  5 flags 1 3634  
1908 14 Dtool_Ns0bTkgj 0 7 1567 3794 3570 14 Dtool_Ns0bTkgj 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 name 1 3633  13 default_value 1 3633  11 description 1 3633  
1909 14 Dtool_Ns0b_UhB 0 7 1567 3794 3570 14 Dtool_Ns0b_UhB 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 name 1 3633  13 default_value 1 3633  
1910 14 Dtool_Ns0bW0IZ 0 6 1568 3794 0 14 Dtool_Ns0bW0IZ 0 2 4 this 3 3794  5 value 1 3699  
1911 14 Dtool_Ns0btJG7 0 6 1570 3628 0 14 Dtool_Ns0btJG7 0 2 4 this 3 3795  1 n 1 3634  
1912 14 Dtool_Ns0bRmlY 0 4 1571 3630 0 14 Dtool_Ns0bRmlY 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3794  5 value 1 3699  
1913 14 Dtool_Ns0bwhe8 0 6 1572 3699 0 14 Dtool_Ns0bwhe8 259 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3795  
1914 14 Dtool_Ns0bn5Jt 0 7 1573 3698 2731 14 Dtool_Ns0bn5Jt 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableColor::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3795  
1915 14 Dtool_Ns0b5_fa 0 6 1569 3699 0 14 Dtool_Ns0b5_fa 0 1 4 this 3 3795  
1916 14 Dtool_Ns0baTo4 0 6 3 3649 0 14 Dtool_Ns0baTo4 0 1 1 f 1 3649  
1917 14 Dtool_Ns0bRKCI 0 6 3 3628 0 14 Dtool_Ns0bRKCI 0 1 1 f 1 3628  
1918 14 Dtool_Ns0bgpRs 0 6 4 3649 0 14 Dtool_Ns0bgpRs 0 1 1 f 1 3649  
1919 14 Dtool_Ns0bIbq7 0 6 4 3628 0 14 Dtool_Ns0bIbq7 0 1 1 f 1 3628  
1920 14 Dtool_Ns0bt1jy 0 6 518 3584 0 14 Dtool_Ns0bt1jy 0 0 
1921 14 Dtool_Ns0bVyE0 0 6 519 3584 0 14 Dtool_Ns0bVyE0 0 1 3 str 1 3633  
1922 14 Dtool_Ns0bblcZ 0 6 520 3633 0 14 Dtool_Ns0bblcZ 0 1 2 cs 1 3584  
1923 14 Dtool_Ns0b14II 0 6 521 3635 0 14 Dtool_Ns0b14II 0 1 2 cs 1 3584  
1924 14 Dtool_Ns0bvd7J 0 6 521 3635 0 14 Dtool_Ns0bvd7J 0 0 
1925 14 Dtool_Ns0bp_eQ 0 7 1135 3755 3335 14 Dtool_Ns0bp_eQ 0 1 1 a 1 3756  
1926 14 Dtool_Ns0bN4ee 0 7 1135 3734 3149 14 Dtool_Ns0bN4ee 0 1 1 a 1 3735  
1927 14 Dtool_Ns0bn_ss 0 7 1135 3766 3428 14 Dtool_Ns0bn_ss 0 1 1 a 1 3760  
1928 14 Dtool_Ns0bL4s6 0 7 1135 3745 3244 14 Dtool_Ns0bL4s6 0 1 1 a 1 3739  
1929 14 Dtool_Ns0b9Gem 0 7 1136 3755 3335 14 Dtool_Ns0b9Gem 0 1 1 a 1 3756  
1930 14 Dtool_Ns0bNgym 0 7 1136 3734 3149 14 Dtool_Ns0bNgym 0 1 1 a 1 3735  
1931 14 Dtool_Ns0bYJfW 0 7 1136 3766 3428 14 Dtool_Ns0bYJfW 0 1 1 a 1 3760  
1932 14 Dtool_Ns0borzW 0 7 1136 3745 3244 14 Dtool_Ns0borzW 0 1 1 a 1 3739  
1933 14 Dtool_Ns0bG8wm 0 7 1136 3779 3544 14 Dtool_Ns0bG8wm 0 1 1 a 1 3780  
1934 14 Dtool_Ns0bqBx0 0 7 1136 3776 3496 14 Dtool_Ns0bqBx0 0 1 1 a 1 3777  
1935 14 Dtool_Ns0bDzjX 0 7 1433 3755 3335 14 Dtool_Ns0bDzjX 0 2 1 m 1 3756  1 q 1 3780  
1936 14 Dtool_Ns0bkolH 0 7 1433 3734 3149 14 Dtool_Ns0bkolH 0 2 1 m 1 3735  1 q 1 3777  
1937 14 Dtool_Ns0bRsje 0 7 1433 3766 3428 14 Dtool_Ns0bRsje 0 2 1 m 1 3760  1 q 1 3780  
1938 14 Dtool_Ns0bqplO 0 7 1433 3745 3244 14 Dtool_Ns0bqplO 0 2 1 m 1 3739  1 q 1 3777  
1939 14 Dtool_Ns0byfKI 0 7 1433 3665 2322 14 Dtool_Ns0byfKI 0 2 1 v 1 3666  1 m 1 3756  
1940 14 Dtool_Ns0bSCRW 0 7 1433 3662 2306 14 Dtool_Ns0bSCRW 0 2 1 v 1 3663  1 m 1 3735  
1941 14 Dtool_Ns0bwfYk 0 7 1433 3692 2698 14 Dtool_Ns0bwfYk 0 2 1 v 1 3693  1 m 1 3756  
1942 14 Dtool_Ns0bmWZA 0 7 1433 3692 2698 14 Dtool_Ns0bmWZA 0 2 1 v 1 3693  1 m 1 3760  
1943 14 Dtool_Ns0bQCfy 0 7 1433 3689 2675 14 Dtool_Ns0bQCfy 0 2 1 v 1 3690  1 m 1 3735  
1944 14 Dtool_Ns0beNeO 0 7 1433 3689 2675 14 Dtool_Ns0beNeO 0 2 1 v 1 3690  1 m 1 3739  
1945 14 Dtool_Ns0bkWnc 0 7 1433 3728 3049 14 Dtool_Ns0bkWnc 0 2 1 v 1 3729  1 m 1 3760  
1946 14 Dtool_Ns0bcNsq 0 7 1433 3725 3031 14 Dtool_Ns0bcNsq 0 2 1 v 1 3726  1 m 1 3739  
1947 14 Dtool_Ns0b6f4W 0 7 1433 3674 2420 14 Dtool_Ns0b6f4W 0 2 1 v 1 3675  1 m 1 3756  
1948 14 Dtool_Ns0bZSml 0 7 1433 3671 2347 14 Dtool_Ns0bZSml 0 2 1 v 1 3672  1 m 1 3735  
1949 14 Dtool_Ns0bHpH4 0 7 1433 3704 2812 14 Dtool_Ns0bHpH4 0 2 1 v 1 3705  1 m 1 3760  
1950 14 Dtool_Ns0blt1G 0 7 1433 3698 2731 14 Dtool_Ns0blt1G 0 2 1 v 1 3699  1 m 1 3739  
1951 14 Dtool_Ns0bQlWf 0 7 1433 3656 2275 14 Dtool_Ns0bQlWf 0 2 1 v 1 3657  1 m 1 3756  
1952 14 Dtool_Ns0bfZ0h 0 7 1433 3653 2257 14 Dtool_Ns0bfZ0h 0 2 1 v 1 3654  1 m 1 3735  
1953 14 Dtool_Ns0bmnWm 0 7 1433 3683 2625 14 Dtool_Ns0bmnWm 0 2 1 v 1 3684  1 m 1 3756  
1954 14 Dtool_Ns0bwbZm 0 7 1433 3683 2625 14 Dtool_Ns0bwbZm 0 2 1 v 1 3684  1 m 1 3760  
1955 14 Dtool_Ns0bpb0o 0 7 1433 3680 2591 14 Dtool_Ns0bpb0o 0 2 1 v 1 3681  1 m 1 3735  
1956 14 Dtool_Ns0b7_2o 0 7 1433 3680 2591 14 Dtool_Ns0b7_2o 0 2 1 v 1 3681  1 m 1 3739  
1957 14 Dtool_Ns0biUZt 0 7 1433 3719 2996 14 Dtool_Ns0biUZt 0 2 1 v 1 3720  1 m 1 3760  
1958 14 Dtool_Ns0bpw2v 0 7 1433 3716 2978 14 Dtool_Ns0bpw2v 0 2 1 v 1 3717  1 m 1 3739  
1959 14 Dtool_Ns0blh4s 0 4 1434 3630 0 14 Dtool_Ns0blh4s 0 2 1 v 1 3665  1 m 1 3756  
1960 14 Dtool_Ns0bHtbw 0 4 1434 3630 0 14 Dtool_Ns0bHtbw 0 2 1 v 1 3662  1 m 1 3735  
1961 14 Dtool_Ns0bXi4z 0 4 1434 3630 0 14 Dtool_Ns0bXi4z 0 2 1 v 1 3692  1 m 1 3756  
1962 14 Dtool_Ns0bUC8a 0 4 1434 3630 0 14 Dtool_Ns0bUC8a 0 2 1 v 1 3692  1 m 1 3760  
1963 14 Dtool_Ns0bVsb3 0 4 1434 3630 0 14 Dtool_Ns0bVsb3 0 2 1 v 1 3689  1 m 1 3735  
1964 14 Dtool_Ns0bUMfe 0 4 1434 3630 0 14 Dtool_Ns0bUMfe 0 2 1 v 1 3689  1 m 1 3739  
1965 14 Dtool_Ns0bbnYb 0 4 1434 3630 0 14 Dtool_Ns0bbnYb 0 2 1 v 1 3674  1 m 1 3756  
1966 14 Dtool_Ns0bTAEv 0 4 1434 3630 0 14 Dtool_Ns0bTAEv 0 2 1 v 1 3671  1 m 1 3735  
1967 14 Dtool_Ns0b6LsT 0 4 1434 3630 0 14 Dtool_Ns0b6LsT 0 2 1 v 1 3704  1 m 1 3760  
1968 14 Dtool_Ns0byoXn 0 4 1434 3630 0 14 Dtool_Ns0byoXn 0 2 1 v 1 3698  1 m 1 3739  
1969 14 Dtool_Ns0bSP7Z 0 4 1434 3630 0 14 Dtool_Ns0bSP7Z 0 2 1 v 1 3656  1 m 1 3756  
1970 14 Dtool_Ns0bQFiK 0 4 1434 3630 0 14 Dtool_Ns0bQFiK 0 2 1 v 1 3653  1 m 1 3735  
1971 14 Dtool_Ns0bXk75 0 4 1434 3630 0 14 Dtool_Ns0bXk75 0 2 1 v 1 3683  1 m 1 3756  
1972 14 Dtool_Ns0b7krb 0 4 1434 3630 0 14 Dtool_Ns0b7krb 0 2 1 v 1 3683  1 m 1 3760  
1973 14 Dtool_Ns0bVsiq 0 4 1434 3630 0 14 Dtool_Ns0bVsiq 0 2 1 v 1 3680  1 m 1 3735  
1974 14 Dtool_Ns0b5tSM 0 4 1434 3630 0 14 Dtool_Ns0b5tSM 0 2 1 v 1 3680  1 m 1 3739  
1975 14 Dtool_Ns0bJ63D 0 4 1435 3630 0 14 Dtool_Ns0bJ63D 0 2 4 dest 1 3640  5 value 1 3756  
1976 14 Dtool_Ns0bQo4D 0 4 1435 3630 0 14 Dtool_Ns0bQo4D 0 2 4 dest 1 3640  5 value 1 3735  
1977 14 Dtool_Ns0bb53K 0 4 1435 3630 0 14 Dtool_Ns0bb53K 0 2 4 dest 1 3640  5 value 1 3760  
1978 14 Dtool_Ns0bCr4K 0 4 1435 3630 0 14 Dtool_Ns0bCr4K 0 2 4 dest 1 3640  5 value 1 3739  
1979 14 Dtool_Ns0bG74L 0 4 1436 3630 0 14 Dtool_Ns0bG74L 0 2 6 result 1 3755  6 source 1 3642  
1980 14 Dtool_Ns0bGpUO 0 4 1436 3630 0 14 Dtool_Ns0bGpUO 0 2 6 result 1 3734  6 source 1 3642  
1981 14 Dtool_Ns0b0f6L 0 4 1436 3630 0 14 Dtool_Ns0b0f6L 0 2 6 result 1 3766  6 source 1 3642  
1982 14 Dtool_Ns0b0NWO 0 4 1436 3630 0 14 Dtool_Ns0b0NWO 0 2 6 result 1 3745  6 source 1 3642  
1983 14 Dtool_Ns0byVzC 0 4 1437 3630 0 14 Dtool_Ns0byVzC 0 4 3 mat 1 3755  5 scale 1 3675  3 hpr 1 3675  2 cs 1 3584  
1984 14 Dtool_Ns0bhQb3 0 4 1437 3630 0 14 Dtool_Ns0bhQb3 0 3 3 mat 1 3755  5 scale 1 3675  3 hpr 1 3675  
1985 14 Dtool_Ns0b3KHb 0 4 1437 3630 0 14 Dtool_Ns0b3KHb 0 5 3 mat 1 3755  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  2 cs 1 3584  
1986 14 Dtool_Ns0bRK2_ 0 4 1437 3630 0 14 Dtool_Ns0bRK2_ 0 4 3 mat 1 3755  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  
1987 14 Dtool_Ns0b4aBn 0 4 1437 3630 0 14 Dtool_Ns0b4aBn 0 4 3 mat 1 3734  5 scale 1 3672  3 hpr 1 3672  2 cs 1 3584  
1988 14 Dtool_Ns0b6xpb 0 4 1437 3630 0 14 Dtool_Ns0b6xpb 0 3 3 mat 1 3734  5 scale 1 3672  3 hpr 1 3672  
1989 14 Dtool_Ns0bs_WG 0 4 1437 3630 0 14 Dtool_Ns0bs_WG 0 5 3 mat 1 3734  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  2 cs 1 3584  
1990 14 Dtool_Ns0bk7Er 0 4 1437 3630 0 14 Dtool_Ns0bk7Er 0 4 3 mat 1 3734  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  
1991 14 Dtool_Ns0b8KjT 0 4 1437 3630 0 14 Dtool_Ns0b8KjT 0 5 3 mat 1 3766  5 scale 1 3675  3 hpr 1 3675  9 translate 1 3675  2 cs 1 3584  
1992 14 Dtool_Ns0bUKS4 0 4 1437 3630 0 14 Dtool_Ns0bUKS4 0 4 3 mat 1 3766  5 scale 1 3675  3 hpr 1 3675  9 translate 1 3675  
1993 14 Dtool_Ns0boQjw 0 4 1437 3630 0 14 Dtool_Ns0boQjw 0 6 3 mat 1 3766  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  9 translate 1 3675  2 cs 1 3584  
1994 14 Dtool_Ns0b9vLl 0 4 1437 3630 0 14 Dtool_Ns0b9vLl 0 5 3 mat 1 3766  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  9 translate 1 3675  
1995 14 Dtool_Ns0bQ_y_ 0 4 1437 3630 0 14 Dtool_Ns0bQ_y_ 0 5 3 mat 1 3745  5 scale 1 3672  3 hpr 1 3672  9 translate 1 3672  2 cs 1 3584  
1996 14 Dtool_Ns0b77gj 0 4 1437 3630 0 14 Dtool_Ns0b77gj 0 4 3 mat 1 3745  5 scale 1 3672  3 hpr 1 3672  9 translate 1 3672  
1997 14 Dtool_Ns0b1X_c 0 4 1437 3630 0 14 Dtool_Ns0b1X_c 0 6 3 mat 1 3745  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  9 translate 1 3672  2 cs 1 3584  
1998 14 Dtool_Ns0bCknR 0 4 1437 3630 0 14 Dtool_Ns0bCknR 0 5 3 mat 1 3745  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  9 translate 1 3672  
1999 14 Dtool_Ns0brGAD 0 6 1438 3635 0 14 Dtool_Ns0brGAD 0 4 3 mat 1 3756  5 scale 1 3674  3 hpr 1 3674  2 cs 1 3584  
2000 14 Dtool_Ns0bVxX2 0 6 1438 3635 0 14 Dtool_Ns0bVxX2 0 3 3 mat 1 3756  5 scale 1 3674  3 hpr 1 3674  
2001 14 Dtool_Ns0bwk1_ 0 6 1438 3635 0 14 Dtool_Ns0bwk1_ 0 5 3 mat 1 3756  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  2 cs 1 3584  
2002 14 Dtool_Ns0bsyts 0 6 1438 3635 0 14 Dtool_Ns0bsyts 0 4 3 mat 1 3756  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  
2003 14 Dtool_Ns0bKI_s 0 6 1438 3635 0 14 Dtool_Ns0bKI_s 0 4 3 mat 1 3735  5 scale 1 3671  3 hpr 1 3671  2 cs 1 3584  
2004 14 Dtool_Ns0bzJVg 0 6 1438 3635 0 14 Dtool_Ns0bzJVg 0 3 3 mat 1 3735  5 scale 1 3671  3 hpr 1 3671  
2005 14 Dtool_Ns0bb5Pi 0 6 1438 3635 0 14 Dtool_Ns0bb5Pi 0 5 3 mat 1 3735  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  2 cs 1 3584  
2006 14 Dtool_Ns0bFoHP 0 6 1438 3635 0 14 Dtool_Ns0bFoHP 0 4 3 mat 1 3735  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  
2007 14 Dtool_Ns0b7y0_ 0 6 1438 3635 0 14 Dtool_Ns0b7y0_ 0 5 3 mat 1 3760  5 scale 1 3674  3 hpr 1 3674  9 translate 1 3674  2 cs 1 3584  
2008 14 Dtool_Ns0b1gus 0 6 1438 3635 0 14 Dtool_Ns0b1gus 0 4 3 mat 1 3760  5 scale 1 3674  3 hpr 1 3674  9 translate 1 3674  
2009 14 Dtool_Ns0bFy__ 0 6 1438 3635 0 14 Dtool_Ns0bFy__ 0 6 3 mat 1 3760  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  9 translate 1 3674  2 cs 1 3584  
2010 14 Dtool_Ns0bioSK 0 6 1438 3635 0 14 Dtool_Ns0bioSK 0 5 3 mat 1 3760  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  9 translate 1 3674  
2011 14 Dtool_Ns0bQLRi 0 6 1438 3635 0 14 Dtool_Ns0bQLRi 0 5 3 mat 1 3739  5 scale 1 3671  3 hpr 1 3671  9 translate 1 3671  2 cs 1 3584  
2012 14 Dtool_Ns0bcmIP 0 6 1438 3635 0 14 Dtool_Ns0bcmIP 0 4 3 mat 1 3739  5 scale 1 3671  3 hpr 1 3671  9 translate 1 3671  
2013 14 Dtool_Ns0bt1gv 0 6 1438 3635 0 14 Dtool_Ns0bt1gv 0 6 3 mat 1 3739  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  9 translate 1 3671  2 cs 1 3584  
2014 14 Dtool_Ns0bJlz6 0 6 1438 3635 0 14 Dtool_Ns0bJlz6 0 5 3 mat 1 3739  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  9 translate 1 3671  
2015 14 Dtool_Ns0b5kiD 0 4 1439 3630 0 14 Dtool_Ns0b5kiD 0 5 3 mat 1 3755  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  2 cs 1 3584  
2016 14 Dtool_Ns0bTMeM 0 4 1439 3630 0 14 Dtool_Ns0bTMeM 0 4 3 mat 1 3755  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  
2017 14 Dtool_Ns0bURso 0 4 1439 3630 0 14 Dtool_Ns0bURso 0 5 3 mat 1 3734  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  2 cs 1 3584  
2018 14 Dtool_Ns0b_Rpx 0 4 1439 3630 0 14 Dtool_Ns0b_Rpx 0 4 3 mat 1 3734  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  
2019 14 Dtool_Ns0baU0J 0 4 1439 3630 0 14 Dtool_Ns0baU0J 0 6 3 mat 1 3766  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  9 translate 1 3675  2 cs 1 3584  
2020 14 Dtool_Ns0b_LGV 0 4 1439 3630 0 14 Dtool_Ns0b_LGV 0 5 3 mat 1 3766  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  9 translate 1 3675  
2021 14 Dtool_Ns0bXr_e 0 4 1439 3630 0 14 Dtool_Ns0bXr_e 0 6 3 mat 1 3745  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  9 translate 1 3672  2 cs 1 3584  
2022 14 Dtool_Ns0bgMRq 0 4 1439 3630 0 14 Dtool_Ns0bgMRq 0 5 3 mat 1 3745  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  9 translate 1 3672  
2023 14 Dtool_Ns0btC1N 0 6 1440 3635 0 14 Dtool_Ns0btC1N 0 5 3 mat 1 3756  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  2 cs 1 3584  
2024 14 Dtool_Ns0bz5DH 0 6 1440 3635 0 14 Dtool_Ns0bz5DH 0 4 3 mat 1 3756  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  
2025 14 Dtool_Ns0bPOdX 0 6 1440 3635 0 14 Dtool_Ns0bPOdX 0 5 3 mat 1 3735  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  2 cs 1 3584  
2026 14 Dtool_Ns0bRWrQ 0 6 1440 3635 0 14 Dtool_Ns0bRWrQ 0 4 3 mat 1 3735  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  
2027 14 Dtool_Ns0bvhAZ 0 6 1440 3635 0 14 Dtool_Ns0bvhAZ 0 6 3 mat 1 3760  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  9 translate 1 3674  2 cs 1 3584  
2028 14 Dtool_Ns0bPJWn 0 6 1440 3635 0 14 Dtool_Ns0bPJWn 0 5 3 mat 1 3760  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  9 translate 1 3674  
2029 14 Dtool_Ns0bST9i 0 6 1440 3635 0 14 Dtool_Ns0bST9i 0 6 3 mat 1 3739  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  9 translate 1 3671  2 cs 1 3584  
2030 14 Dtool_Ns0b95Tx 0 6 1440 3635 0 14 Dtool_Ns0b95Tx 0 5 3 mat 1 3739  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  9 translate 1 3671  
2031 14 Dtool_Ns0b2yX5 0 4 1441 3630 0 14 Dtool_Ns0b2yX5 0 5 3 mat 1 3755  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  2 cs 1 3584  
2032 14 Dtool_Ns0bZHTC 0 4 1441 3630 0 14 Dtool_Ns0bZHTC 0 4 3 mat 1 3755  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  
2033 14 Dtool_Ns0bSFhe 0 4 1441 3630 0 14 Dtool_Ns0bSFhe 0 5 3 mat 1 3734  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  2 cs 1 3584  
2034 14 Dtool_Ns0b1Zen 0 4 1441 3630 0 14 Dtool_Ns0b1Zen 0 4 3 mat 1 3734  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  
2035 14 Dtool_Ns0bXOp_ 0 4 1441 3630 0 14 Dtool_Ns0bXOp_ 0 6 3 mat 1 3766  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  9 translate 1 3675  2 cs 1 3584  
2036 14 Dtool_Ns0bIA7K 0 4 1441 3630 0 14 Dtool_Ns0bIA7K 0 5 3 mat 1 3766  5 scale 1 3675  5 shear 1 3675  3 hpr 1 3675  9 translate 1 3675  
2037 14 Dtool_Ns0bR3yU 0 4 1441 3630 0 14 Dtool_Ns0bR3yU 0 6 3 mat 1 3745  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  9 translate 1 3672  2 cs 1 3584  
2038 14 Dtool_Ns0bKHGg 0 4 1441 3630 0 14 Dtool_Ns0bKHGg 0 5 3 mat 1 3745  5 scale 1 3672  5 shear 1 3672  3 hpr 1 3672  9 translate 1 3672  
2039 14 Dtool_Ns0b0nyg 0 6 1442 3635 0 14 Dtool_Ns0b0nyg 0 5 3 mat 1 3756  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  2 cs 1 3584  
2040 14 Dtool_Ns0bWfBa 0 6 1442 3635 0 14 Dtool_Ns0bWfBa 0 4 3 mat 1 3756  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  
2041 14 Dtool_Ns0bSuaq 0 6 1442 3635 0 14 Dtool_Ns0bSuaq 0 5 3 mat 1 3735  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  2 cs 1 3584  
2042 14 Dtool_Ns0b7noj 0 6 1442 3635 0 14 Dtool_Ns0b7noj 0 4 3 mat 1 3735  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  
2043 14 Dtool_Ns0bBw_r 0 6 1442 3635 0 14 Dtool_Ns0bBw_r 0 6 3 mat 1 3760  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  9 translate 1 3674  2 cs 1 3584  
2044 14 Dtool_Ns0b1_T6 0 6 1442 3635 0 14 Dtool_Ns0b1_T6 0 5 3 mat 1 3760  5 scale 1 3674  5 shear 1 3674  3 hpr 1 3674  9 translate 1 3674  
2045 14 Dtool_Ns0b3x61 0 6 1442 3635 0 14 Dtool_Ns0b3x61 0 6 3 mat 1 3739  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  9 translate 1 3671  2 cs 1 3584  
2046 14 Dtool_Ns0bGpPE 0 6 1442 3635 0 14 Dtool_Ns0bGpPE 0 5 3 mat 1 3739  5 scale 1 3671  5 shear 1 3671  3 hpr 1 3671  9 translate 1 3671  
2047 14 Dtool_Ns0b2peC 0 7 1443 3674 2420 14 Dtool_Ns0b2peC 0 1 7 old_hpr 1 3675  
2048 14 Dtool_Ns0bI0gC 0 7 1443 3671 2347 14 Dtool_Ns0bI0gC 0 1 7 old_hpr 1 3672  
2049 14 Dtool_Ns0bPgfc 0 7 1444 3674 2420 14 Dtool_Ns0bPgfc 0 1 7 new_hpr 1 3675  
2050 14 Dtool_Ns0bZEhc 0 7 1444 3671 2347 14 Dtool_Ns0bZEhc 0 1 7 new_hpr 1 3672  
227
3571 11 MathNumbers 0 141313 11 MathNumbers 11 MathNumbers 0 0 0 0 2051 0 0 0 0 0 0 0 0

3572 10 LVecBase2f 0 26625 10 LVecBase2f 10 LVecBase2f 0 0 0 1 2054 2062 0 61 2055 2056 2057 2058 2059 2060 2061 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3573 10 LVecBase2d 0 26625 10 LVecBase2d 10 LVecBase2d 0 0 0 1 2117 2125 0 61 2118 2119 2120 2121 2122 2123 2124 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3574 10 LVecBase2i 0 26625 10 LVecBase2i 10 LVecBase2i 0 0 0 1 2180 2188 0 58 2181 2182 2183 2184 2185 2186 2187 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3575 9 LVector2f 0 141313 9 LVector2f 9 LVector2f 0 0 0 1 2240 2257 0 16 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 0 0 1 0 3572 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3576 9 LVector2d 0 141313 9 LVector2d 9 LVector2d 0 0 0 1 2258 2275 0 16 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 0 0 1 0 3573 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3577 9 LVector2i 0 141313 9 LVector2i 9 LVector2i 0 0 0 1 2276 2290 0 13 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 0 0 1 0 3574 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

3578 8 LPoint2f 0 141313 8 LPoint2f 8 LPoint2f 0 0 0 1 2291 2306 0 14 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 0 0 1 0 3572 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3579 8 LPoint2d 0 141313 8 LPoint2d 8 LPoint2d 0 0 0 1 2307 2322 0 14 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 0 0 1 0 3573 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3580 8 LPoint2i 0 141313 8 LPoint2i 8 LPoint2i 0 0 0 1 2323 2337 0 13 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 0 0 1 0 3574 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

3581 10 LVecBase3f 0 26625 10 LVecBase3f 10 LVecBase3f 0 0 0 1 2338 2347 0 71 2339 2340 2341 2342 2343 2344 2345 2346 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3582 10 LVecBase3d 0 26625 10 LVecBase3d 10 LVecBase3d 0 0 0 1 2411 2420 0 71 2412 2413 2414 2415 2416 2417 2418 2419 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3583 10 LVecBase3i 0 26625 10 LVecBase3i 10 LVecBase3i 0 0 0 1 2484 2493 0 68 2485 2486 2487 2488 2489 2490 2491 2492 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3584 16 CoordinateSystem 0 532481 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

3585 9 LVector3f 0 141313 9 LVector3f 9 LVector3f 0 0 0 1 2558 2591 0 32 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 0 0 1 0 3581 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3586 9 LVector3d 0 141313 9 LVector3d 9 LVector3d 0 0 0 1 2592 2625 0 32 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 0 0 1 0 3582 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3587 9 LVector3i 0 141313 9 LVector3i 9 LVector3i 0 0 0 1 2626 2652 0 25 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 0 0 1 0 3583 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3588 8 LPoint3f 0 141313 8 LPoint3f 8 LPoint3f 0 0 0 1 2653 2675 0 21 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 0 0 1 0 3581 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3589 8 LPoint3d 0 141313 8 LPoint3d 8 LPoint3d 0 0 0 1 2676 2698 0 21 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 0 0 1 0 3582 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3590 8 LPoint3i 0 141313 8 LPoint3i 8 LPoint3i 0 0 0 1 2699 2720 0 20 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 0 0 1 0 3583 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

3591 10 LVecBase4f 0 26625 10 LVecBase4f 10 LVecBase4f 0 0 0 1 2721 2731 0 69 2722 2723 2724 2725 2726 2727 2728 2729 2730 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3592 19 UnalignedLVecBase4f 0 141313 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 1 2792 2801 0 8 2793 2794 2795 2796 2797 2798 2799 2800 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3593 10 LVecBase4d 0 26625 10 LVecBase4d 10 LVecBase4d 0 0 0 1 2802 2812 0 69 2803 2804 2805 2806 2807 2808 2809 2810 2811 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3594 19 UnalignedLVecBase4d 0 141313 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 1 2873 2882 0 8 2874 2875 2876 2877 2878 2879 2880 2881 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3595 10 LVecBase4i 0 26625 10 LVecBase4i 10 LVecBase4i 0 0 0 1 2883 2893 0 66 2884 2885 2886 2887 2888 2889 2890 2891 2892 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

3596 19 UnalignedLVecBase4i 0 141313 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 1 2951 2960 0 8 2952 2953 2954 2955 2956 2957 2958 2959 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3597 9 LVector4f 0 141313 9 LVector4f 9 LVector4f 0 0 0 1 2961 2978 0 16 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 0 0 1 0 3591 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3598 9 LVector4d 0 141313 9 LVector4d 9 LVector4d 0 0 0 1 2979 2996 0 16 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 0 0 1 0 3593 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3599 9 LVector4i 0 141313 9 LVector4i 9 LVector4i 0 0 0 1 2997 3013 0 15 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 0 0 1 0 3595 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : LVector4
// Description : This is a four-component vector distance.
////////////////////////////////////////////////////////////////////

3600 8 LPoint4f 0 141313 8 LPoint4f 8 LPoint4f 0 0 0 1 3014 3031 0 16 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 0 0 1 0 3591 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3601 8 LPoint4d 0 141313 8 LPoint4d 8 LPoint4d 0 0 0 1 3032 3049 0 16 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 0 0 1 0 3593 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3602 8 LPoint4i 0 141313 8 LPoint4i 8 LPoint4i 0 0 0 1 3050 3066 0 15 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 0 0 1 0 3595 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

3603 9 LMatrix3f 0 141313 9 LMatrix3f 9 LMatrix3f 0 0 0 1 3074 3149 0 74 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 4 3798 3799 3800 3801 0 0 0 2 3604 3605 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3604 3 Row 0 403457 14 LMatrix3f::Row 14 LMatrix3f::Row 3603 0 0 0 3070 0 3 3067 3068 3069 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3605 4 CRow 0 403457 15 LMatrix3f::CRow 15 LMatrix3f::CRow 3603 0 0 0 3073 0 2 3071 3072 0 0 0 0 0 0

3606 9 LMatrix4f 0 141313 9 LMatrix4f 9 LMatrix4f 0 0 0 1 3159 3244 0 84 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3 3802 3803 3804 0 0 0 2 3607 3608 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3607 3 Row 0 403457 14 LMatrix4f::Row 14 LMatrix4f::Row 3606 0 0 0 3155 0 3 3152 3153 3154 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3608 4 CRow 0 403457 15 LMatrix4f::CRow 15 LMatrix4f::CRow 3606 0 0 0 3158 0 2 3156 3157 0 0 0 0 0 0

3609 18 UnalignedLMatrix4f 0 141313 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 1 3245 3252 0 6 3246 3247 3248 3249 3250 3251 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3610 9 LMatrix3d 0 141313 9 LMatrix3d 9 LMatrix3d 0 0 0 1 3260 3335 0 74 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 4 3805 3806 3807 3808 0 0 0 2 3611 3612 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

3611 3 Row 0 403457 14 LMatrix3d::Row 14 LMatrix3d::Row 3610 0 0 0 3256 0 3 3253 3254 3255 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3612 4 CRow 0 403457 15 LMatrix3d::CRow 15 LMatrix3d::CRow 3610 0 0 0 3259 0 2 3257 3258 0 0 0 0 0 0

3613 9 LMatrix4d 0 141313 9 LMatrix4d 9 LMatrix4d 0 0 0 1 3343 3428 0 84 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3 3809 3810 3811 0 0 0 2 3614 3615 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

3614 3 Row 0 403457 14 LMatrix4d::Row 14 LMatrix4d::Row 3613 0 0 0 3339 0 3 3336 3337 3338 0 0 0 0 0 66
// These helper classes are used to support two-level operator [].

3615 4 CRow 0 403457 15 LMatrix4d::CRow 15 LMatrix4d::CRow 3613 0 0 0 3342 0 2 3340 3341 0 0 0 0 0 0

3616 18 UnalignedLMatrix4d 0 141313 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 1 3429 3436 0 6 3430 3431 3432 3433 3434 3435 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

3617 12 LQuaternionf 0 141313 12 LQuaternionf 12 LQuaternionf 0 0 0 1 3449 3496 0 46 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 0 0 1 0 3591 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3618 12 LQuaterniond 0 141313 12 LQuaterniond 12 LQuaterniond 0 0 0 1 3497 3544 0 46 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 0 0 1 0 3593 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

3619 10 LRotationf 0 141313 10 LRotationf 10 LRotationf 0 0 0 1 3545 3549 0 3 3546 3547 3548 0 0 1 0 3617 0 0 0 0 240
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

3620 10 LRotationd 0 141313 10 LRotationd 10 LRotationd 0 0 0 1 3550 3554 0 3 3551 3552 3553 0 0 1 0 3618 0 0 0 0 240
////////////////////////////////////////////////////////////////////////
//       Class : LRotation
// Description : This is a unit quaternion representing a rotation.
////////////////////////////////////////////////////////////////////////

3621 13 LOrientationf 0 141313 13 LOrientationf 13 LOrientationf 0 0 0 1 3555 3558 0 2 3556 3557 0 0 1 0 3617 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

3622 13 LOrientationd 0 141313 13 LOrientationd 13 LOrientationd 0 0 0 1 3559 3562 0 2 3560 3561 0 0 1 0 3618 0 0 0 0 247
////////////////////////////////////////////////////////////////////////
//       Class : LOrientation
// Description : This is a unit quaternion representing an orientation.
////////////////////////////////////////////////////////////////////////

3623 19 ConfigVariableColor 0 141313 19 ConfigVariableColor 19 ConfigVariableColor 0 0 0 1 3563 3570 0 5 3564 3566 3567 3568 3569 0 1 3565 1 0 3624 0 0 0 0 868
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableColor
// Description : This is a convenience class to specialize
//               ConfigVariable as a set of floating-point types
//               representing a color value.
//
//               It interprets the color differently depending on
//               how many words were specified: if only one, it
//               is interpreted as a shade of gray with alpha 1.
//               If two values were specified, a grayscale and
//               alpha pair.  If three, a set of R, G, B values
//               with alpha 1, and if four, a complete RGBA color.
//
//               This isn't defined in dtool because it relies on
//               the LColor class, which is defined in linmath.
////////////////////////////////////////////////////////////////////

3624 14 ConfigVariable 0 2049 14 ConfigVariable 14 ConfigVariable 0 0 0 0 0 0 0 0 0 0 0 0 709
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariable
// Description : This is a generic, untyped ConfigVariable.  It is
//               also the base class for the typed ConfigVariables,
//               and contains all of the code common to
//               ConfigVariables of all types (except
//               ConfigVariableList, which is a bit of a special
//               case).
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

3625 12 LVecBase2f * 0 8576 12 LVecBase2f * 12 LVecBase2f * 0 0 3572 0 0 0 0 0 0 0 0 0 0

3626 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 3627 0 0 0 0 0 0 0 0 0 0

3627 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 3572 0 0 0 0 0 0 0 0 0 0

3628 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

3629 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

3630 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

3631 9 _object * 0 8576 9 _object * 9 _object * 0 0 3632 0 0 0 0 0 0 0 0 0 0

3632 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

3633 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

3634 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

3635 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

3636 23 ChecksumHashGenerator * 0 8576 23 ChecksumHashGenerator * 23 ChecksumHashGenerator * 0 0 3637 0 0 0 0 0 0 0 0 0 0

3637 21 ChecksumHashGenerator 0 2048 21 ChecksumHashGenerator 21 ChecksumHashGenerator 0 0 0 0 0 0 0 0 0 0 0 0 339
////////////////////////////////////////////////////////////////////
//       Class : ChecksumHashGenerator
// Description : This is a specific kind of HashGenerator that simply
//               adds up all of the ints.  Nothing fancy, and pretty
//               quick.
////////////////////////////////////////////////////////////////////

3638 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 3639 0 0 0 0 0 0 0 0 0 0

3639 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

3640 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 3641 0 0 0 0 0 0 0 0 0 0

3641 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

3642 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 3643 0 0 0 0 0 0 0 0 0 0

3643 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

3644 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

3645 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 3644 0 0 0 0 0 0 0 0 0 0

3646 12 LVecBase2d * 0 8576 12 LVecBase2d * 12 LVecBase2d * 0 0 3573 0 0 0 0 0 0 0 0 0 0

3647 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 3648 0 0 0 0 0 0 0 0 0 0

3648 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 3573 0 0 0 0 0 0 0 0 0 0

3649 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

3650 12 LVecBase2i * 0 8576 12 LVecBase2i * 12 LVecBase2i * 0 0 3574 0 0 0 0 0 0 0 0 0 0

3651 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 3652 0 0 0 0 0 0 0 0 0 0

3652 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 3574 0 0 0 0 0 0 0 0 0 0

3653 11 LVector2f * 0 8576 11 LVector2f * 11 LVector2f * 0 0 3575 0 0 0 0 0 0 0 0 0 0

3654 17 LVector2f const * 0 8576 17 LVector2f const * 17 LVector2f const * 0 0 3655 0 0 0 0 0 0 0 0 0 0

3655 15 LVector2f const 0 8832 15 LVector2f const 15 LVector2f const 0 0 3575 0 0 0 0 0 0 0 0 0 0

3656 11 LVector2d * 0 8576 11 LVector2d * 11 LVector2d * 0 0 3576 0 0 0 0 0 0 0 0 0 0

3657 17 LVector2d const * 0 8576 17 LVector2d const * 17 LVector2d const * 0 0 3658 0 0 0 0 0 0 0 0 0 0

3658 15 LVector2d const 0 8832 15 LVector2d const 15 LVector2d const 0 0 3576 0 0 0 0 0 0 0 0 0 0

3659 11 LVector2i * 0 8576 11 LVector2i * 11 LVector2i * 0 0 3577 0 0 0 0 0 0 0 0 0 0

3660 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 3661 0 0 0 0 0 0 0 0 0 0

3661 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 3577 0 0 0 0 0 0 0 0 0 0

3662 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 3578 0 0 0 0 0 0 0 0 0 0

3663 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 3664 0 0 0 0 0 0 0 0 0 0

3664 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 3578 0 0 0 0 0 0 0 0 0 0

3665 10 LPoint2d * 0 8576 10 LPoint2d * 10 LPoint2d * 0 0 3579 0 0 0 0 0 0 0 0 0 0

3666 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 3667 0 0 0 0 0 0 0 0 0 0

3667 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 3579 0 0 0 0 0 0 0 0 0 0

3668 10 LPoint2i * 0 8576 10 LPoint2i * 10 LPoint2i * 0 0 3580 0 0 0 0 0 0 0 0 0 0

3669 16 LPoint2i const * 0 8576 16 LPoint2i const * 16 LPoint2i const * 0 0 3670 0 0 0 0 0 0 0 0 0 0

3670 14 LPoint2i const 0 8832 14 LPoint2i const 14 LPoint2i const 0 0 3580 0 0 0 0 0 0 0 0 0 0

3671 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 3581 0 0 0 0 0 0 0 0 0 0

3672 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 3673 0 0 0 0 0 0 0 0 0 0

3673 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 3581 0 0 0 0 0 0 0 0 0 0

3674 12 LVecBase3d * 0 8576 12 LVecBase3d * 12 LVecBase3d * 0 0 3582 0 0 0 0 0 0 0 0 0 0

3675 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 3676 0 0 0 0 0 0 0 0 0 0

3676 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 3582 0 0 0 0 0 0 0 0 0 0

3677 12 LVecBase3i * 0 8576 12 LVecBase3i * 12 LVecBase3i * 0 0 3583 0 0 0 0 0 0 0 0 0 0

3678 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 3679 0 0 0 0 0 0 0 0 0 0

3679 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 3583 0 0 0 0 0 0 0 0 0 0

3680 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 3585 0 0 0 0 0 0 0 0 0 0

3681 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 3682 0 0 0 0 0 0 0 0 0 0

3682 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 3585 0 0 0 0 0 0 0 0 0 0

3683 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 3586 0 0 0 0 0 0 0 0 0 0

3684 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 3685 0 0 0 0 0 0 0 0 0 0

3685 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 3586 0 0 0 0 0 0 0 0 0 0

3686 11 LVector3i * 0 8576 11 LVector3i * 11 LVector3i * 0 0 3587 0 0 0 0 0 0 0 0 0 0

3687 17 LVector3i const * 0 8576 17 LVector3i const * 17 LVector3i const * 0 0 3688 0 0 0 0 0 0 0 0 0 0

3688 15 LVector3i const 0 8832 15 LVector3i const 15 LVector3i const 0 0 3587 0 0 0 0 0 0 0 0 0 0

3689 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 3588 0 0 0 0 0 0 0 0 0 0

3690 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 3691 0 0 0 0 0 0 0 0 0 0

3691 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 3588 0 0 0 0 0 0 0 0 0 0

3692 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 3589 0 0 0 0 0 0 0 0 0 0

3693 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 3694 0 0 0 0 0 0 0 0 0 0

3694 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 3589 0 0 0 0 0 0 0 0 0 0

3695 10 LPoint3i * 0 8576 10 LPoint3i * 10 LPoint3i * 0 0 3590 0 0 0 0 0 0 0 0 0 0

3696 16 LPoint3i const * 0 8576 16 LPoint3i const * 16 LPoint3i const * 0 0 3697 0 0 0 0 0 0 0 0 0 0

3697 14 LPoint3i const 0 8832 14 LPoint3i const 14 LPoint3i const 0 0 3590 0 0 0 0 0 0 0 0 0 0

3698 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 3591 0 0 0 0 0 0 0 0 0 0

3699 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 3700 0 0 0 0 0 0 0 0 0 0

3700 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 3591 0 0 0 0 0 0 0 0 0 0

3701 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 3702 0 0 0 0 0 0 0 0 0 0

3702 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 3592 0 0 0 0 0 0 0 0 0 0

3703 21 UnalignedLVecBase4f * 0 8576 21 UnalignedLVecBase4f * 21 UnalignedLVecBase4f * 0 0 3592 0 0 0 0 0 0 0 0 0 0

3704 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 3593 0 0 0 0 0 0 0 0 0 0

3705 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 3706 0 0 0 0 0 0 0 0 0 0

3706 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 3593 0 0 0 0 0 0 0 0 0 0

3707 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 3708 0 0 0 0 0 0 0 0 0 0

3708 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 3594 0 0 0 0 0 0 0 0 0 0

3709 21 UnalignedLVecBase4d * 0 8576 21 UnalignedLVecBase4d * 21 UnalignedLVecBase4d * 0 0 3594 0 0 0 0 0 0 0 0 0 0

3710 12 LVecBase4i * 0 8576 12 LVecBase4i * 12 LVecBase4i * 0 0 3595 0 0 0 0 0 0 0 0 0 0

3711 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 3712 0 0 0 0 0 0 0 0 0 0

3712 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 3595 0 0 0 0 0 0 0 0 0 0

3713 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 3714 0 0 0 0 0 0 0 0 0 0

3714 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 3596 0 0 0 0 0 0 0 0 0 0

3715 21 UnalignedLVecBase4i * 0 8576 21 UnalignedLVecBase4i * 21 UnalignedLVecBase4i * 0 0 3596 0 0 0 0 0 0 0 0 0 0

3716 11 LVector4f * 0 8576 11 LVector4f * 11 LVector4f * 0 0 3597 0 0 0 0 0 0 0 0 0 0

3717 17 LVector4f const * 0 8576 17 LVector4f const * 17 LVector4f const * 0 0 3718 0 0 0 0 0 0 0 0 0 0

3718 15 LVector4f const 0 8832 15 LVector4f const 15 LVector4f const 0 0 3597 0 0 0 0 0 0 0 0 0 0

3719 11 LVector4d * 0 8576 11 LVector4d * 11 LVector4d * 0 0 3598 0 0 0 0 0 0 0 0 0 0

3720 17 LVector4d const * 0 8576 17 LVector4d const * 17 LVector4d const * 0 0 3721 0 0 0 0 0 0 0 0 0 0

3721 15 LVector4d const 0 8832 15 LVector4d const 15 LVector4d const 0 0 3598 0 0 0 0 0 0 0 0 0 0

3722 11 LVector4i * 0 8576 11 LVector4i * 11 LVector4i * 0 0 3599 0 0 0 0 0 0 0 0 0 0

3723 17 LVector4i const * 0 8576 17 LVector4i const * 17 LVector4i const * 0 0 3724 0 0 0 0 0 0 0 0 0 0

3724 15 LVector4i const 0 8832 15 LVector4i const 15 LVector4i const 0 0 3599 0 0 0 0 0 0 0 0 0 0

3725 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 3600 0 0 0 0 0 0 0 0 0 0

3726 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 3727 0 0 0 0 0 0 0 0 0 0

3727 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 3600 0 0 0 0 0 0 0 0 0 0

3728 10 LPoint4d * 0 8576 10 LPoint4d * 10 LPoint4d * 0 0 3601 0 0 0 0 0 0 0 0 0 0

3729 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 3730 0 0 0 0 0 0 0 0 0 0

3730 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 3601 0 0 0 0 0 0 0 0 0 0

3731 10 LPoint4i * 0 8576 10 LPoint4i * 10 LPoint4i * 0 0 3602 0 0 0 0 0 0 0 0 0 0

3732 16 LPoint4i const * 0 8576 16 LPoint4i const * 16 LPoint4i const * 0 0 3733 0 0 0 0 0 0 0 0 0 0

3733 14 LPoint4i const 0 8832 14 LPoint4i const 14 LPoint4i const 0 0 3602 0 0 0 0 0 0 0 0 0 0

3734 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 3603 0 0 0 0 0 0 0 0 0 0

3735 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 3736 0 0 0 0 0 0 0 0 0 0

3736 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 3603 0 0 0 0 0 0 0 0 0 0

3737 5 Row * 0 8576 16 LMatrix3f::Row * 16 LMatrix3f::Row * 0 0 3604 0 0 0 0 0 0 0 0 0 0

3738 6 CRow * 0 8576 17 LMatrix3f::CRow * 17 LMatrix3f::CRow * 0 0 3605 0 0 0 0 0 0 0 0 0 0

3739 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 3740 0 0 0 0 0 0 0 0 0 0

3740 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 3606 0 0 0 0 0 0 0 0 0 0

3741 11 Row const * 0 8576 22 LMatrix3f::Row const * 22 LMatrix3f::Row const * 0 0 3742 0 0 0 0 0 0 0 0 0 0

3742 9 Row const 0 8832 20 LMatrix3f::Row const 20 LMatrix3f::Row const 0 0 3604 0 0 0 0 0 0 0 0 0 0

3743 12 CRow const * 0 8576 23 LMatrix3f::CRow const * 23 LMatrix3f::CRow const * 0 0 3744 0 0 0 0 0 0 0 0 0 0

3744 10 CRow const 0 8832 21 LMatrix3f::CRow const 21 LMatrix3f::CRow const 0 0 3605 0 0 0 0 0 0 0 0 0 0

3745 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 3606 0 0 0 0 0 0 0 0 0 0

3746 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 3747 0 0 0 0 0 0 0 0 0 0

3747 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 3609 0 0 0 0 0 0 0 0 0 0

3748 5 Row * 0 8576 16 LMatrix4f::Row * 16 LMatrix4f::Row * 0 0 3607 0 0 0 0 0 0 0 0 0 0

3749 6 CRow * 0 8576 17 LMatrix4f::CRow * 17 LMatrix4f::CRow * 0 0 3608 0 0 0 0 0 0 0 0 0 0

3750 11 Row const * 0 8576 22 LMatrix4f::Row const * 22 LMatrix4f::Row const * 0 0 3751 0 0 0 0 0 0 0 0 0 0

3751 9 Row const 0 8832 20 LMatrix4f::Row const 20 LMatrix4f::Row const 0 0 3607 0 0 0 0 0 0 0 0 0 0

3752 12 CRow const * 0 8576 23 LMatrix4f::CRow const * 23 LMatrix4f::CRow const * 0 0 3753 0 0 0 0 0 0 0 0 0 0

3753 10 CRow const 0 8832 21 LMatrix4f::CRow const 21 LMatrix4f::CRow const 0 0 3608 0 0 0 0 0 0 0 0 0 0

3754 20 UnalignedLMatrix4f * 0 8576 20 UnalignedLMatrix4f * 20 UnalignedLMatrix4f * 0 0 3609 0 0 0 0 0 0 0 0 0 0

3755 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 3610 0 0 0 0 0 0 0 0 0 0

3756 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 3757 0 0 0 0 0 0 0 0 0 0

3757 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 3610 0 0 0 0 0 0 0 0 0 0

3758 5 Row * 0 8576 16 LMatrix3d::Row * 16 LMatrix3d::Row * 0 0 3611 0 0 0 0 0 0 0 0 0 0

3759 6 CRow * 0 8576 17 LMatrix3d::CRow * 17 LMatrix3d::CRow * 0 0 3612 0 0 0 0 0 0 0 0 0 0

3760 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 3761 0 0 0 0 0 0 0 0 0 0

3761 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 3613 0 0 0 0 0 0 0 0 0 0

3762 11 Row const * 0 8576 22 LMatrix3d::Row const * 22 LMatrix3d::Row const * 0 0 3763 0 0 0 0 0 0 0 0 0 0

3763 9 Row const 0 8832 20 LMatrix3d::Row const 20 LMatrix3d::Row const 0 0 3611 0 0 0 0 0 0 0 0 0 0

3764 12 CRow const * 0 8576 23 LMatrix3d::CRow const * 23 LMatrix3d::CRow const * 0 0 3765 0 0 0 0 0 0 0 0 0 0

3765 10 CRow const 0 8832 21 LMatrix3d::CRow const 21 LMatrix3d::CRow const 0 0 3612 0 0 0 0 0 0 0 0 0 0

3766 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 3613 0 0 0 0 0 0 0 0 0 0

3767 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 3768 0 0 0 0 0 0 0 0 0 0

3768 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 3616 0 0 0 0 0 0 0 0 0 0

3769 5 Row * 0 8576 16 LMatrix4d::Row * 16 LMatrix4d::Row * 0 0 3614 0 0 0 0 0 0 0 0 0 0

3770 6 CRow * 0 8576 17 LMatrix4d::CRow * 17 LMatrix4d::CRow * 0 0 3615 0 0 0 0 0 0 0 0 0 0

3771 11 Row const * 0 8576 22 LMatrix4d::Row const * 22 LMatrix4d::Row const * 0 0 3772 0 0 0 0 0 0 0 0 0 0

3772 9 Row const 0 8832 20 LMatrix4d::Row const 20 LMatrix4d::Row const 0 0 3614 0 0 0 0 0 0 0 0 0 0

3773 12 CRow const * 0 8576 23 LMatrix4d::CRow const * 23 LMatrix4d::CRow const * 0 0 3774 0 0 0 0 0 0 0 0 0 0

3774 10 CRow const 0 8832 21 LMatrix4d::CRow const 21 LMatrix4d::CRow const 0 0 3615 0 0 0 0 0 0 0 0 0 0

3775 20 UnalignedLMatrix4d * 0 8576 20 UnalignedLMatrix4d * 20 UnalignedLMatrix4d * 0 0 3616 0 0 0 0 0 0 0 0 0 0

3776 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 3617 0 0 0 0 0 0 0 0 0 0

3777 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 3778 0 0 0 0 0 0 0 0 0 0

3778 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 3617 0 0 0 0 0 0 0 0 0 0

3779 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 3618 0 0 0 0 0 0 0 0 0 0

3780 20 LQuaterniond const * 0 8576 20 LQuaterniond const * 20 LQuaterniond const * 0 0 3781 0 0 0 0 0 0 0 0 0 0

3781 18 LQuaterniond const 0 8832 18 LQuaterniond const 18 LQuaterniond const 0 0 3618 0 0 0 0 0 0 0 0 0 0

3782 12 LRotationf * 0 8576 12 LRotationf * 12 LRotationf * 0 0 3619 0 0 0 0 0 0 0 0 0 0

3783 18 LRotationf const * 0 8576 18 LRotationf const * 18 LRotationf const * 0 0 3784 0 0 0 0 0 0 0 0 0 0

3784 16 LRotationf const 0 8832 16 LRotationf const 16 LRotationf const 0 0 3619 0 0 0 0 0 0 0 0 0 0

3785 12 LRotationd * 0 8576 12 LRotationd * 12 LRotationd * 0 0 3620 0 0 0 0 0 0 0 0 0 0

3786 18 LRotationd const * 0 8576 18 LRotationd const * 18 LRotationd const * 0 0 3787 0 0 0 0 0 0 0 0 0 0

3787 16 LRotationd const 0 8832 16 LRotationd const 16 LRotationd const 0 0 3620 0 0 0 0 0 0 0 0 0 0

3788 15 LOrientationf * 0 8576 15 LOrientationf * 15 LOrientationf * 0 0 3621 0 0 0 0 0 0 0 0 0 0

3789 21 LOrientationf const * 0 8576 21 LOrientationf const * 21 LOrientationf const * 0 0 3790 0 0 0 0 0 0 0 0 0 0

3790 19 LOrientationf const 0 8832 19 LOrientationf const 19 LOrientationf const 0 0 3621 0 0 0 0 0 0 0 0 0 0

3791 15 LOrientationd * 0 8576 15 LOrientationd * 15 LOrientationd * 0 0 3622 0 0 0 0 0 0 0 0 0 0

3792 21 LOrientationd const * 0 8576 21 LOrientationd const * 21 LOrientationd const * 0 0 3793 0 0 0 0 0 0 0 0 0 0

3793 19 LOrientationd const 0 8832 19 LOrientationd const 19 LOrientationd const 0 0 3622 0 0 0 0 0 0 0 0 0 0

3794 21 ConfigVariableColor * 0 8576 21 ConfigVariableColor * 21 ConfigVariableColor * 0 0 3623 0 0 0 0 0 0 0 0 0 0

3795 27 ConfigVariableColor const * 0 8576 27 ConfigVariableColor const * 27 ConfigVariableColor const * 0 0 3796 0 0 0 0 0 0 0 0 0 0

3796 25 ConfigVariableColor const 0 8832 25 ConfigVariableColor const 25 ConfigVariableColor const 0 0 3623 0 0 0 0 0 0 0 0 0 0

3797 6 string 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
14
3798 0 0 1049 8 get_rows 4 size 7 get_row 
3799 0 0 1049 8 get_cols 4 size 7 get_col 
3800 0 0 1049 9 get_col2s 4 size 8 get_col2 
3801 0 0 1049 9 get_row2s 4 size 8 get_row2 
3802 0 0 1137 8 get_rows 4 size 7 get_row 
3803 0 0 1137 8 get_cols 4 size 7 get_col 
3804 0 0 1137 9 get_row3s 4 size 8 get_row3 
3805 0 0 1242 8 get_rows 4 size 7 get_row 
3806 0 0 1242 8 get_cols 4 size 7 get_col 
3807 0 0 1242 9 get_col2s 4 size 8 get_col2 
3808 0 0 1242 9 get_row2s 4 size 8 get_row2 
3809 0 0 1328 8 get_rows 4 size 7 get_row 
3810 0 0 1328 8 get_cols 4 size 7 get_col 
3811 0 0 1328 9 get_row3s 4 size 8 get_row3 
