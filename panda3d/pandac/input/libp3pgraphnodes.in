1430660009
2 3
16 libp3pgraphnodes 4 Bgt0 12 panda3d.core 
164
157 15 upcast_to_Light 0 12 321 26 LightNode::upcast_to_Light 0 1 5 30
upcast from LightNode to Light
40
Light *LightNode::upcast_to_Light(void);

158 21 downcast_to_LightNode 0 12 322 28 Light::downcast_to_LightNode 0 1 6 32
downcast from Light to LightNode
46
LightNode *Light::downcast_to_LightNode(void);

159 19 upcast_to_PandaNode 0 12 321 30 LightNode::upcast_to_PandaNode 0 1 7 34
upcast from LightNode to PandaNode
48
PandaNode *LightNode::upcast_to_PandaNode(void);

160 21 downcast_to_LightNode 0 12 323 32 PandaNode::downcast_to_LightNode 0 1 8 36
downcast from PandaNode to LightNode
50
LightNode *PandaNode::downcast_to_LightNode(void);

161 6 output 0 6 321 17 LightNode::output 0 1 1 312
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
51
virtual void LightNode::output(ostream &out) const;

162 5 write 0 6 321 16 LightNode::write 0 2 2 3 221
////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
74
virtual void LightNode::write(ostream &out, int indent_level = (0)) const;

163 14 get_class_type 0 4 321 25 LightNode::get_class_type 0 1 4 0
50
static TypeHandle LightNode::get_class_type(void);

164 10 ~LightNode 0 4 321 21 LightNode::~LightNode 0 0 0
28
LightNode::~LightNode(void);

165 12 AmbientLight 0 4 324 26 AmbientLight::AmbientLight 0 1 9 602
////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
61
AmbientLight::AmbientLight(basic_string< char > const &name);

166 14 get_class_type 0 4 324 28 AmbientLight::get_class_type 0 1 10 0
53
static TypeHandle AmbientLight::get_class_type(void);

167 13 ~AmbientLight 0 4 324 27 AmbientLight::~AmbientLight 0 0 0
34
AmbientLight::~AmbientLight(void);

168 12 CallbackNode 0 4 325 26 CallbackNode::CallbackNode 0 1 11 455
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
61
CallbackNode::CallbackNode(basic_string< char > const &name);

169 17 set_cull_callback 0 4 325 31 CallbackNode::set_cull_callback 0 1 12 1677
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the cull traversal.  This
//               callback will be made during the cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               node has been determined to be visible and it has
//               passed the bounding-volume test, so it lies within
//               the view frustum.
//
//               The callback is passed an instance of a
//               NodeCullCallbackData, which contains pointers to the
//               CullTraverser and CullTraverserData--enough data to
//               examine the current node and its place within the
//               scene graph.  The callback *replaces* the normal cull
//               behavior, so if your callback does nothing, the cull
//               traversal will not continue below this node.  If you
//               wish the cull traversal to continue to visit this
//               node and below, you must call cbdata->upcall()
//               from your callback.
////////////////////////////////////////////////////////////////////
68
inline void CallbackNode::set_cull_callback(CallbackObject *object);

170 19 clear_cull_callback 0 4 325 33 CallbackNode::clear_cull_callback 0 1 13 317
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
52
inline void CallbackNode::clear_cull_callback(void);

171 17 get_cull_callback 0 4 325 31 CallbackNode::get_cull_callback 0 1 14 285
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
67
inline CallbackObject *CallbackNode::get_cull_callback(void) const;

172 17 set_draw_callback 0 4 325 31 CallbackNode::set_draw_callback 0 1 15 1477
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the draw traversal.  This
//               callback will be made during the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state has been loaded with the correct
//               modelview transform and render state, and the
//               primitives (if any) in this node are ready to be
//               drawn.
//
//               The callback is passed an instance of a
//               GeomDrawCallbackData, which contains pointers to the
//               current state and transform, as well as the current
//               GSG.  There is a Geom pointer as well, but it will
//               always be NULL to this callback, since the
//               CallbackNode does not itself contain any Geoms.
////////////////////////////////////////////////////////////////////
68
inline void CallbackNode::set_draw_callback(CallbackObject *object);

173 19 clear_draw_callback 0 4 325 33 CallbackNode::clear_draw_callback 0 1 16 317
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
52
inline void CallbackNode::clear_draw_callback(void);

174 17 get_draw_callback 0 4 325 31 CallbackNode::get_draw_callback 0 1 17 285
////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
67
inline CallbackObject *CallbackNode::get_draw_callback(void) const;

175 14 get_class_type 0 4 325 28 CallbackNode::get_class_type 0 1 18 0
53
static TypeHandle CallbackNode::get_class_type(void);

176 13 ~CallbackNode 0 4 325 27 CallbackNode::~CallbackNode 0 0 0
34
CallbackNode::~CallbackNode(void);

177 11 ComputeNode 0 4 326 24 ComputeNode::ComputeNode 0 1 19 596
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::Constructor
//       Access: Published
//  Description: Creates a ComputeNode with the given name.  Use
//               add_dispatch and  also assign a shader using a
//               ShaderAttrib.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
59
ComputeNode::ComputeNode(basic_string< char > const &name);

178 12 add_dispatch 0 4 326 25 ComputeNode::add_dispatch 0 2 20 21 906
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
////////////////////////////////////////////////////////////////////
161
inline void ComputeNode::add_dispatch(LVecBase3i const &num_groups);
inline void ComputeNode::add_dispatch(int num_groups_x, int num_groups_y, int num_groups_z);

179 18 get_num_dispatches 0 4 326 31 ComputeNode::get_num_dispatches 0 1 22 320
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_num_dispatches
//       Access: Published
//  Description: Returns the number of times add_dispatch has been
//               called on this object.
////////////////////////////////////////////////////////////////////
55
inline int ComputeNode::get_num_dispatches(void) const;

180 12 get_dispatch 0 4 326 25 ComputeNode::get_dispatch 0 1 23 315
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_dispatch
//       Access: Published
//  Description: Returns the group counts of the nth dispatch
//               associated with this object.
////////////////////////////////////////////////////////////////////
64
inline LVecBase3i const &ComputeNode::get_dispatch(int i) const;

181 16 clear_dispatches 0 4 326 29 ComputeNode::clear_dispatches 0 1 24 259
////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::clear_dispatches
//       Access: Published
//  Description: Removes all dispatch commands.
////////////////////////////////////////////////////////////////////
48
inline void ComputeNode::clear_dispatches(void);

182 14 get_class_type 0 4 326 27 ComputeNode::get_class_type 0 1 25 0
52
static TypeHandle ComputeNode::get_class_type(void);

183 12 ~ComputeNode 0 4 326 25 ComputeNode::~ComputeNode 0 0 0
32
ComputeNode::~ComputeNode(void);

184 15 upcast_to_Light 0 12 328 30 LightLensNode::upcast_to_Light 0 1 35 34
upcast from LightLensNode to Light
44
Light *LightLensNode::upcast_to_Light(void);

185 25 downcast_to_LightLensNode 0 12 322 32 Light::downcast_to_LightLensNode 0 1 36 36
downcast from Light to LightLensNode
54
LightLensNode *Light::downcast_to_LightLensNode(void);

186 16 upcast_to_Camera 0 12 328 31 LightLensNode::upcast_to_Camera 0 1 37 35
upcast from LightLensNode to Camera
46
Camera *LightLensNode::upcast_to_Camera(void);

187 25 downcast_to_LightLensNode 0 12 329 33 Camera::downcast_to_LightLensNode 0 1 38 37
downcast from Camera to LightLensNode
55
LightLensNode *Camera::downcast_to_LightLensNode(void);

188 14 ~LightLensNode 0 6 328 29 LightLensNode::~LightLensNode 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual LightLensNode::~LightLensNode(void);

189 16 is_shadow_caster 0 4 328 31 LightLensNode::is_shadow_caster 0 1 26 312
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::is_shadow_caster
//       Access: Published
//  Description: Returns whether this light is configured to cast
//               shadows or not.
////////////////////////////////////////////////////////////////////
50
inline bool LightLensNode::is_shadow_caster(void);

190 17 set_shadow_caster 0 4 328 32 LightLensNode::set_shadow_caster 0 3 27 28 29 1202
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. This is the variant without
//               buffer size, meaning that the current buffer size
//               will be kept (512x512 is the default).
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
////////////////////////////////////////////////////////////////////
171
inline void LightLensNode::set_shadow_caster(bool caster);
inline void LightLensNode::set_shadow_caster(bool caster, int buffer_xsize, int buffer_ysize, int sort = (-10));

191 17 get_shadow_buffer 0 4 328 32 LightLensNode::get_shadow_buffer 0 1 30 497
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::get_shadow_buffer
//       Access: Published
//  Description: Returns the buffer that has been constructed for
//               a given GSG, or NULL if no such buffer has (yet)
//               been constructed.  This should be used for
//               debugging only, you will not need to call this
//               normally.
////////////////////////////////////////////////////////////////////
92
inline GraphicsOutputBase *LightLensNode::get_shadow_buffer(GraphicsStateGuardianBase *gsg);

192 6 output 0 6 328 21 LightLensNode::output 0 1 31 316
// We have to explicitly publish these because they resolve the
// multiple inheritance.

////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void LightLensNode::output(ostream &out) const;

193 5 write 0 6 328 20 LightLensNode::write 0 2 32 33 225
////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
78
virtual void LightLensNode::write(ostream &out, int indent_level = (0)) const;

194 14 get_class_type 0 4 328 29 LightLensNode::get_class_type 0 1 34 0
54
static TypeHandle LightLensNode::get_class_type(void);

195 16 DirectionalLight 0 4 330 34 DirectionalLight::DirectionalLight 0 1 39 610
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
69
DirectionalLight::DirectionalLight(basic_string< char > const &name);

196 18 set_specular_color 0 4 330 36 DirectionalLight::set_specular_color 0 1 40 311
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
74
inline void DirectionalLight::set_specular_color(LVecBase4f const &color);

197 9 get_point 0 4 330 27 DirectionalLight::get_point 0 1 41 652
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &DirectionalLight::get_point(void) const;

198 9 set_point 0 4 330 27 DirectionalLight::set_point 0 1 42 278
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
63
inline void DirectionalLight::set_point(LPoint3f const &point);

199 13 get_direction 0 4 330 31 DirectionalLight::get_direction 0 1 43 382
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
////////////////////////////////////////////////////////////////////
68
inline LVector3f const &DirectionalLight::get_direction(void) const;

200 13 set_direction 0 4 330 31 DirectionalLight::set_direction 0 1 44 275
////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
////////////////////////////////////////////////////////////////////
72
inline void DirectionalLight::set_direction(LVector3f const &direction);

201 14 get_class_type 0 4 330 32 DirectionalLight::get_class_type 0 1 45 0
57
static TypeHandle DirectionalLight::get_class_type(void);

202 17 ~DirectionalLight 0 4 330 35 DirectionalLight::~DirectionalLight 0 0 0
42
DirectionalLight::~DirectionalLight(void);

203 7 LODNode 0 4 331 16 LODNode::LODNode 0 1 46 445
////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
58
inline LODNode::LODNode(basic_string< char > const &name);

204 16 make_default_lod 0 4 331 25 LODNode::make_default_lod 0 1 47 334
////////////////////////////////////////////////////////////////////
//     Function: LODNode::make_default_lod
//       Access: Published, Static
//  Description: Creates a new LODNode of the type specified by the
//               default-lod-type config variable.
////////////////////////////////////////////////////////////////////
88
static PointerTo< LODNode > LODNode::make_default_lod(basic_string< char > const &name);

205 10 add_switch 0 4 331 19 LODNode::add_switch 0 1 48 669
////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
////////////////////////////////////////////////////////////////////
53
inline void LODNode::add_switch(float in, float out);

206 10 set_switch 0 4 331 19 LODNode::set_switch 0 1 49 320
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
////////////////////////////////////////////////////////////////////
64
inline bool LODNode::set_switch(int index, float in, float out);

207 14 clear_switches 0 4 331 23 LODNode::clear_switches 0 1 50 389
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
////////////////////////////////////////////////////////////////////
42
inline void LODNode::clear_switches(void);

208 16 get_num_switches 0 4 331 25 LODNode::get_num_switches 0 1 51 443
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
////////////////////////////////////////////////////////////////////
49
inline int LODNode::get_num_switches(void) const;

209 6 get_in 0 4 331 15 LODNode::get_in 0 1 52 371
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
46
inline float LODNode::get_in(int index) const;

210 7 get_out 0 4 331 16 LODNode::get_out 0 1 53 373
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
////////////////////////////////////////////////////////////////////
47
inline float LODNode::get_out(int index) const;

211 17 get_lowest_switch 0 4 331 26 LODNode::get_lowest_switch 0 1 54 480
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
50
inline int LODNode::get_lowest_switch(void) const;

212 18 get_highest_switch 0 4 331 27 LODNode::get_highest_switch 0 1 55 489
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
////////////////////////////////////////////////////////////////////
51
inline int LODNode::get_highest_switch(void) const;

213 12 force_switch 0 4 331 21 LODNode::force_switch 0 1 56 390
////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
////////////////////////////////////////////////////////////////////
45
inline void LODNode::force_switch(int index);

214 18 clear_force_switch 0 4 331 27 LODNode::clear_force_switch 0 1 57 380
////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
////////////////////////////////////////////////////////////////////
46
inline void LODNode::clear_force_switch(void);

215 13 set_lod_scale 0 4 331 22 LODNode::set_lod_scale 0 1 58 445
//for performance tuning, increasing this value should improve performance
//at the cost of model quality

////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for lod distances. A higher 
//               value means you'll see farther switchs than normal
////////////////////////////////////////////////////////////////////
48
inline void LODNode::set_lod_scale(float value);

216 13 get_lod_scale 0 4 331 22 LODNode::get_lod_scale 0 1 59 262
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for lod distances
////////////////////////////////////////////////////////////////////
48
inline float LODNode::get_lod_scale(void) const;

217 10 set_center 0 4 331 19 LODNode::set_center 0 1 60 408
////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
56
inline void LODNode::set_center(LPoint3f const &center);

218 10 get_center 0 4 331 19 LODNode::get_center 0 1 61 406
////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
////////////////////////////////////////////////////////////////////
55
inline LPoint3f const &LODNode::get_center(void) const;

219 11 show_switch 0 4 331 20 LODNode::show_switch 0 2 62 63 1818
////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
////////////////////////////////////////////////////////////////////
100
void LODNode::show_switch(int index);
void LODNode::show_switch(int index, LVecBase4f const &color);

220 11 hide_switch 0 4 331 20 LODNode::hide_switch 0 1 64 262
////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_switch
//       Access: Published
//  Description: Disables a previous call to show_switch().
////////////////////////////////////////////////////////////////////
37
void LODNode::hide_switch(int index);

221 17 show_all_switches 0 4 331 26 LODNode::show_all_switches 0 1 65 267
////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_all_switches
//       Access: Published
//  Description: Shows all levels in their default colors.
////////////////////////////////////////////////////////////////////
38
void LODNode::show_all_switches(void);

222 17 hide_all_switches 0 4 331 26 LODNode::hide_all_switches 0 1 66 303
////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_all_switches
//       Access: Published
//  Description: Hides all levels, restoring the LODNode to normal
//               operation.
////////////////////////////////////////////////////////////////////
38
void LODNode::hide_all_switches(void);

223 12 is_any_shown 0 4 331 21 LODNode::is_any_shown 0 1 67 400
////////////////////////////////////////////////////////////////////
//     Function: LODNode::is_any_shown
//       Access: Published
//  Description: Returns true if any switch has been shown with
//               show_switch(), indicating the LODNode is in debug
//               show mode; or false if it is in the normal mode.
////////////////////////////////////////////////////////////////////
46
inline bool LODNode::is_any_shown(void) const;

224 19 verify_child_bounds 0 4 331 28 LODNode::verify_child_bounds 0 1 68 549
////////////////////////////////////////////////////////////////////
//     Function: LODNode::verify_child_bounds
//       Access: Published
//  Description: Returns true if the bounding volumes for the geometry
//               of each fhild node entirely fits within the
//               switch_in radius for that child, or false otherwise.
//               It is almost always a mistake for the geometry of an
//               LOD level to be larger than its switch_in radius.
////////////////////////////////////////////////////////////////////
46
bool LODNode::verify_child_bounds(void) const;

225 14 get_class_type 0 4 331 23 LODNode::get_class_type 0 1 69 0
48
static TypeHandle LODNode::get_class_type(void);

226 8 ~LODNode 0 4 331 17 LODNode::~LODNode 0 0 0
24
LODNode::~LODNode(void);

227 11 FadeLODNode 0 4 332 24 FadeLODNode::FadeLODNode 0 1 70 453
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
59
FadeLODNode::FadeLODNode(basic_string< char > const &name);

228 13 set_fade_time 0 4 332 26 FadeLODNode::set_fade_time 0 1 71 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
48
inline void FadeLODNode::set_fade_time(float t);

229 13 get_fade_time 0 4 332 26 FadeLODNode::get_fade_time 0 1 72 270
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
////////////////////////////////////////////////////////////////////
52
inline float FadeLODNode::get_fade_time(void) const;

230 12 set_fade_bin 0 4 332 25 FadeLODNode::set_fade_bin 0 1 73 369
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_bin
//       Access: Published
//  Description: Specifies the cull bin and draw order that is
//               assigned to the fading part of the geometry during a
//               transition.
////////////////////////////////////////////////////////////////////
81
void FadeLODNode::set_fade_bin(basic_string< char > const &name, int draw_order);

231 17 get_fade_bin_name 0 4 332 30 FadeLODNode::get_fade_bin_name 0 1 74 340
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_name
//       Access: Published
//  Description: Returns the cull bin that is assigned to the fading
//               part of the geometry during a transition.
////////////////////////////////////////////////////////////////////
78
inline basic_string< char > const &FadeLODNode::get_fade_bin_name(void) const;

232 23 get_fade_bin_draw_order 0 4 332 36 FadeLODNode::get_fade_bin_draw_order 0 1 75 391
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_draw_order
//       Access: Published
//  Description: Returns the draw order that is assigned (along with
//               the bin name) to the fading part of the geometry
//               during a transition.
////////////////////////////////////////////////////////////////////
60
inline int FadeLODNode::get_fade_bin_draw_order(void) const;

233 23 set_fade_state_override 0 4 332 36 FadeLODNode::set_fade_state_override 0 1 76 460
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_state_override
//       Access: Published
//  Description: Specifies the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
////////////////////////////////////////////////////////////////////
56
void FadeLODNode::set_fade_state_override(int override);

234 23 get_fade_state_override 0 4 332 36 FadeLODNode::get_fade_state_override 0 1 77 458
////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_state_override
//       Access: Published
//  Description: Returns the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
////////////////////////////////////////////////////////////////////
60
inline int FadeLODNode::get_fade_state_override(void) const;

235 14 get_class_type 0 4 332 27 FadeLODNode::get_class_type 0 1 78 0
52
static TypeHandle FadeLODNode::get_class_type(void);

236 12 ~FadeLODNode 0 4 332 25 FadeLODNode::~FadeLODNode 0 0 0
32
FadeLODNode::~FadeLODNode(void);

237 8 get_trav 0 4 333 30 NodeCullCallbackData::get_trav 0 1 79 457
////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_trav
//       Access: Published
//  Description: Returns the CullTraverser in use at the time of the
//               callback.  This object contains data that does not
//               change during the traversal, such as the
//               DisplayRegion and Camera in use.
////////////////////////////////////////////////////////////////////
65
inline CullTraverser *NodeCullCallbackData::get_trav(void) const;

238 8 get_data 0 4 333 30 NodeCullCallbackData::get_data 0 1 80 486
////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_data
//       Access: Published
//  Description: Returns the CullTraverserData in use at the time of the
//               callback.  This object contains data that changes at
//               each node of the traversal, such as the current node
//               and the current net transform to that node.
////////////////////////////////////////////////////////////////////
69
inline CullTraverserData &NodeCullCallbackData::get_data(void) const;

239 14 get_class_type 0 4 333 36 NodeCullCallbackData::get_class_type 0 1 81 0
61
static TypeHandle NodeCullCallbackData::get_class_type(void);

240 21 ~NodeCullCallbackData 0 4 333 43 NodeCullCallbackData::~NodeCullCallbackData 0 0 0
50
NodeCullCallbackData::~NodeCullCallbackData(void);

241 10 PointLight 0 4 335 22 PointLight::PointLight 0 1 82 598
////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PointLight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
57
PointLight::PointLight(basic_string< char > const &name);

242 18 set_specular_color 0 4 335 30 PointLight::set_specular_color 0 1 83 305
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
68
inline void PointLight::set_specular_color(LVecBase4f const &color);

243 15 set_attenuation 0 4 335 27 PointLight::set_attenuation 0 1 84 448
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
71
inline void PointLight::set_attenuation(LVecBase3f const &attenuation);

244 9 get_point 0 4 335 21 PointLight::get_point 0 1 85 380
////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
////////////////////////////////////////////////////////////////////
57
inline LPoint3f const &PointLight::get_point(void) const;

245 9 set_point 0 4 335 21 PointLight::set_point 0 1 86 272
////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
////////////////////////////////////////////////////////////////////
57
inline void PointLight::set_point(LPoint3f const &point);

246 14 get_class_type 0 4 335 26 PointLight::get_class_type 0 1 87 0
51
static TypeHandle PointLight::get_class_type(void);

247 11 ~PointLight 0 4 335 23 PointLight::~PointLight 0 0 0
30
PointLight::~PointLight(void);

248 18 SelectiveChildNode 0 4 336 38 SelectiveChildNode::SelectiveChildNode 0 1 88 464
////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
80
inline SelectiveChildNode::SelectiveChildNode(basic_string< char > const &name);

249 14 get_class_type 0 4 336 34 SelectiveChildNode::get_class_type 0 1 89 0
59
static TypeHandle SelectiveChildNode::get_class_type(void);

250 19 ~SelectiveChildNode 0 4 336 39 SelectiveChildNode::~SelectiveChildNode 0 0 0
46
SelectiveChildNode::~SelectiveChildNode(void);

251 28 upcast_to_SelectiveChildNode 0 12 337 42 SequenceNode::upcast_to_SelectiveChildNode 0 1 94 46
upcast from SequenceNode to SelectiveChildNode
69
SelectiveChildNode *SequenceNode::upcast_to_SelectiveChildNode(void);

252 24 downcast_to_SequenceNode 0 12 336 44 SelectiveChildNode::downcast_to_SequenceNode 0 1 95 48
downcast from SelectiveChildNode to SequenceNode
65
SequenceNode *SelectiveChildNode::downcast_to_SequenceNode(void);

253 23 upcast_to_AnimInterface 0 12 337 37 SequenceNode::upcast_to_AnimInterface 0 1 96 41
upcast from SequenceNode to AnimInterface
59
AnimInterface *SequenceNode::upcast_to_AnimInterface(void);

254 24 downcast_to_SequenceNode 0 12 338 39 AnimInterface::downcast_to_SequenceNode 0 1 97 43
downcast from AnimInterface to SequenceNode
60
SequenceNode *AnimInterface::downcast_to_SequenceNode(void);

255 12 SequenceNode 0 4 337 26 SequenceNode::SequenceNode 0 1 90 455
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
68
inline SequenceNode::SequenceNode(basic_string< char > const &name);

256 14 get_num_frames 0 6 337 28 SequenceNode::get_num_frames 0 1 91 580
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
////////////////////////////////////////////////////////////////////
53
virtual int SequenceNode::get_num_frames(void) const;

257 14 set_frame_rate 0 4 337 28 SequenceNode::set_frame_rate 0 1 92 435
////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
////////////////////////////////////////////////////////////////////
60
inline void SequenceNode::set_frame_rate(double frame_rate);

258 14 get_class_type 0 4 337 28 SequenceNode::get_class_type 0 1 93 0
53
static TypeHandle SequenceNode::get_class_type(void);

259 13 ~SequenceNode 0 4 337 27 SequenceNode::~SequenceNode 0 0 0
34
SequenceNode::~SequenceNode(void);

260 15 ShaderGenerator 0 4 339 32 ShaderGenerator::ShaderGenerator 0 1 98 450
////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::Constructor
//       Access: Published
//  Description: Create a ShaderGenerator.  This has no state,
//               except possibly to cache certain results.
//               The parameter that must be passed is the GSG to
//               which the shader generator belongs.
////////////////////////////////////////////////////////////////////
91
ShaderGenerator::ShaderGenerator(GraphicsStateGuardianBase *gsg, GraphicsOutputBase *host);

261 17 synthesize_shader 0 6 339 34 ShaderGenerator::synthesize_shader 0 1 99 1419
////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::synthesize_shader
//       Access: Published, Virtual
//  Description: This is the routine that implements the next-gen
//               fixed function pipeline by synthesizing a shader.
//               It also takes care of setting up any buffers
//               needed to produce the requested effects.
//
//               Currently supports:
//               - flat colors
//               - vertex colors
//               - lighting
//               - normal maps, but not multiple
//               - gloss maps, but not multiple
//               - glow maps, but not multiple
//               - materials, but not updates to materials
//               - 2D textures
//               - all texture stage modes, including combine modes
//               - color scale attrib
//               - light ramps (for cartoon shading)
//               - shadow mapping
//               - most texgen modes
//               - texmatrix
//               - 1D/2D/3D textures, cube textures, 2D tex arrays
//               - linear/exp/exp2 fog
//
//               Not yet supported:
//               - dot3_rgb and dot3_rgba combine modes
//
//               Potential optimizations
//               - omit attenuation calculations if attenuation off
//
////////////////////////////////////////////////////////////////////
97
virtual ConstPointerTo< ShaderAttrib > ShaderGenerator::synthesize_shader(RenderState const *rs);

262 14 get_class_type 0 4 339 31 ShaderGenerator::get_class_type 0 1 100 0
56
static TypeHandle ShaderGenerator::get_class_type(void);

263 9 Spotlight 0 4 341 20 Spotlight::Spotlight 0 1 101 596
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Copy Constructor
//       Access: Protected
//  Description: Do not call the copy constructor directly; instead,
//               use make_copy() or copy_subgraph() to make a copy of
//               a node.
////////////////////////////////////////////////////////////////////
55
Spotlight::Spotlight(basic_string< char > const &name);

264 12 set_exponent 0 4 341 23 Spotlight::set_exponent 0 1 102 693
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
////////////////////////////////////////////////////////////////////
52
inline void Spotlight::set_exponent(float exponent);

265 18 set_specular_color 0 4 341 29 Spotlight::set_specular_color 0 1 103 304
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
////////////////////////////////////////////////////////////////////
67
inline void Spotlight::set_specular_color(LVecBase4f const &color);

266 15 set_attenuation 0 4 341 26 Spotlight::set_attenuation 0 1 104 447
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
////////////////////////////////////////////////////////////////////
70
inline void Spotlight::set_attenuation(LVecBase3f const &attenuation);

267 9 make_spot 0 4 341 20 Spotlight::make_spot 0 1 105 1015
////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
////////////////////////////////////////////////////////////////////
117
static PointerTo< Texture > Spotlight::make_spot(int pixel_width, float full_radius, LVecBase4f &fg, LVecBase4f &bg);

268 14 get_class_type 0 4 341 25 Spotlight::get_class_type 0 1 106 0
50
static TypeHandle Spotlight::get_class_type(void);

269 10 ~Spotlight 0 4 341 21 Spotlight::~Spotlight 0 0 0
28
Spotlight::~Spotlight(void);

270 10 SwitchNode 0 4 342 22 SwitchNode::SwitchNode 0 1 107 451
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
64
inline SwitchNode::SwitchNode(basic_string< char > const &name);

271 17 set_visible_child 0 4 342 29 SwitchNode::set_visible_child 0 1 108 322
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
////////////////////////////////////////////////////////////////////
53
inline void SwitchNode::set_visible_child(int index);

272 17 get_visible_child 0 6 342 29 SwitchNode::get_visible_child 0 1 109 292
////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::get_visible_child
//       Access: Published, Virtual
//  Description: Returns the index of the child that should be visible.
////////////////////////////////////////////////////////////////////
54
virtual int SwitchNode::get_visible_child(void) const;

273 14 get_class_type 0 4 342 26 SwitchNode::get_class_type 0 1 110 0
51
static TypeHandle SwitchNode::get_class_type(void);

274 11 ~SwitchNode 0 4 342 23 SwitchNode::~SwitchNode 0 0 0
30
SwitchNode::~SwitchNode(void);

275 12 UvScrollNode 0 4 343 26 UvScrollNode::UvScrollNode 0 2 111 112 675
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Copy Constructor
//       Access: Protected
//  Description:
////////////////////////////////////////////////////////////////////
197
inline UvScrollNode::UvScrollNode(basic_string< char > const &name, float u_speed, float v_speed, float w_speed, float r_speed);
inline UvScrollNode::UvScrollNode(basic_string< char > const &name);

276 11 set_u_speed 0 4 343 25 UvScrollNode::set_u_speed 0 1 113 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_u_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void UvScrollNode::set_u_speed(float u_speed);

277 11 set_v_speed 0 4 343 25 UvScrollNode::set_v_speed 0 1 114 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_v_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void UvScrollNode::set_v_speed(float v_speed);

278 11 set_w_speed 0 4 343 25 UvScrollNode::set_w_speed 0 1 115 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_w_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void UvScrollNode::set_w_speed(float w_speed);

279 11 set_r_speed 0 4 343 25 UvScrollNode::set_r_speed 0 1 116 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_r_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
53
inline void UvScrollNode::set_r_speed(float r_speed);

280 11 get_u_speed 0 4 343 25 UvScrollNode::get_u_speed 0 1 117 225
////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_u_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline float UvScrollNode::get_u_speed(void) const;

281 11 get_v_speed 0 4 343 25 UvScrollNode::get_v_speed 0 1 118 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_v_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline float UvScrollNode::get_v_speed(void) const;

282 11 get_w_speed 0 4 343 25 UvScrollNode::get_w_speed 0 1 119 224
////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_w_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline float UvScrollNode::get_w_speed(void) const;

283 11 get_r_speed 0 4 343 25 UvScrollNode::get_r_speed 0 1 120 225
////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_r_speed
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
51
inline float UvScrollNode::get_r_speed(void) const;

284 14 get_class_type 0 4 343 28 UvScrollNode::get_class_type 0 1 121 0
53
static TypeHandle UvScrollNode::get_class_type(void);

285 13 ~UvScrollNode 0 4 343 27 UvScrollNode::~UvScrollNode 0 0 0
34
UvScrollNode::~UvScrollNode(void);

286 18 SceneGraphAnalyzer 0 4 344 38 SceneGraphAnalyzer::SceneGraphAnalyzer 0 1 122 230
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
SceneGraphAnalyzer::SceneGraphAnalyzer(void);

287 19 ~SceneGraphAnalyzer 0 4 344 39 SceneGraphAnalyzer::~SceneGraphAnalyzer 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
SceneGraphAnalyzer::~SceneGraphAnalyzer(void);

288 12 set_lod_mode 0 4 344 32 SceneGraphAnalyzer::set_lod_mode 0 1 123 282
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::set_lod_mode
//       Access: Published
//  Description: Specifies the mode in which LODNodes are analyzed.
////////////////////////////////////////////////////////////////////
83
inline void SceneGraphAnalyzer::set_lod_mode(SceneGraphAnalyzer::LodMode lod_mode);

289 12 get_lod_mode 0 4 344 32 SceneGraphAnalyzer::get_lod_mode 0 1 124 280
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_lod_mode
//       Access: Published
//  Description: Returns the mode in which LODNodes are analyzed.
////////////////////////////////////////////////////////////////////
112
inline SceneGraphAnalyzer::LodMode SceneGraphAnalyzer::get_lod_mode(SceneGraphAnalyzer::LodMode lod_mode) const;

290 5 clear 0 4 344 25 SceneGraphAnalyzer::clear 0 1 125 310
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::clear
//       Access: Published
//  Description: Resets all of the data in the analyzer in preparation
//               for a new run.
////////////////////////////////////////////////////////////////////
37
void SceneGraphAnalyzer::clear(void);

291 8 add_node 0 4 344 28 SceneGraphAnalyzer::add_node 0 1 126 522
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::add_node
//       Access: Published
//  Description: Adds a new node to the set of data for analysis.
//               Normally, this would only be called once, and passed
//               the top of the scene graph, but it's possible to
//               repeatedly pass in subgraphs to get an analysis of
//               all the graphs together.
////////////////////////////////////////////////////////////////////
51
void SceneGraphAnalyzer::add_node(PandaNode *node);

292 5 write 0 4 344 25 SceneGraphAnalyzer::write 0 2 127 128 258
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
////////////////////////////////////////////////////////////////////
75
void SceneGraphAnalyzer::write(ostream &out, int indent_level = (0)) const;

293 13 get_num_nodes 0 4 344 33 SceneGraphAnalyzer::get_num_nodes 0 1 129 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_nodes(void) const;

294 17 get_num_instances 0 4 344 37 SceneGraphAnalyzer::get_num_instances 0 1 130 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_instances
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_instances(void) const;

295 18 get_num_transforms 0 4 344 38 SceneGraphAnalyzer::get_num_transforms 0 1 131 238
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_transforms
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline int SceneGraphAnalyzer::get_num_transforms(void) const;

296 26 get_num_nodes_with_attribs 0 4 344 46 SceneGraphAnalyzer::get_num_nodes_with_attribs 0 1 132 246
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes_with_attribs
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline int SceneGraphAnalyzer::get_num_nodes_with_attribs(void) const;

297 17 get_num_lod_nodes 0 4 344 37 SceneGraphAnalyzer::get_num_lod_nodes 0 1 133 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lod_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_lod_nodes(void) const;

298 18 get_num_geom_nodes 0 4 344 38 SceneGraphAnalyzer::get_num_geom_nodes 0 1 134 238
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_nodes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline int SceneGraphAnalyzer::get_num_geom_nodes(void) const;

299 13 get_num_geoms 0 4 344 33 SceneGraphAnalyzer::get_num_geoms 0 1 135 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geoms
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_geoms(void) const;

300 25 get_num_geom_vertex_datas 0 4 344 45 SceneGraphAnalyzer::get_num_geom_vertex_datas 0 1 136 245
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_datas
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline int SceneGraphAnalyzer::get_num_geom_vertex_datas(void) const;

301 27 get_num_geom_vertex_formats 0 4 344 47 SceneGraphAnalyzer::get_num_geom_vertex_formats 0 1 137 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_formats
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_geom_vertex_formats(void) const;

302 20 get_vertex_data_size 0 4 344 40 SceneGraphAnalyzer::get_vertex_data_size 0 1 138 240
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_vertex_data_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int SceneGraphAnalyzer::get_vertex_data_size(void) const;

303 16 get_num_vertices 0 4 344 36 SceneGraphAnalyzer::get_num_vertices 0 1 139 236
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
inline int SceneGraphAnalyzer::get_num_vertices(void) const;

304 15 get_num_normals 0 4 344 35 SceneGraphAnalyzer::get_num_normals 0 1 140 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_normals(void) const;

305 14 get_num_colors 0 4 344 34 SceneGraphAnalyzer::get_num_colors 0 1 141 234
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_colors
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline int SceneGraphAnalyzer::get_num_colors(void) const;

306 17 get_num_texcoords 0 4 344 37 SceneGraphAnalyzer::get_num_texcoords 0 1 142 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_texcoords
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_texcoords(void) const;

307 12 get_num_tris 0 4 344 32 SceneGraphAnalyzer::get_num_tris 0 1 143 232
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tris
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
inline int SceneGraphAnalyzer::get_num_tris(void) const;

308 13 get_num_lines 0 4 344 33 SceneGraphAnalyzer::get_num_lines 0 1 144 233
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lines
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline int SceneGraphAnalyzer::get_num_lines(void) const;

309 14 get_num_points 0 4 344 34 SceneGraphAnalyzer::get_num_points 0 1 145 234
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_points
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline int SceneGraphAnalyzer::get_num_points(void) const;

310 15 get_num_patches 0 4 344 35 SceneGraphAnalyzer::get_num_patches 0 1 146 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_patches
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_patches(void) const;

311 23 get_num_individual_tris 0 4 344 43 SceneGraphAnalyzer::get_num_individual_tris 0 1 147 243
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_individual_tris
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline int SceneGraphAnalyzer::get_num_individual_tris(void) const;

312 17 get_num_tristrips 0 4 344 37 SceneGraphAnalyzer::get_num_tristrips 0 1 148 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tristrips
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_num_tristrips(void) const;

313 27 get_num_triangles_in_strips 0 4 344 47 SceneGraphAnalyzer::get_num_triangles_in_strips 0 1 149 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_strips
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_triangles_in_strips(void) const;

314 15 get_num_trifans 0 4 344 35 SceneGraphAnalyzer::get_num_trifans 0 1 150 235
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_trifans
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline int SceneGraphAnalyzer::get_num_trifans(void) const;

315 25 get_num_triangles_in_fans 0 4 344 45 SceneGraphAnalyzer::get_num_triangles_in_fans 0 1 151 245
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_fans
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline int SceneGraphAnalyzer::get_num_triangles_in_fans(void) const;

316 27 get_num_vertices_in_patches 0 4 344 47 SceneGraphAnalyzer::get_num_vertices_in_patches 0 1 152 247
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices_in_patches
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
71
inline int SceneGraphAnalyzer::get_num_vertices_in_patches(void) const;

317 17 get_texture_bytes 0 4 344 37 SceneGraphAnalyzer::get_texture_bytes 0 1 153 237
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_texture_bytes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline int SceneGraphAnalyzer::get_texture_bytes(void) const;

318 20 get_num_long_normals 0 4 344 40 SceneGraphAnalyzer::get_num_long_normals 0 1 154 240
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_long_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline int SceneGraphAnalyzer::get_num_long_normals(void) const;

319 21 get_num_short_normals 0 4 344 41 SceneGraphAnalyzer::get_num_short_normals 0 1 155 241
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_short_normals
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline int SceneGraphAnalyzer::get_num_short_normals(void) const;

320 23 get_total_normal_length 0 4 344 43 SceneGraphAnalyzer::get_total_normal_length 0 1 156 243
////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_total_normal_length
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
inline float SceneGraphAnalyzer::get_total_normal_length(void) const;

156
1 14 Dtool_Bgt0Nkgn 0 4 8 350 0 14 Dtool_Bgt0Nkgn 222 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 346  3 out 1 348  
2 14 Dtool_Bgt0zDle 0 4 9 350 0 14 Dtool_Bgt0zDle 221 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 346  3 out 1 348  12 indent_level 1 351  
3 14 Dtool_Bgt0SZ_n 0 4 9 350 0 14 Dtool_Bgt0SZ_n 221 ////////////////////////////////////////////////////////////////////
//     Function: LightNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 346  3 out 1 348  
4 14 Dtool_Bgt06xST 0 7 10 353 0 14 Dtool_Bgt06xST 0 0 
5 14 Dtool_Bgt0C_aQ 0 6 3 355 0 14 Dtool_Bgt0C_aQ 0 1 4 this 3 354  
6 14 Dtool_Bgt0I_qA 0 7 4 354 164 14 Dtool_Bgt0I_qA 0 1 4 this 3 355  
7 14 Dtool_Bgt00Doz 0 7 6 356 0 14 Dtool_Bgt00Doz 0 1 4 this 3 354  
8 14 Dtool_Bgt0wkdW 0 7 7 354 164 14 Dtool_Bgt0wkdW 0 1 4 this 3 356  
9 14 Dtool_Bgt05oKD 0 7 13 358 167 14 Dtool_Bgt05oKD 224 ////////////////////////////////////////////////////////////////////
//     Function: AmbientLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
10 14 Dtool_Bgt0f_nS 0 7 14 353 0 14 Dtool_Bgt0f_nS 0 0 
11 14 Dtool_Bgt0ShC6 0 7 17 359 176 14 Dtool_Bgt0ShC6 224 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
12 14 Dtool_Bgt084_S 0 4 18 350 0 14 Dtool_Bgt084_S 1677 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the cull traversal.  This
//               callback will be made during the cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               node has been determined to be visible and it has
//               passed the bounding-volume test, so it lies within
//               the view frustum.
//
//               The callback is passed an instance of a
//               NodeCullCallbackData, which contains pointers to the
//               CullTraverser and CullTraverserData--enough data to
//               examine the current node and its place within the
//               scene graph.  The callback *replaces* the normal cull
//               behavior, so if your callback does nothing, the cull
//               traversal will not continue below this node.  If you
//               wish the cull traversal to continue to visit this
//               node and below, you must call cbdata->upcall()
//               from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 359  6 object 1 360  
13 14 Dtool_Bgt0IQr7 0 4 19 350 0 14 Dtool_Bgt0IQr7 317 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 359  
14 14 Dtool_Bgt0DgUA 0 7 20 360 0 14 Dtool_Bgt0DgUA 285 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 362  
15 14 Dtool_Bgt0B8Ai 0 4 21 350 0 14 Dtool_Bgt0B8Ai 1477 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this node is visited during the draw traversal.  This
//               callback will be made during the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state has been loaded with the correct
//               modelview transform and render state, and the
//               primitives (if any) in this node are ready to be
//               drawn.
//
//               The callback is passed an instance of a
//               GeomDrawCallbackData, which contains pointers to the
//               current state and transform, as well as the current
//               GSG.  There is a Geom pointer as well, but it will
//               always be NULL to this callback, since the
//               CallbackNode does not itself contain any Geoms.
//////////////////////////////////////////////////////////////////// 2 4 this 3 359  6 object 1 360  
16 14 Dtool_Bgt0WC3L 0 4 22 350 0 14 Dtool_Bgt0WC3L 317 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 359  
17 14 Dtool_Bgt0njXP 0 7 23 360 0 14 Dtool_Bgt0njXP 285 ////////////////////////////////////////////////////////////////////
//     Function: CallbackNode::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 362  
18 14 Dtool_Bgt0nPi_ 0 7 24 353 0 14 Dtool_Bgt0nPi_ 0 0 
19 14 Dtool_Bgt0XhRd 0 7 27 364 183 14 Dtool_Bgt0XhRd 366 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::Constructor
//       Access: Published
//  Description: Creates a ComputeNode with the given name.  Use
//               add_dispatch and  also assign a shader using a
//               ShaderAttrib.
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
20 14 Dtool_Bgt0PuVF 0 4 28 350 0 14 Dtool_Bgt0PuVF 452 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
//////////////////////////////////////////////////////////////////// 2 4 this 3 364  10 num_groups 1 365  
21 14 Dtool_Bgt0c228 0 4 28 350 0 14 Dtool_Bgt0c228 452 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::add_dispatch
//       Access: Published
//  Description: Adds a dispatch command with the given number of
//               work groups in the X, Y, and Z dimensions.  Any
//               of these values may be set to 1 if the respective
//               dimension should not be used.
//////////////////////////////////////////////////////////////////// 4 4 this 3 364  12 num_groups_x 1 351  12 num_groups_y 1 351  12 num_groups_z 1 351  
22 14 Dtool_Bgt0_ioo 0 6 29 351 0 14 Dtool_Bgt0_ioo 320 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_num_dispatches
//       Access: Published
//  Description: Returns the number of times add_dispatch has been
//               called on this object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 368  
23 14 Dtool_Bgt0VKws 0 6 30 365 0 14 Dtool_Bgt0VKws 315 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::get_dispatch
//       Access: Published
//  Description: Returns the group counts of the nth dispatch
//               associated with this object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 368  1 i 1 351  
24 14 Dtool_Bgt0MoAi 0 4 31 350 0 14 Dtool_Bgt0MoAi 259 ////////////////////////////////////////////////////////////////////
//     Function: ComputeNode::clear_dispatches
//       Access: Published
//  Description: Removes all dispatch commands.
//////////////////////////////////////////////////////////////////// 1 4 this 3 364  
25 14 Dtool_Bgt0JLNW 0 7 32 353 0 14 Dtool_Bgt0JLNW 0 0 
26 14 Dtool_Bgt0N_SD 0 6 42 371 0 14 Dtool_Bgt0N_SD 312 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::is_shadow_caster
//       Access: Published
//  Description: Returns whether this light is configured to cast
//               shadows or not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 370  
27 14 Dtool_Bgt0flfq 0 4 43 350 0 14 Dtool_Bgt0flfq 594 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. This is the variant without
//               buffer size, meaning that the current buffer size
//               will be kept (512x512 is the default).
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 2 4 this 3 370  6 caster 1 371  
28 14 Dtool_Bgt0Z04u 0 4 43 350 0 14 Dtool_Bgt0Z04u 606 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 5 4 this 3 370  6 caster 1 371  12 buffer_xsize 1 351  12 buffer_ysize 1 351  4 sort 1 351  
29 14 Dtool_Bgt0CMp_ 0 4 43 350 0 14 Dtool_Bgt0CMp_ 606 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::set_shadow_caster
//       Access: Published
//  Description: Sets the flag indicating whether this light should
//               cast shadows or not. The xsize and ysize parameters
//               specify the size of the shadow buffer that will be
//               set up, the sort parameter specifies the sort.
//               Note that enabling shadows will require the shader
//               generator to be enabled on the scene.
//////////////////////////////////////////////////////////////////// 4 4 this 3 370  6 caster 1 371  12 buffer_xsize 1 351  12 buffer_ysize 1 351  
30 14 Dtool_Bgt0Ly2R 0 7 44 375 0 14 Dtool_Bgt0Ly2R 497 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::get_shadow_buffer
//       Access: Published
//  Description: Returns the buffer that has been constructed for
//               a given GSG, or NULL if no such buffer has (yet)
//               been constructed.  This should be used for
//               debugging only, you will not need to call this
//               normally.
//////////////////////////////////////////////////////////////////// 2 4 this 3 370  3 gsg 1 373  
31 14 Dtool_Bgt01lQT 0 4 45 350 0 14 Dtool_Bgt01lQT 226 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::output
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 376  3 out 1 348  
32 14 Dtool_Bgt0JusW 0 4 46 350 0 14 Dtool_Bgt0JusW 225 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 376  3 out 1 348  12 indent_level 1 351  
33 14 Dtool_Bgt0a_Tf 0 4 46 350 0 14 Dtool_Bgt0a_Tf 225 ////////////////////////////////////////////////////////////////////
//     Function: LightLensNode::write
//       Access: Public, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 376  3 out 1 348  
34 14 Dtool_Bgt0koD_ 0 7 47 353 0 14 Dtool_Bgt0koD_ 0 0 
35 14 Dtool_Bgt0682h 0 6 36 355 0 14 Dtool_Bgt0682h 0 1 4 this 3 370  
36 14 Dtool_Bgt0n_a1 0 7 37 370 188 14 Dtool_Bgt0n_a1 0 1 4 this 3 355  
37 14 Dtool_Bgt01akX 0 7 39 378 0 14 Dtool_Bgt01akX 0 1 4 this 3 370  
38 14 Dtool_Bgt01FLC 0 7 40 370 188 14 Dtool_Bgt01FLC 0 1 4 this 3 378  
39 14 Dtool_Bgt0FmND 0 7 49 379 202 14 Dtool_Bgt0FmND 228 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
40 14 Dtool_Bgt0CHLU 0 4 50 350 0 14 Dtool_Bgt0CHLU 311 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 379  5 color 1 380  
41 14 Dtool_Bgt0psIS 0 6 51 385 0 14 Dtool_Bgt0psIS 652 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//
//               This actually has no bearing on the visual effect of
//               the light, since the light is rendered as if it were
//               infinitely far away.  This is only used to create a
//               visible representation of the light.
//////////////////////////////////////////////////////////////////// 1 4 this 3 383  
42 14 Dtool_Bgt0E91O 0 4 52 350 0 14 Dtool_Bgt0E91O 278 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
//////////////////////////////////////////////////////////////////// 2 4 this 3 379  5 point 1 385  
43 14 Dtool_Bgt0FGi1 0 6 53 388 0 14 Dtool_Bgt0FGi1 382 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::get_direction
//       Access: Public
//  Description: Returns the direction in which the light is aimed.
//               This is local to the coordinate space in which the
//               light is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 383  
44 14 Dtool_Bgt0FGF_ 0 4 54 350 0 14 Dtool_Bgt0FGF_ 275 ////////////////////////////////////////////////////////////////////
//     Function: DirectionalLight::set_direction
//       Access: Public
//  Description: Sets the direction in which the light is aimed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 379  9 direction 1 388  
45 14 Dtool_Bgt0v7PH 0 7 55 353 0 14 Dtool_Bgt0v7PH 0 0 
46 14 Dtool_Bgt0nKZh 0 7 58 391 226 14 Dtool_Bgt0nKZh 219 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
47 14 Dtool_Bgt0pCyg 0 7 59 391 226 14 Dtool_Bgt0pCyg 334 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::make_default_lod
//       Access: Published, Static
//  Description: Creates a new LODNode of the type specified by the
//               default-lod-type config variable.
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
48 14 Dtool_Bgt0RFoz 0 4 60 350 0 14 Dtool_Bgt0RFoz 669 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::add_switch
//       Access: Published
//  Description: Adds a switch range to the LODNode.  This implies
//               that the corresponding child node has been parented
//               to the node.
//
//               The sense of in vs. out distances is as if the object
//               were coming towards you from far away: it switches
//               "in" at the far distance, and switches "out" at the
//               close distance.  Thus, "in" should be larger than
//               "out".
//////////////////////////////////////////////////////////////////// 3 4 this 3 391  2 in 1 392  3 out 1 392  
49 14 Dtool_Bgt0hpdI 0 6 61 371 0 14 Dtool_Bgt0hpdI 320 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_switch
//       Access: Published
//  Description: Changes the switching range of a particular child of
//               the LODNode.  See add_switch().
//////////////////////////////////////////////////////////////////// 4 4 this 3 391  5 index 1 351  2 in 1 392  3 out 1 392  
50 14 Dtool_Bgt025DC 0 4 62 350 0 14 Dtool_Bgt025DC 389 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_switches
//       Access: Published
//  Description: Removes the set of switching ranges for the LODNode,
//               presumably in conjunction with removing all of its
//               children.  See add_switch().
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
51 14 Dtool_Bgt0b65Z 0 6 63 351 0 14 Dtool_Bgt0b65Z 443 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_num_switches
//       Access: Published
//  Description: Returns the number of switch ranges added to the
//               LODNode.  This should correspond to the number of
//               children of the node in order for the LODNode to
//               function correctly.
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
52 14 Dtool_Bgt0SHPo 0 6 64 392 0 14 Dtool_Bgt0SHPo 371 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_in
//       Access: Published
//  Description: Returns the "in" distance of the indicated switch
//               range.  This should be larger than the "out" distance
//               of the same range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 393  5 index 1 351  
53 14 Dtool_Bgt0WO_6 0 6 65 392 0 14 Dtool_Bgt0WO_6 373 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_out
//       Access: Published
//  Description: Returns the "out" distance of the indicated switch
//               range.  This should be smaller than the "in" distance
//               of the same range.
//////////////////////////////////////////////////////////////////// 2 4 this 3 393  5 index 1 351  
54 14 Dtool_Bgt0XVB9 0 6 66 351 0 14 Dtool_Bgt0XVB9 480 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lowest_switch
//       Access: Published
//  Description: Returns the index number of the child with the lowest
//               level of detail; that is, the one that is designed to
//               be seen from the farthest away.  This is usually the
//               first child, but it is not necessarily so.
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
55 14 Dtool_Bgt00Jag 0 6 67 351 0 14 Dtool_Bgt00Jag 489 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_highest_switch
//       Access: Published
//  Description: Returns the index number of the child with the highest
//               level of detail; that is, the one that is designed to
//               be seen from the closest to the camera.  This is
//               usually the last child, but it is not necessarily so.
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
56 14 Dtool_Bgt0s5Rf 0 4 68 350 0 14 Dtool_Bgt0s5Rf 390 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::force_switch
//       Access: Published
//  Description: Forces the LODNode to show the indicated level
//               instead of the level that would normally be shown
//               based on the distance from the camera.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 351  
57 14 Dtool_Bgt0kueh 0 4 69 350 0 14 Dtool_Bgt0kueh 380 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::clear_force_switch
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               force_switch() and releases the LODNode to once again
//               display the normal level.
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
58 14 Dtool_Bgt0jQ5J 0 4 70 350 0 14 Dtool_Bgt0jQ5J 338 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_lod_scale
//       Access: Published
//  Description: Sets the multiplier for lod distances. A higher 
//               value means you'll see farther switchs than normal
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 value 1 392  
59 14 Dtool_Bgt0hjtT 0 6 71 392 0 14 Dtool_Bgt0hjtT 262 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_lod_scale
//       Access: Published
//  Description: Returns the multiplier for lod distances
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
60 14 Dtool_Bgt0PHp_ 0 4 72 350 0 14 Dtool_Bgt0PHp_ 408 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::set_center
//       Access: Published
//  Description: Specifies the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  6 center 1 385  
61 14 Dtool_Bgt08mat 0 6 73 385 0 14 Dtool_Bgt08mat 406 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::get_center
//       Access: Published
//  Description: Returns the center of the LOD.  This is the point
//               that is compared to the camera (in camera space) to
//               determine the particular LOD that should be chosen.
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
62 14 Dtool_Bgt0FRTL 0 4 74 350 0 14 Dtool_Bgt0FRTL 908 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 351  
63 14 Dtool_Bgt0e83D 0 4 74 350 0 14 Dtool_Bgt0e83D 908 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_switch
//       Access: Published
//  Description: This is provided as a debugging aid.  show_switch()
//               will put the LODNode into a special mode where rather
//               than computing and drawing the appropriate level of
//               the LOD, a ring is drawn around the LODNode center
//               indicating the switch distances from the camera for
//               the indicated level, and the geometry of the
//               indicated level is drawn in wireframe.
//
//               Multiple different levels can be visualized this way
//               at once.  Call hide_switch() or hide_all_switches() to
//               undo this mode and restore the LODNode to its normal
//               behavior.
//////////////////////////////////////////////////////////////////// 3 4 this 3 391  5 index 1 351  5 color 1 380  
64 14 Dtool_Bgt0FDjK 0 4 75 350 0 14 Dtool_Bgt0FDjK 262 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_switch
//       Access: Published
//  Description: Disables a previous call to show_switch().
//////////////////////////////////////////////////////////////////// 2 4 this 3 391  5 index 1 351  
65 14 Dtool_Bgt04bcK 0 4 76 350 0 14 Dtool_Bgt04bcK 267 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::show_all_switches
//       Access: Published
//  Description: Shows all levels in their default colors.
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
66 14 Dtool_Bgt0qEsJ 0 4 77 350 0 14 Dtool_Bgt0qEsJ 303 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::hide_all_switches
//       Access: Published
//  Description: Hides all levels, restoring the LODNode to normal
//               operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 391  
67 14 Dtool_Bgt0PD_7 0 6 78 371 0 14 Dtool_Bgt0PD_7 400 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::is_any_shown
//       Access: Published
//  Description: Returns true if any switch has been shown with
//               show_switch(), indicating the LODNode is in debug
//               show mode; or false if it is in the normal mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
68 14 Dtool_Bgt0D0t8 0 6 79 371 0 14 Dtool_Bgt0D0t8 549 ////////////////////////////////////////////////////////////////////
//     Function: LODNode::verify_child_bounds
//       Access: Published
//  Description: Returns true if the bounding volumes for the geometry
//               of each fhild node entirely fits within the
//               switch_in radius for that child, or false otherwise.
//               It is almost always a mistake for the geometry of an
//               LOD level to be larger than its switch_in radius.
//////////////////////////////////////////////////////////////////// 1 4 this 3 393  
69 14 Dtool_Bgt0lHCR 0 7 80 353 0 14 Dtool_Bgt0lHCR 0 0 
70 14 Dtool_Bgt0waxw 0 7 83 395 236 14 Dtool_Bgt0waxw 223 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
71 14 Dtool_Bgt0bh3A 0 4 84 350 0 14 Dtool_Bgt0bh3A 270 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_time
//       Access: Published
//  Description: set the time taken to complete an LOD switch
//////////////////////////////////////////////////////////////////// 2 4 this 3 395  1 t 1 392  
72 14 Dtool_Bgt0XLep 0 6 85 392 0 14 Dtool_Bgt0XLep 270 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_time
//       Access: Published
//  Description: get the time taken to complete an LOD switch
//////////////////////////////////////////////////////////////////// 1 4 this 3 396  
73 14 Dtool_Bgt0AXRl 0 4 86 350 0 14 Dtool_Bgt0AXRl 369 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_bin
//       Access: Published
//  Description: Specifies the cull bin and draw order that is
//               assigned to the fading part of the geometry during a
//               transition.
//////////////////////////////////////////////////////////////////// 3 4 this 3 395  4 name 1 357  10 draw_order 1 351  
74 14 Dtool_Bgt0I83c 0 6 87 357 0 14 Dtool_Bgt0I83c 340 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_name
//       Access: Published
//  Description: Returns the cull bin that is assigned to the fading
//               part of the geometry during a transition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 396  
75 14 Dtool_Bgt07nOV 0 6 88 351 0 14 Dtool_Bgt07nOV 391 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_bin_draw_order
//       Access: Published
//  Description: Returns the draw order that is assigned (along with
//               the bin name) to the fading part of the geometry
//               during a transition.
//////////////////////////////////////////////////////////////////// 1 4 this 3 396  
76 14 Dtool_Bgt0xO17 0 4 89 350 0 14 Dtool_Bgt0xO17 460 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::set_fade_state_override
//       Access: Published
//  Description: Specifies the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
//////////////////////////////////////////////////////////////////// 2 4 this 3 395  8 override 1 351  
77 14 Dtool_Bgt0LBzq 0 6 90 351 0 14 Dtool_Bgt0LBzq 458 ////////////////////////////////////////////////////////////////////
//     Function: FadeLODNode::get_fade_state_override
//       Access: Published
//  Description: Returns the override value that is applied to the
//               state changes necessary to apply the fade effect.
//               This should be larger than any attrib overrides on
//               the fading geometry.
//////////////////////////////////////////////////////////////////// 1 4 this 3 396  
78 14 Dtool_Bgt0rHme 0 7 91 353 0 14 Dtool_Bgt0rHme 0 0 
79 14 Dtool_Bgt0T4tX 0 7 95 401 0 14 Dtool_Bgt0T4tX 457 ////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_trav
//       Access: Published
//  Description: Returns the CullTraverser in use at the time of the
//               callback.  This object contains data that does not
//               change during the traversal, such as the
//               DisplayRegion and Camera in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 399  
80 14 Dtool_Bgt00Kmz 0 6 96 402 0 14 Dtool_Bgt00Kmz 486 ////////////////////////////////////////////////////////////////////
//     Function: NodeCullCallbackData::get_data
//       Access: Published
//  Description: Returns the CullTraverserData in use at the time of the
//               callback.  This object contains data that changes at
//               each node of the traversal, such as the current node
//               and the current net transform to that node.
//////////////////////////////////////////////////////////////////// 1 4 this 3 399  
81 14 Dtool_Bgt08yUj 0 7 97 353 0 14 Dtool_Bgt08yUj 0 0 
82 14 Dtool_Bgt0dSGa 0 7 100 404 247 14 Dtool_Bgt0dSGa 222 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
83 14 Dtool_Bgt0_PIn 0 4 101 350 0 14 Dtool_Bgt0_PIn 305 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 404  5 color 1 380  
84 14 Dtool_Bgt0eO9o 0 4 102 350 0 14 Dtool_Bgt0eO9o 448 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 404  11 attenuation 1 405  
85 14 Dtool_Bgt0AjL5 0 6 103 385 0 14 Dtool_Bgt0AjL5 380 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::get_point
//       Access: Public
//  Description: Returns the point in space at which the light is
//               located.  This is local to the coordinate space in
//               which the light is assigned.
//////////////////////////////////////////////////////////////////// 1 4 this 3 408  
86 14 Dtool_Bgt0FPGB 0 4 104 350 0 14 Dtool_Bgt0FPGB 272 ////////////////////////////////////////////////////////////////////
//     Function: PointLight::set_point
//       Access: Public
//  Description: Sets the point in space at which the light is located.
//////////////////////////////////////////////////////////////////// 2 4 this 3 404  5 point 1 385  
87 14 Dtool_Bgt0cV_e 0 7 105 353 0 14 Dtool_Bgt0cV_e 0 0 
88 14 Dtool_Bgt0H2f_ 0 7 108 410 250 14 Dtool_Bgt0H2f_ 227 ////////////////////////////////////////////////////////////////////
//     Function: SelectiveChildNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
89 14 Dtool_Bgt0zd_9 0 7 109 353 0 14 Dtool_Bgt0zd_9 0 0 
90 14 Dtool_Bgt0LrES 0 7 117 411 259 14 Dtool_Bgt0LrES 224 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
91 14 Dtool_Bgt0yMZE 0 6 118 351 0 14 Dtool_Bgt0yMZE 580 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::get_num_frames
//       Access: Published, Virtual
//  Description: Returns the number of frames in the animation.  This
//               is a property of the animation and may not be
//               directly adjusted by the user (although it may change
//               without warning with certain kinds of animations,
//               since this is a virtual method that may be
//               overridden).
//////////////////////////////////////////////////////////////////// 1 4 this 3 412  
92 14 Dtool_Bgt0hecj 0 4 119 350 0 14 Dtool_Bgt0hecj 435 ////////////////////////////////////////////////////////////////////
//     Function: SequenceNode::set_frame_rate
//       Access: Published
//  Description: Changes the advertised frame rate of the
//               SequenceNode.  This can be used in conjunction with
//               get_play_rate() to change the effective frame rate of
//               the node.
//////////////////////////////////////////////////////////////////// 2 4 this 3 411  10 frame_rate 1 414  
93 14 Dtool_Bgt0NJ9E 0 7 120 353 0 14 Dtool_Bgt0NJ9E 0 0 
94 14 Dtool_Bgt0fdIH 0 7 112 410 250 14 Dtool_Bgt0fdIH 0 1 4 this 3 411  
95 14 Dtool_Bgt0b1sH 0 7 113 411 259 14 Dtool_Bgt0b1sH 0 1 4 this 3 410  
96 14 Dtool_Bgt0O8DN 0 6 115 415 0 14 Dtool_Bgt0O8DN 0 1 4 this 3 411  
97 14 Dtool_Bgt0UCAc 0 7 116 411 259 14 Dtool_Bgt0UCAc 0 1 4 this 3 415  
98 14 Dtool_Bgt0QCTF 0 7 124 416 0 14 Dtool_Bgt0QCTF 450 ////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::Constructor
//       Access: Published
//  Description: Create a ShaderGenerator.  This has no state,
//               except possibly to cache certain results.
//               The parameter that must be passed is the GSG to
//               which the shader generator belongs.
//////////////////////////////////////////////////////////////////// 2 3 gsg 1 373  4 host 1 375  
99 14 Dtool_Bgt0vxvL 0 7 125 422 0 14 Dtool_Bgt0vxvL 1419 ////////////////////////////////////////////////////////////////////
//     Function: ShaderGenerator::synthesize_shader
//       Access: Published, Virtual
//  Description: This is the routine that implements the next-gen
//               fixed function pipeline by synthesizing a shader.
//               It also takes care of setting up any buffers
//               needed to produce the requested effects.
//
//               Currently supports:
//               - flat colors
//               - vertex colors
//               - lighting
//               - normal maps, but not multiple
//               - gloss maps, but not multiple
//               - glow maps, but not multiple
//               - materials, but not updates to materials
//               - 2D textures
//               - all texture stage modes, including combine modes
//               - color scale attrib
//               - light ramps (for cartoon shading)
//               - shadow mapping
//               - most texgen modes
//               - texmatrix
//               - 1D/2D/3D textures, cube textures, 2D tex arrays
//               - linear/exp/exp2 fog
//
//               Not yet supported:
//               - dot3_rgb and dot3_rgba combine modes
//
//               Potential optimizations
//               - omit attenuation calculations if attenuation off
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 416  2 rs 1 419  
100 14 Dtool_Bgt0MyYU 0 7 126 353 0 14 Dtool_Bgt0MyYU 0 0 
101 14 Dtool_Bgt0JNYH 0 7 128 423 269 14 Dtool_Bgt0JNYH 221 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
102 14 Dtool_Bgt0YQlj 0 4 129 350 0 14 Dtool_Bgt0YQlj 693 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_exponent
//       Access: Public
//  Description: Sets the exponent that controls the amount of light
//               falloff from the center of the spotlight.  The light
//               is attenuated by the cosine of the angle between the
//               direction of the light and the direction of the point
//               being lighted, raised to the power of this exponent.
//               Thus, higher exponents result in a more focused light
//               source, regardless of the field-of-view of the lens.
//////////////////////////////////////////////////////////////////// 2 4 this 3 423  8 exponent 1 392  
103 14 Dtool_Bgt0hJVa 0 4 130 350 0 14 Dtool_Bgt0hJVa 304 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_specular_color
//       Access: Public
//  Description: Sets the color of specular highlights generated by
//               the light.
//////////////////////////////////////////////////////////////////// 2 4 this 3 423  5 color 1 380  
104 14 Dtool_Bgt0FLbM 0 4 131 350 0 14 Dtool_Bgt0FLbM 447 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::set_attenuation
//       Access: Public
//  Description: Sets the terms of the attenuation equation for the
//               light.  These are, in order, the constant, linear,
//               and quadratic terms based on the distance from the
//               point to the vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 423  11 attenuation 1 405  
105 14 Dtool_Bgt04Wtp 0 7 132 426 0 14 Dtool_Bgt04Wtp 1015 ////////////////////////////////////////////////////////////////////
//     Function: Spotlight::make_spot
//       Access: Published, Static
//  Description: Returns a newly-generated Texture that renders a
//               circular spot image as might be cast from the
//               spotlight.  This may be projected onto target
//               geometry (for instance, via
//               NodePath::project_texture()) instead of actually
//               enabling the light itself, as a cheesy way to make a
//               high-resolution spot appear on the geometry.
//
//               pixel_width specifies the height and width of the new
//               texture in pixels, full_radius is a value in the
//               range 0..1 that indicates the relative size of the
//               fully bright center spot, and fg and bg are the
//               colors of the interior and exterior of the spot,
//               respectively.
//////////////////////////////////////////////////////////////////// 4 11 pixel_width 1 351  11 full_radius 1 392  2 fg 1 425  2 bg 1 425  
106 14 Dtool_Bgt0jnHs 0 7 133 353 0 14 Dtool_Bgt0jnHs 0 0 
107 14 Dtool_Bgt048jr 0 7 136 427 274 14 Dtool_Bgt048jr 222 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
108 14 Dtool_Bgt0KBhj 0 4 137 350 0 14 Dtool_Bgt0KBhj 322 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::set_visible_child
//       Access: Published
//  Description: Specifies the particular child of this node, by
//               index, that will be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 427  5 index 1 351  
109 14 Dtool_Bgt0RVBe 0 6 138 351 0 14 Dtool_Bgt0RVBe 292 ////////////////////////////////////////////////////////////////////
//     Function: SwitchNode::get_visible_child
//       Access: Published, Virtual
//  Description: Returns the index of the child that should be visible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 428  
110 14 Dtool_Bgt0Pjq2 0 7 139 353 0 14 Dtool_Bgt0Pjq2 0 0 
111 14 Dtool_Bgt0SnpB 0 7 142 430 285 14 Dtool_Bgt0SnpB 221 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 name 1 357  
112 14 Dtool_Bgt0yIgv 0 7 142 430 285 14 Dtool_Bgt0yIgv 221 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 5 4 name 1 357  7 u_speed 1 392  7 v_speed 1 392  7 w_speed 1 392  7 r_speed 1 392  
113 14 Dtool_Bgt0_cYY 0 4 143 350 0 14 Dtool_Bgt0_cYY 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_u_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 430  7 u_speed 1 392  
114 14 Dtool_Bgt0BfYf 0 4 144 350 0 14 Dtool_Bgt0BfYf 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_v_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 430  7 v_speed 1 392  
115 14 Dtool_Bgt0TeYm 0 4 145 350 0 14 Dtool_Bgt0TeYm 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_w_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 430  7 w_speed 1 392  
116 14 Dtool_Bgt0JQYD 0 4 146 350 0 14 Dtool_Bgt0JQYD 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::set_r_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 430  7 r_speed 1 392  
117 14 Dtool_Bgt0U76s 0 6 147 392 0 14 Dtool_Bgt0U76s 225 ////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_u_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 431  
118 14 Dtool_Bgt0a06z 0 6 148 392 0 14 Dtool_Bgt0a06z 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_v_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 431  
119 14 Dtool_Bgt0I166 0 6 149 392 0 14 Dtool_Bgt0I166 224 ////////////////////////////////////////////////////////////////////
//     Function: UvScrollNode::get_w_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 431  
120 14 Dtool_Bgt0C_6X 0 6 150 392 0 14 Dtool_Bgt0C_6X 225 ////////////////////////////////////////////////////////////////////
//     Function: UvSctrollNode::get_r_speed
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 431  
121 14 Dtool_Bgt0sdOe 0 7 151 353 0 14 Dtool_Bgt0sdOe 0 0 
122 14 Dtool_Bgt0aGME 0 7 154 433 287 14 Dtool_Bgt0aGME 230 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
123 14 Dtool_Bgt0D657 0 4 157 350 0 14 Dtool_Bgt0D657 282 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::set_lod_mode
//       Access: Published
//  Description: Specifies the mode in which LODNodes are analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 433  8 lod_mode 1 345  
124 14 Dtool_Bgt0A_z7 0 6 158 345 0 14 Dtool_Bgt0A_z7 280 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_lod_mode
//       Access: Published
//  Description: Returns the mode in which LODNodes are analyzed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 434  8 lod_mode 1 345  
125 14 Dtool_Bgt0VJ9i 0 4 159 350 0 14 Dtool_Bgt0VJ9i 310 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::clear
//       Access: Published
//  Description: Resets all of the data in the analyzer in preparation
//               for a new run.
//////////////////////////////////////////////////////////////////// 1 4 this 3 433  
126 14 Dtool_Bgt0V3RE 0 4 160 350 0 14 Dtool_Bgt0V3RE 522 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::add_node
//       Access: Published
//  Description: Adds a new node to the set of data for analysis.
//               Normally, this would only be called once, and passed
//               the top of the scene graph, but it's possible to
//               repeatedly pass in subgraphs to get an analysis of
//               all the graphs together.
//////////////////////////////////////////////////////////////////// 2 4 this 3 433  4 node 1 356  
127 14 Dtool_Bgt0xGbF 0 4 161 350 0 14 Dtool_Bgt0xGbF 258 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
//////////////////////////////////////////////////////////////////// 3 4 this 3 434  3 out 1 348  12 indent_level 1 351  
128 14 Dtool_Bgt0i2nW 0 4 161 350 0 14 Dtool_Bgt0i2nW 258 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::write
//       Access: Published
//  Description: Describes all the data collected.
//////////////////////////////////////////////////////////////////// 2 4 this 3 434  3 out 1 348  
129 14 Dtool_Bgt0bucf 0 6 162 351 0 14 Dtool_Bgt0bucf 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
130 14 Dtool_Bgt0z2Ep 0 6 163 351 0 14 Dtool_Bgt0z2Ep 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_instances
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
131 14 Dtool_Bgt0Rt2Z 0 6 164 351 0 14 Dtool_Bgt0Rt2Z 238 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_transforms
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
132 14 Dtool_Bgt03_OK 0 6 165 351 0 14 Dtool_Bgt03_OK 246 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_nodes_with_attribs
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
133 14 Dtool_Bgt05ofl 0 6 166 351 0 14 Dtool_Bgt05ofl 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lod_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
134 14 Dtool_Bgt0DkVh 0 6 167 351 0 14 Dtool_Bgt0DkVh 238 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_nodes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
135 14 Dtool_Bgt0Gv7g 0 6 168 351 0 14 Dtool_Bgt0Gv7g 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geoms
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
136 14 Dtool_Bgt0xju2 0 6 169 351 0 14 Dtool_Bgt0xju2 245 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_datas
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
137 14 Dtool_Bgt0J968 0 6 170 351 0 14 Dtool_Bgt0J968 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_geom_vertex_formats
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
138 14 Dtool_Bgt0uhjT 0 6 171 351 0 14 Dtool_Bgt0uhjT 240 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_vertex_data_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
139 14 Dtool_Bgt05VUV 0 6 172 351 0 14 Dtool_Bgt05VUV 236 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
140 14 Dtool_Bgt0M6Ln 0 6 173 351 0 14 Dtool_Bgt0M6Ln 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
141 14 Dtool_Bgt0kSfw 0 6 174 351 0 14 Dtool_Bgt0kSfw 234 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_colors
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
142 14 Dtool_Bgt0g5Ja 0 6 175 351 0 14 Dtool_Bgt0g5Ja 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_texcoords
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
143 14 Dtool_Bgt0sHvH 0 6 176 351 0 14 Dtool_Bgt0sHvH 232 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tris
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
144 14 Dtool_Bgt0lCaz 0 6 177 351 0 14 Dtool_Bgt0lCaz 233 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_lines
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
145 14 Dtool_Bgt0mNR1 0 6 178 351 0 14 Dtool_Bgt0mNR1 234 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_points
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
146 14 Dtool_Bgt0rux_ 0 6 179 351 0 14 Dtool_Bgt0rux_ 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_patches
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
147 14 Dtool_Bgt0Fvvk 0 6 180 351 0 14 Dtool_Bgt0Fvvk 243 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_individual_tris
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
148 14 Dtool_Bgt0uIlm 0 6 181 351 0 14 Dtool_Bgt0uIlm 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_tristrips
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
149 14 Dtool_Bgt0CNtH 0 6 182 351 0 14 Dtool_Bgt0CNtH 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_strips
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
150 14 Dtool_Bgt0ML7i 0 6 183 351 0 14 Dtool_Bgt0ML7i 235 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_trifans
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
151 14 Dtool_Bgt0WbM5 0 6 184 351 0 14 Dtool_Bgt0WbM5 245 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_triangles_in_fans
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
152 14 Dtool_Bgt0kg3K 0 6 185 351 0 14 Dtool_Bgt0kg3K 247 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_vertices_in_patches
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
153 14 Dtool_Bgt0fxoO 0 6 186 351 0 14 Dtool_Bgt0fxoO 237 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_texture_bytes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
154 14 Dtool_Bgt0NxoR 0 6 187 351 0 14 Dtool_Bgt0NxoR 240 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_long_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
155 14 Dtool_Bgt0M7Wp 0 6 188 351 0 14 Dtool_Bgt0M7Wp 241 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_num_short_normals
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
156 14 Dtool_Bgt02kAP 0 6 189 392 0 14 Dtool_Bgt02kAP 243 ////////////////////////////////////////////////////////////////////
//     Function: SceneGraphAnalyzer::get_total_normal_length
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 434  
115
321 9 LightNode 0 141313 9 LightNode 9 LightNode 0 0 0 0 164 0 3 161 162 163 0 0 2 3 322 157 158 3 323 159 160 0 0 360
////////////////////////////////////////////////////////////////////
//       Class : LightNode
// Description : A derivative of Light and of PandaNode.  All kinds of
//               Light except Spotlight (which must inherit from
//               LensNode instead) inherit from this class.
////////////////////////////////////////////////////////////////////

322 5 Light 0 2049 5 Light 5 Light 0 0 0 0 0 0 0 0 0 0 0 0 460
////////////////////////////////////////////////////////////////////
//       Class : Light
// Description : The abstract interface to all kinds of lights.  The
//               actual light objects also inherit from PandaNode, and
//               can therefore be added to the scene graph at some
//               arbitrary point to define the coordinate system of
//               effect.
////////////////////////////////////////////////////////////////////

323 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 436 437 438 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

324 12 AmbientLight 0 141313 12 AmbientLight 12 AmbientLight 0 0 0 1 165 167 0 1 166 0 0 1 0 321 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : AmbientLight
// Description : A light source that seems to illuminate all points in
//               space at once.  This kind of light need not actually
//               be part of the scene graph, since it has no meaningful
//               position.
////////////////////////////////////////////////////////////////////

325 12 CallbackNode 0 141313 12 CallbackNode 12 CallbackNode 0 0 0 1 168 176 0 7 169 170 171 172 173 174 175 0 0 1 0 323 0 0 0 0 308
////////////////////////////////////////////////////////////////////
//       Class : CallbackNode
// Description : A special node that can issue arbitrary callbacks to
//               user code, either during the cull or draw traversals.
////////////////////////////////////////////////////////////////////

326 11 ComputeNode 0 141313 11 ComputeNode 11 ComputeNode 0 0 0 1 177 183 0 5 178 179 180 181 182 1 439 0 1 0 323 0 0 0 0 325
////////////////////////////////////////////////////////////////////
//       Class : ComputeNode
// Description : A special node, the sole purpose of which is to
//               invoke a dispatch operation on the assigned
//               compute shader.
////////////////////////////////////////////////////////////////////

327 11 LODNodeType 0 532481 11 LODNodeType 11 LODNodeType 0 0 0 0 0 0 0 0 0 0 2 7 LNT_pop 7 LNT_pop 0
0 8 LNT_fade 8 LNT_fade 0
1 0 0

328 13 LightLensNode 0 26625 13 LightLensNode 13 LightLensNode 0 0 0 0 188 0 6 189 190 191 192 193 194 0 0 2 3 322 184 185 3 329 186 187 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : LightLensNode
// Description : A derivative of Light and of Camera. The name might
//               be misleading: it does not directly derive from
//               LensNode, but through the Camera class. The Camera
//               serves no purpose unless shadows are enabled.
////////////////////////////////////////////////////////////////////

329 6 Camera 0 2049 6 Camera 6 Camera 0 0 0 0 0 0 0 1 440 0 0 0 0 320
////////////////////////////////////////////////////////////////////
//       Class : Camera
// Description : A node that can be positioned around in the scene
//               graph to represent a point of view for rendering a
//               scene.
////////////////////////////////////////////////////////////////////

330 16 DirectionalLight 0 141313 16 DirectionalLight 16 DirectionalLight 0 0 0 1 195 202 0 6 196 197 198 199 200 201 0 0 1 0 328 0 0 0 0 288
////////////////////////////////////////////////////////////////////
//       Class : DirectionalLight
// Description : A light shining from infinitely far away in a
//               particular direction, like sunlight.
////////////////////////////////////////////////////////////////////

331 7 LODNode 0 141313 7 LODNode 7 LODNode 0 0 0 1 203 226 0 22 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 2 441 442 0 1 0 323 0 0 0 0 404
////////////////////////////////////////////////////////////////////
//       Class : LODNode
// Description : A Level-of-Detail node.  This selects only one of its
//               children for rendering, according to the distance
//               from the camera and the table indicated in the
//               associated LOD object.
////////////////////////////////////////////////////////////////////

332 11 FadeLODNode 0 141313 11 FadeLODNode 11 FadeLODNode 0 0 0 1 227 236 0 8 228 229 230 231 232 233 234 235 0 0 1 0 331 0 0 0 0 234
////////////////////////////////////////////////////////////////////
//       Class : FadeLODNode
// Description : A Level-of-Detail node with alpha based switching.
////////////////////////////////////////////////////////////////////

333 20 NodeCullCallbackData 0 141313 20 NodeCullCallbackData 20 NodeCullCallbackData 0 0 0 0 240 0 3 237 238 239 0 0 1 0 334 0 0 0 0 327
////////////////////////////////////////////////////////////////////
//       Class : NodeCullCallbackData
// Description : This kind of CallbackData is passed to the
//               CallbackObject added to
//               CallbackNode:set_cull_callback().
////////////////////////////////////////////////////////////////////

334 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

335 10 PointLight 0 141313 10 PointLight 10 PointLight 0 0 0 1 241 247 0 5 242 243 244 245 246 0 0 1 0 328 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PointLight
// Description : A light originating from a single point in space, and
//               shining in all directions.
////////////////////////////////////////////////////////////////////

336 18 SelectiveChildNode 0 141313 18 SelectiveChildNode 18 SelectiveChildNode 0 0 0 1 248 250 0 1 249 0 0 1 0 323 0 0 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SelectiveChildNode
// Description : A base class for nodes like LODNode and SequenceNode
//               that select only one visible child at a time.
////////////////////////////////////////////////////////////////////

337 12 SequenceNode 0 141313 12 SequenceNode 12 SequenceNode 0 0 0 1 255 259 0 3 256 257 258 0 0 2 3 336 251 252 3 338 253 254 0 0 306
////////////////////////////////////////////////////////////////////
//       Class : SequenceNode
// Description : A node that automatically cycles through rendering
//               each one of its children according to its frame rate.
////////////////////////////////////////////////////////////////////

338 13 AnimInterface 0 2049 13 AnimInterface 13 AnimInterface 0 0 0 0 0 0 0 0 0 0 0 0 464
////////////////////////////////////////////////////////////////////
//       Class : AnimInterface
// Description : This is the fundamental interface for things that
//               have a play/loop/stop type interface for frame-based
//               animation, such as animated characters.  This is the
//               base class for AnimControl and other, similar
//               classes.
////////////////////////////////////////////////////////////////////

339 15 ShaderGenerator 0 75777 15 ShaderGenerator 15 ShaderGenerator 0 0 0 1 260 0 0 2 261 262 0 0 1 0 340 0 0 0 0 1610
////////////////////////////////////////////////////////////////////
//       Class : ShaderGenerator
// Description : The ShaderGenerator is a device that effectively
//               replaces the classic fixed function pipeline with
//               a 'next-gen' fixed function pipeline.  The next-gen
//               fixed function pipeline supports features like
//               normal mapping, gloss mapping, cartoon lighting,
//               and so forth.  It works by automatically generating
//               a shader from a given RenderState.
//
//               Currently, there is one ShaderGenerator object per
//               GraphicsStateGuardian.  It is our intent that in
//               time, people will write classes that derive from
//               ShaderGenerator but which yield slightly different
//               results.
//
//               The ShaderGenerator owes its existence to the
//               'Bamboo Team' at Carnegie Mellon's Entertainment
//               Technology Center.  This is a group of students
//               who, as a semester project, decided that next-gen
//               graphics should be accessible to everyone, even if
//               they don't know shader programming.  The group
//               consisted of:
//
//               Aaron Lo, Programmer
//               Heegun Lee, Programmer
//               Erin Fernandez, Artist/Tester
//               Joe Grubb, Artist/Tester
//               Ivan Ortega, Technical Artist/Tester
//
//               Thanks to them!
//
////////////////////////////////////////////////////////////////////

340 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

341 9 Spotlight 0 141313 9 Spotlight 9 Spotlight 0 0 0 1 263 269 0 5 264 265 266 267 268 0 0 1 0 328 0 0 0 0 682
////////////////////////////////////////////////////////////////////
//       Class : Spotlight
// Description : A light originating from a single point in space, and
//               shining in a particular direction, with a cone-shaped
//               falloff.
//
//               The Spotlight frustum is defined using a Lens, so it
//               can have any of the properties that a camera lens can
//               have.
//
//               Note that the class is named Spotlight instead of
//               SpotLight, because "spotlight" is a single English
//               word, instead of two words.
////////////////////////////////////////////////////////////////////

342 10 SwitchNode 0 141313 10 SwitchNode 10 SwitchNode 0 0 0 1 270 274 0 3 271 272 273 0 0 1 0 336 0 0 0 0 281
////////////////////////////////////////////////////////////////////
//       Class : SwitchNode
// Description : A node that renders only one of its children,
//               according to the user's indication.
////////////////////////////////////////////////////////////////////

343 12 UvScrollNode 0 141313 12 UvScrollNode 12 UvScrollNode 0 0 0 1 275 285 0 9 276 277 278 279 280 281 282 283 284 0 0 1 0 323 0 0 0 0 274
////////////////////////////////////////////////////////////////////
//       Class : UvScrollNode
// Description : This node is placed at key points within the scene
//               graph to animate uvs.
////////////////////////////////////////////////////////////////////

344 18 SceneGraphAnalyzer 0 26625 18 SceneGraphAnalyzer 18 SceneGraphAnalyzer 0 0 0 1 286 287 0 33 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 0 0 0 0 1 345 297
////////////////////////////////////////////////////////////////////
//       Class : SceneGraphAnalyzer
// Description : A handy class that can scrub over a scene graph and
//               collect interesting statistics on it.
////////////////////////////////////////////////////////////////////

345 7 LodMode 0 794624 27 SceneGraphAnalyzer::LodMode 27 SceneGraphAnalyzer::LodMode 344 0 0 0 0 0 0 0 0 0 4 9 LM_lowest 29 SceneGraphAnalyzer::LM_lowest 0
0 10 LM_highest 30 SceneGraphAnalyzer::LM_highest 0
1 6 LM_all 26 SceneGraphAnalyzer::LM_all 0
2 7 LM_none 27 SceneGraphAnalyzer::LM_none 0
3 0 0

346 17 LightNode const * 0 8576 17 LightNode const * 17 LightNode const * 0 0 347 0 0 0 0 0 0 0 0 0 0

347 15 LightNode const 0 8832 15 LightNode const 15 LightNode const 0 0 321 0 0 0 0 0 0 0 0 0 0

348 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 349 0 0 0 0 0 0 0 0 0 0

349 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

350 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

351 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

352 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

353 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 352 0 0 0 0 0 0 0 0 0 0

354 11 LightNode * 0 8576 11 LightNode * 11 LightNode * 0 0 321 0 0 0 0 0 0 0 0 0 0

355 7 Light * 0 8576 7 Light * 7 Light * 0 0 322 0 0 0 0 0 0 0 0 0 0

356 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 323 0 0 0 0 0 0 0 0 0 0

357 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

358 14 AmbientLight * 0 8576 14 AmbientLight * 14 AmbientLight * 0 0 324 0 0 0 0 0 0 0 0 0 0

359 14 CallbackNode * 0 8576 14 CallbackNode * 14 CallbackNode * 0 0 325 0 0 0 0 0 0 0 0 0 0

360 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 361 0 0 0 0 0 0 0 0 0 0

361 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

362 20 CallbackNode const * 0 8576 20 CallbackNode const * 20 CallbackNode const * 0 0 363 0 0 0 0 0 0 0 0 0 0

363 18 CallbackNode const 0 8832 18 CallbackNode const 18 CallbackNode const 0 0 325 0 0 0 0 0 0 0 0 0 0

364 13 ComputeNode * 0 8576 13 ComputeNode * 13 ComputeNode * 0 0 326 0 0 0 0 0 0 0 0 0 0

365 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 366 0 0 0 0 0 0 0 0 0 0

366 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 367 0 0 0 0 0 0 0 0 0 0

367 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

368 19 ComputeNode const * 0 8576 19 ComputeNode const * 19 ComputeNode const * 0 0 369 0 0 0 0 0 0 0 0 0 0

369 17 ComputeNode const 0 8832 17 ComputeNode const 17 ComputeNode const 0 0 326 0 0 0 0 0 0 0 0 0 0

370 15 LightLensNode * 0 8576 15 LightLensNode * 15 LightLensNode * 0 0 328 0 0 0 0 0 0 0 0 0 0

371 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

372 18 GraphicsOutputBase 0 2048 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

373 27 GraphicsStateGuardianBase * 0 8576 27 GraphicsStateGuardianBase * 27 GraphicsStateGuardianBase * 0 0 374 0 0 0 0 0 0 0 0 0 0

374 25 GraphicsStateGuardianBase 0 2048 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 443 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

375 20 GraphicsOutputBase * 0 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 372 0 0 0 0 0 0 0 0 0 0

376 21 LightLensNode const * 0 8576 21 LightLensNode const * 21 LightLensNode const * 0 0 377 0 0 0 0 0 0 0 0 0 0

377 19 LightLensNode const 0 8832 19 LightLensNode const 19 LightLensNode const 0 0 328 0 0 0 0 0 0 0 0 0 0

378 8 Camera * 0 8576 8 Camera * 8 Camera * 0 0 329 0 0 0 0 0 0 0 0 0 0

379 18 DirectionalLight * 0 8576 18 DirectionalLight * 18 DirectionalLight * 0 0 330 0 0 0 0 0 0 0 0 0 0

380 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 381 0 0 0 0 0 0 0 0 0 0

381 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 382 0 0 0 0 0 0 0 0 0 0

382 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

383 24 DirectionalLight const * 0 8576 24 DirectionalLight const * 24 DirectionalLight const * 0 0 384 0 0 0 0 0 0 0 0 0 0

384 22 DirectionalLight const 0 8832 22 DirectionalLight const 22 DirectionalLight const 0 0 330 0 0 0 0 0 0 0 0 0 0

385 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 386 0 0 0 0 0 0 0 0 0 0

386 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 387 0 0 0 0 0 0 0 0 0 0

387 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

388 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 389 0 0 0 0 0 0 0 0 0 0

389 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 390 0 0 0 0 0 0 0 0 0 0

390 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

391 9 LODNode * 0 8576 9 LODNode * 9 LODNode * 0 0 331 0 0 0 0 0 0 0 0 0 0

392 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

393 15 LODNode const * 0 8576 15 LODNode const * 15 LODNode const * 0 0 394 0 0 0 0 0 0 0 0 0 0

394 13 LODNode const 0 8832 13 LODNode const 13 LODNode const 0 0 331 0 0 0 0 0 0 0 0 0 0

395 13 FadeLODNode * 0 8576 13 FadeLODNode * 13 FadeLODNode * 0 0 332 0 0 0 0 0 0 0 0 0 0

396 19 FadeLODNode const * 0 8576 19 FadeLODNode const * 19 FadeLODNode const * 0 0 397 0 0 0 0 0 0 0 0 0 0

397 17 FadeLODNode const 0 8832 17 FadeLODNode const 17 FadeLODNode const 0 0 332 0 0 0 0 0 0 0 0 0 0

398 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

399 28 NodeCullCallbackData const * 0 8576 28 NodeCullCallbackData const * 28 NodeCullCallbackData const * 0 0 400 0 0 0 0 0 0 0 0 0 0

400 26 NodeCullCallbackData const 0 8832 26 NodeCullCallbackData const 26 NodeCullCallbackData const 0 0 333 0 0 0 0 0 0 0 0 0 0

401 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 398 0 0 0 0 0 0 0 0 0 0

402 19 CullTraverserData * 0 8576 19 CullTraverserData * 19 CullTraverserData * 0 0 403 0 0 0 0 0 0 0 0 0 0

403 17 CullTraverserData 0 2048 17 CullTraverserData 17 CullTraverserData 0 0 0 0 0 0 0 0 0 0 0 0 778
////////////////////////////////////////////////////////////////////
//       Class : CullTraverserData
// Description : This collects together the pieces of data that are
//               accumulated for each node while walking the scene
//               graph during the cull traversal.
//
//               Having this as a separate object simplifies the
//               parameter list to CullTraverser::r_traverse(), as
//               well as to other functions like
//               PandaNode::cull_callback().  It also makes it easier
//               to add cull parameters, and provides a place to
//               abstract out some of the cull behavior (like
//               view-frustum culling).
////////////////////////////////////////////////////////////////////

404 12 PointLight * 0 8576 12 PointLight * 12 PointLight * 0 0 335 0 0 0 0 0 0 0 0 0 0

405 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 406 0 0 0 0 0 0 0 0 0 0

406 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 407 0 0 0 0 0 0 0 0 0 0

407 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

408 18 PointLight const * 0 8576 18 PointLight const * 18 PointLight const * 0 0 409 0 0 0 0 0 0 0 0 0 0

409 16 PointLight const 0 8832 16 PointLight const 16 PointLight const 0 0 335 0 0 0 0 0 0 0 0 0 0

410 20 SelectiveChildNode * 0 8576 20 SelectiveChildNode * 20 SelectiveChildNode * 0 0 336 0 0 0 0 0 0 0 0 0 0

411 14 SequenceNode * 0 8576 14 SequenceNode * 14 SequenceNode * 0 0 337 0 0 0 0 0 0 0 0 0 0

412 20 SequenceNode const * 0 8576 20 SequenceNode const * 20 SequenceNode const * 0 0 413 0 0 0 0 0 0 0 0 0 0

413 18 SequenceNode const 0 8832 18 SequenceNode const 18 SequenceNode const 0 0 337 0 0 0 0 0 0 0 0 0 0

414 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

415 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 338 0 0 0 0 0 0 0 0 0 0

416 17 ShaderGenerator * 0 8576 17 ShaderGenerator * 17 ShaderGenerator * 0 0 339 0 0 0 0 0 0 0 0 0 0

417 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 418 0 0 0 0 0 0 0 0 0 0

418 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : ShaderAttrib
// Description :
////////////////////////////////////////////////////////////////////

419 19 RenderState const * 0 8576 19 RenderState const * 19 RenderState const * 0 0 420 0 0 0 0 0 0 0 0 0 0

420 17 RenderState const 0 8832 17 RenderState const 17 RenderState const 0 0 421 0 0 0 0 0 0 0 0 0 0

421 11 RenderState 0 2048 11 RenderState 11 RenderState 0 0 0 0 0 0 0 0 0 0 0 0 621
////////////////////////////////////////////////////////////////////
//       Class : RenderState
// Description : This represents a unique collection of RenderAttrib
//               objects that correspond to a particular renderable
//               state.
//
//               You should not attempt to create or modify a
//               RenderState object directly.  Instead, call one of
//               the make() functions to create one for you.  And
//               instead of modifying a RenderState object, create a
//               new one.
////////////////////////////////////////////////////////////////////

422 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 417 0 0 0 0 0 0 0 0 0 0

423 11 Spotlight * 0 8576 11 Spotlight * 11 Spotlight * 0 0 341 0 0 0 0 0 0 0 0 0 0

424 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

425 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 382 0 0 0 0 0 0 0 0 0 0

426 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 424 0 0 0 0 0 0 0 0 0 0

427 12 SwitchNode * 0 8576 12 SwitchNode * 12 SwitchNode * 0 0 342 0 0 0 0 0 0 0 0 0 0

428 18 SwitchNode const * 0 8576 18 SwitchNode const * 18 SwitchNode const * 0 0 429 0 0 0 0 0 0 0 0 0 0

429 16 SwitchNode const 0 8832 16 SwitchNode const 16 SwitchNode const 0 0 342 0 0 0 0 0 0 0 0 0 0

430 14 UvScrollNode * 0 8576 14 UvScrollNode * 14 UvScrollNode * 0 0 343 0 0 0 0 0 0 0 0 0 0

431 20 UvScrollNode const * 0 8576 20 UvScrollNode const * 20 UvScrollNode const * 0 0 432 0 0 0 0 0 0 0 0 0 0

432 18 UvScrollNode const 0 8832 18 UvScrollNode const 18 UvScrollNode const 0 0 343 0 0 0 0 0 0 0 0 0 0

433 20 SceneGraphAnalyzer * 0 8576 20 SceneGraphAnalyzer * 20 SceneGraphAnalyzer * 0 0 344 0 0 0 0 0 0 0 0 0 0

434 26 SceneGraphAnalyzer const * 0 8576 26 SceneGraphAnalyzer const * 26 SceneGraphAnalyzer const * 0 0 435 0 0 0 0 0 0 0 0 0 0

435 24 SceneGraphAnalyzer const 0 8832 24 SceneGraphAnalyzer const 24 SceneGraphAnalyzer const 0 0 344 0 0 0 0 0 0 0 0 0 0

0
0
8
436 0 0 5 11 get_parents 15 get_num_parents 10 get_parent 
437 0 0 5 12 get_children 16 get_num_children 9 get_child 
438 0 0 5 11 get_stashed 15 get_num_stashed 11 get_stashed 
439 0 0 26 14 get_dispatches 18 get_num_dispatches 12 get_dispatch 
440 0 0 38 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
441 0 0 57 7 get_ins 16 get_num_switches 6 get_in 
442 0 0 57 8 get_outs 16 get_num_switches 7 get_out 
443 0 0 252 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
